<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Mouse trackbar]]></title>
      <url>/2017/04/27/Mouse-trackbar/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>关于OpenCV如何捕捉鼠标动作进行图片的交互。这里回调函数可能有点不太好理解，简单讲就是说，在cv::setMouseCallback之后，在指定的窗口，鼠标动作将会被捕捉，根据捕捉到的动作，按照onMouse的定义进行操作，之后回到捕捉状态。如果没有鼠标动作，那么程序将会一直wait,等待退出。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"imageInfo.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Mouse trackbar</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onMouse</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span>* param)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image;</div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/mangzai.jpg"</span>, <span class="number">0</span>);</div><div class="line">    getImageInfo(image);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image );</div><div class="line">    cv::setMouseCallback(<span class="string">"Original Image"</span>, onMouse,</div><div class="line">                         <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(&amp;image));</div><div class="line">    cvWaitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onMouse</span> <span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span>*param)</span></span>&#123;</div><div class="line">    cv::Mat *im = <span class="keyword">reinterpret_cast</span>&lt;cv::Mat*&gt;(param);</div><div class="line">    <span class="keyword">switch</span> (event)&#123;</div><div class="line">        <span class="keyword">case</span> cv::EVENT_LBUTTONDOWN: <span class="comment">// left mouse button down event</span></div><div class="line">            <span class="comment">// display pixel value at (x,y)</span></div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"at ("</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; <span class="string">") value is:"</span></div><div class="line">                      &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(</div><div class="line">                              im-&gt;at&lt;uchar&gt;(cv::Point(x,y))) &lt;&lt;</div><div class="line">                      <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记一：Read, Show and Write]]></title>
      <url>/2017/04/26/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9ARead-Show-and-Write/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>看了一段时间的 <em>OpenCV 3 Computer Vision Application Programming Cookbook - Third Edition</em>,受益匪浅，目前看到了第8章，打算先暂停下，总结下前面学到的内容。<br>这里，在开始的部分，我们介绍下图片文件的读写。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>先看一段代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//core header that declares the image data structure</span></div><div class="line"><span class="comment">//and the highgui header file that contains all the graphical interface</span></div><div class="line"><span class="comment">//functions</span></div><div class="line"></div><div class="line"><span class="comment">// print images's info</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getImageInfo</span><span class="params">(cv::Mat image)</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"=====Image Info=====\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.rows: "</span>&lt;&lt;image.rows&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.cols: "</span>&lt;&lt;image.cols&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.dims: "</span>&lt;&lt;image.dims&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.channels: "</span>&lt;&lt;image.channels()&lt;&lt;<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// something else...</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"====================\n"</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image;  <span class="comment">// create an empty image</span></div><div class="line"></div><div class="line">    <span class="comment">// read an input image</span></div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/mangzai.jpg"</span>);</div><div class="line">    <span class="keyword">if</span>(image.empty())&#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"ERROR: Empty Image!\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// exit with code -1;</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// print info of the image</span></div><div class="line">    getImageInfo(image);</div><div class="line"></div><div class="line">    <span class="comment">// define the window(optional)</span></div><div class="line">    <span class="comment">// http://stackoverflow.com/questions/31155577/opencv-is-namedwindow-necessary-before-imshow</span></div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Original Image"</span>);</div><div class="line">    <span class="comment">// show the image</span></div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// let's do something on the image</span></div><div class="line">    cv::Mat fliped;  <span class="comment">// we create another empty image</span></div><div class="line">    cv::flip(image, fliped, <span class="number">1</span>); <span class="comment">// 1-&gt;positive for horizontal</span></div><div class="line">                                <span class="comment">// 0 for vertical, negative for both</span></div><div class="line">    cv::imshow(<span class="string">"Fliped"</span>, fliped);</div><div class="line"></div><div class="line">    <span class="comment">// save the image</span></div><div class="line">    cv::imwrite(<span class="string">"Filped.jpg"</span>, fliped);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>简单讲解下代码要注意的地方：</p>
<ol>
<li><p>cv::imread</p>
<blockquote>
<p>源码：@param filename Name of file to be loaded.<br>@param flags Flag that can take values of cv::ImreadModes<br>*/<br>CV_EXPORTS_W Mat imread( const String&amp; filename, int flags = IMREAD_COLOR );<br>可以看到，两个参数分别是文件名和读取的方式，默认是COLOR即BGR方式读入。<br>关于flags, 我们截取源码片段看一下：<br>//! Imread flags<br>enum ImreadModes {<br>IMREAD_UNCHANGED = -1, //!&lt; If set, return the loaded image as is (with alpha channel, otherwise it gets cropped).</p>
<p>IMREAD_GRAYSCALE = 0,  //!&lt; If set, always convert image to the single channel grayscale image.<br>IMREAD_COLOR = 1,  //!&lt; If set, always convert image to the 3 channel BGR color image.</p>
<p>注意默认的是COLOR模式，即为1.</p>
</blockquote>
</li>
<li><p>image.empty()</p>
<blockquote>
<p>这里是很有必要的习惯，我们要保证图片的正确载入，否则下面的操作将会失去意义。用Cpp写imread,image为空会自动报错，在用Python调用OpenCV接口读取的时候，即使图片为空也不会有报错，这点要注意下。</p>
</blockquote>
</li>
<li><p>namedWindow</p>
<blockquote>
<p>namedWindow creates a window that can be used as a placeholder for images and trackbars. Created windows are referred to by their names.</p>
<p>The fuction namedWindow just makes sure that if you wish to do something with that same window afterwards (eg move, resize, close that window), you can do it by referencing it with the same name.</p>
<p>So if you just want to show it; you don’t need to use namedWindow().<br>即是说，如果只用窗口展示图片的话，不需要namedWindow, 在需要对图片展示窗口进行操作（复用）时才用的到。</p>
</blockquote>
</li>
<li><p>cv::waitKey() 与 cvWaitKey()</p>
<blockquote>
<p>@param delay Delay in milliseconds. 0 is the special value that means “forever”.<br>*/<br>CV_EXPORTS_W int waitKey(int delay = 0);</p>
<p>/<em> wait for key event infinitely (delay&lt;=0) or for “delay” milliseconds </em>/<br>CVAPI(int) cvWaitKey(int delay CV_DEFAULT(0));</p>
<p>看似并没有什么差别…但是这里有个之前发现的bug，参考<a href="http://datahonor.com/2017/02/22/OpenCV-Play-Video/">这里</a>.</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[public, protected and private]]></title>
      <url>/2017/04/25/public-protected-and-private/</url>
      <content type="html"><![CDATA[<p>关于c++类变量的属性：private, protected, private</p>
<h5 id="访问范围"><a href="#访问范围" class="headerlink" title="访问范围"></a>访问范围</h5><ul>
<li>[ ] private</li>
</ul>
<blockquote>
<p>只能由该类的函数和其友元函数访问<br>该类的对象不能访问</p>
</blockquote>
<ul>
<li>[ ] proteected</li>
</ul>
<blockquote>
<p>可以被，该类的函数，子类的函数， 友元函数访问<br>不能被类的对象访问</p>
</blockquote>
<ul>
<li>[ ] public</li>
</ul>
<blockquote>
<p>可以被该类的函数，子类的函数， 友元函数访问<br>也可以被类的对象访问</p>
</blockquote>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>子类与父类的关系：</p>
<p><img src="https://i.stack.imgur.com/W6CJ3.jpg" alt=""></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance" target="_blank" rel="external">stackoverflow</a></p>
<p><a href="http://cnmtjp.blog.51cto.com/204390/36548/" target="_blank" rel="external"> C++ 类访问控制</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Doubly Linked Lists]]></title>
      <url>/2017/04/25/Doubly-Linked-Lists/</url>
      <content type="html"><![CDATA[<h5 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h5><p>双向链表原理和单链表时一样的，也是由节点组成，每个节点包含要存储的数据信息和前后节点[单链表只有后面节点的信息]的位置信息，这些节点串连，形成一个链表。</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="doublyLLst-h"><a href="#doublyLLst-h" class="headerlink" title="doublyLLst.h"></a>doublyLLst.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_DOUBLYLLST_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_DOUBLYLLST_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Node&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    T info;</div><div class="line">    Node* next, *prev;</div><div class="line"></div><div class="line">    Node()&#123;</div><div class="line">        next = prev = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node(<span class="keyword">const</span> T&amp; el ,Node* n = <span class="number">0</span>, Node* p = <span class="number">0</span>)&#123;</div><div class="line">        info = el; next = n; prev = p;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> DoublyLinkedList&#123;</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    Node&lt;T&gt; *head, *tail;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    DoublyLinkedList()&#123;</div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToDLLTail</span><span class="params">(<span class="keyword">const</span> T&amp;)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToDLLHead</span><span class="params">(<span class="keyword">const</span> T&amp;)</span></span>;</div><div class="line">    <span class="function">T <span class="title">deleteFromDLLTail</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">T <span class="title">deleteFromDLLHead</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromEl</span><span class="params">(T el)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromPs</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToDLList</span><span class="params">(<span class="keyword">const</span> T&amp; el, <span class="keyword">int</span> pos)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInList</span><span class="params">(T el)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printLinkedLists</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::addToDLLTail(<span class="keyword">const</span> T &amp;el ) &#123;</div><div class="line">    <span class="keyword">if</span>(tail != <span class="number">0</span>)&#123;</div><div class="line">        tail = <span class="keyword">new</span> Node&lt;T&gt;(el, <span class="number">0</span>, tail);</div><div class="line">        tail-&gt;prev-&gt;next = tail;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> head = tail = <span class="keyword">new</span> Node&lt;T&gt;(el);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::addToDLLHead(<span class="keyword">const</span> T &amp;el ) &#123;</div><div class="line">    <span class="keyword">if</span>(head != <span class="number">0</span>)&#123;</div><div class="line">        head = <span class="keyword">new</span> Node&lt;T&gt;(el, head, <span class="number">0</span>);</div><div class="line">        head-&gt;next-&gt;prev = head;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> head = tail = <span class="keyword">new</span> Node&lt;T&gt;(el);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line">T DoublyLinkedList&lt;T&gt;::deleteFromDLLHead() &#123;</div><div class="line">    T el = head-&gt;info;</div><div class="line">    <span class="keyword">if</span>(head == tail)&#123; <span class="comment">// if only one node in the list</span></div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = tail =<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123; <span class="comment">// if more than one node in the list</span></div><div class="line">        head = head-&gt;next;  <span class="comment">// 先将head后移</span></div><div class="line">        <span class="keyword">delete</span> head-&gt;prev;  <span class="comment">// 删除旧head</span></div><div class="line">        head-&gt;prev = <span class="number">0</span>;  <span class="comment">// 新head's prev 设置为0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line">T DoublyLinkedList&lt;T&gt;::deleteFromDLLTail() &#123;</div><div class="line">    T el = tail-&gt;info;</div><div class="line">    <span class="keyword">if</span>(head == tail)&#123; <span class="comment">// if only one node in the list</span></div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = tail =<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123; <span class="comment">// if more than one node in the list</span></div><div class="line">        tail = tail-&gt;prev;</div><div class="line">        <span class="keyword">delete</span> tail-&gt;next;</div><div class="line">        tail-&gt;next = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::deleteNodeFromEl(T el) &#123;</div><div class="line">    <span class="keyword">if</span>(head != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(el == head-&gt;info &amp;&amp; head==tail)&#123;</div><div class="line">            <span class="keyword">delete</span> head;</div><div class="line">            head = tail = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(el == head-&gt;info)&#123;</div><div class="line">            deleteFromDLLHead();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            Node&lt;T&gt;* tmp, *pred;</div><div class="line">            <span class="keyword">for</span>(pred = head, tmp = head-&gt;next; tmp!=<span class="number">0</span> &amp;&amp; !(tmp-&gt;info == el);</div><div class="line">                pred = pred-&gt;next, tmp = tmp-&gt;next);  <span class="comment">// and a non-head node is deleted</span></div><div class="line">            <span class="keyword">if</span>(tmp != <span class="number">0</span>)&#123;</div><div class="line">                pred-&gt;next =tmp-&gt;next;</div><div class="line">                tmp-&gt;next-&gt;prev = pred;</div><div class="line">                <span class="keyword">delete</span> tmp;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::deleteNodeFromPs(<span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        deleteFromDLLHead();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos == <span class="number">-1</span>)</div><div class="line">        deleteFromDLLTail();</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        Node&lt;T&gt; *tmp = head-&gt;next;</div><div class="line">        Node&lt;T&gt; *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; pos - <span class="number">2</span>;</div><div class="line">            i++, pred = pred-&gt;next, tmp = tmp-&gt;next);</div><div class="line"></div><div class="line">        pred-&gt;next = tmp-&gt;next;</div><div class="line">        <span class="keyword">if</span>(tmp-&gt;next != <span class="number">0</span>)  <span class="comment">// 如果删除的不是最后一个节点，那么要与前面的节点连接[只在双向链表有]</span></div><div class="line">            tmp-&gt;next-&gt;prev = pred;</div><div class="line"></div><div class="line">        <span class="keyword">delete</span> tmp;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::addToDLList(<span class="keyword">const</span> T&amp;el, <span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        addToDLLHead(el);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos == <span class="number">-1</span>)</div><div class="line">        addToDLLTail(el);</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        Node&lt;T&gt; *tmp = head-&gt;next;</div><div class="line">        Node&lt;T&gt; *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; pos - <span class="number">2</span>;</div><div class="line">            i++, pred = pred-&gt;next, tmp = tmp-&gt;next);</div><div class="line"></div><div class="line">        Node&lt;T&gt;* psNode = <span class="keyword">new</span> Node&lt;T&gt;(el, tmp, pred);</div><div class="line">        tmp-&gt;prev = psNode;</div><div class="line">        pred-&gt;next = psNode;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">bool</span> DoublyLinkedList&lt;T&gt;::isInList(T el) &#123;</div><div class="line">    Node&lt;T&gt;* tmp;</div><div class="line">    <span class="keyword">for</span>(tmp=head; tmp != <span class="number">0</span> &amp;&amp; el != tmp-&gt;info; tmp = tmp-&gt;next);</div><div class="line">    <span class="keyword">return</span> tmp != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// print the singly linked lists</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::printLinkedLists()&#123;</div><div class="line">    Node&lt;T&gt;* p = head;</div><div class="line">    <span class="keyword">while</span>(p != <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;info);</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_DOUBLYLLST_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"doublyLLst.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    DoublyLinkedList&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</div><div class="line">    <span class="built_in">list</span>.addToDLLTail(<span class="number">11</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLLTail(<span class="number">12</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLLTail(<span class="number">13</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLLHead(<span class="number">10</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">list</span>.deleteFromDLLHead();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the deleting from head...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the deleting from el:12...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.deleteNodeFromEl(<span class="number">12</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the deleting from ps:2...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.deleteNodeFromPs(<span class="number">2</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the adding from ps:1...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLList(<span class="number">6</span>, <span class="number">1</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> isin = <span class="built_in">list</span>.isInList(<span class="number">6</span>);</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Is 6 in list? The answer is: "</span>&lt;&lt;isin&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出:</p>
<blockquote>
<p>10<br>11<br>12<br>13<br>after the deleting from head…<br>11<br>12<br>13<br>after the deleting from el:12…<br>11<br>13<br>after the deleting from ps:2…<br>11<br>after the adding from ps:1…<br>6<br>11<br>Is 6 in list? The answer is: 1</p>
</blockquote>
<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>此处用到模板，其声明的函数一般要在当前的头文件进行定义。当然，非要分到对应的cpp文件[例如doublyLLst.cpp]也行，只不过，这时候调用这些函数的话，要在main.cpp上面添加一句<code>include &quot;doublyLLst.cpp&quot;</code>。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><em><a href="http://stackoverflow.com/questions/13216844/undefined-reference-to-linkedlistintpush-frontint" target="_blank" rel="external">stackoverflow</a></em><br><em>Data Structures and Algorithms in C++</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Singly Linked Lists]]></title>
      <url>/2017/04/25/Singly-Linked-Lists/</url>
      <content type="html"><![CDATA[<h5 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h5><p>单链表的原理比较简单：单链表由一个个的节点组成，每个节点包含其要存储的数据和一个指针，其中指针指向下一个节点，由此串成一个单向的链表。容易算出，在非首部的任意位置n处，单链表的增删改查的复杂度都为<strong>O(n)</strong>.在单链表的开始，即首部的增删改查均为<strong>O(1)</strong>.与Array的复杂度对比具体可参考wiki这张表：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170425/Screenshot%20from%202017-04-25%2000-17-42.png" alt=""></p>
<p>初步的实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> IntNode&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="keyword">int</span> info;</div><div class="line">    IntNode* next;</div><div class="line"></div><div class="line">    IntNode()&#123;</div><div class="line">        next = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    IntNode(<span class="keyword">int</span> i, IntNode* in = <span class="number">0</span>)&#123;</div><div class="line">        info = i;</div><div class="line">        next = in;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 打印链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLinkedLists</span><span class="params">(IntNode* p )</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(p != <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;info);</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    IntNode* p = <span class="keyword">new</span> IntNode(<span class="number">10</span>);</div><div class="line">    p-&gt;next = <span class="keyword">new</span> IntNode(<span class="number">8</span>);</div><div class="line">    p-&gt;next-&gt;next = <span class="keyword">new</span> IntNode(<span class="number">50</span>);</div><div class="line">    printLinkedLists(p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>10<br>8<br>50</p>
</blockquote>
<h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><h6 id="intSLLst-h"><a href="#intSLLst-h" class="headerlink" title="intSLLst.h"></a>intSLLst.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_INTSSLST_H_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_INTSSLST_H_H</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> IntNode&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> info;</div><div class="line">    IntNode* next;</div><div class="line"></div><div class="line">    IntNode(<span class="keyword">int</span> el, IntNode* ptr = <span class="number">0</span>)&#123;</div><div class="line">        info = el; next = ptr;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> IntSLList&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    IntNode *head, *tail;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    IntSLList()&#123;</div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    ~IntSLList();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> head==<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToHead</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToTail</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteFromHead</span><span class="params">()</span></span>;  <span class="comment">// delete the head and return its info;</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteFromTail</span><span class="params">()</span></span>;  <span class="comment">// delete the tail and return its info;</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromEl</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromPos</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToLList</span><span class="params">(<span class="keyword">int</span> el, <span class="keyword">int</span> pos)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInList</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printLinkedLists</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_INTSSLST_H_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="intSLLst-cpp"><a href="#intSLLst-cpp" class="headerlink" title="intSLLst.cpp"></a>intSLLst.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"intSSLst.h"</span></span></div><div class="line"></div><div class="line">IntSLList::~IntSLList()&#123;</div><div class="line">    <span class="keyword">for</span>(IntNode *p; !isEmpty();)&#123;</div><div class="line">        p = head-&gt;next;</div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = p;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::addToHead(<span class="keyword">int</span> el) &#123;</div><div class="line">    head = <span class="keyword">new</span> IntNode(el, head);</div><div class="line">    <span class="keyword">if</span>(tail == <span class="number">0</span>)</div><div class="line">        tail = head;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::addToTail(<span class="keyword">int</span> el) &#123;</div><div class="line">    <span class="keyword">if</span>(tail!=<span class="number">0</span>)&#123; <span class="comment">// if list not empty</span></div><div class="line">        tail-&gt;next = <span class="keyword">new</span> IntNode(el);</div><div class="line">        tail = tail-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">else</span> head = tail = <span class="keyword">new</span> IntNode(el);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> IntSLList::deleteFromHead() &#123;</div><div class="line">    <span class="keyword">if</span>(isEmpty())</div><div class="line">        <span class="keyword">throw</span>(<span class="string">"Empty"</span>);  <span class="comment">// 若为空表，从头部删除的话就抛出错误</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> el = head-&gt;info;</div><div class="line">    IntNode *tmp = head;</div><div class="line">    <span class="keyword">if</span>(head == tail)  <span class="comment">// if only one node in the list</span></div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> head = head-&gt;next;</div><div class="line">    <span class="keyword">delete</span> tmp;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> IntSLList::deleteFromTail() &#123;</div><div class="line">    <span class="keyword">int</span> el = tail-&gt;info;</div><div class="line">    <span class="keyword">if</span>(head == tail)&#123;</div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;  <span class="comment">// if more than one node in the list</span></div><div class="line">        IntNode * tmp;  <span class="comment">// find the predecessor of tail</span></div><div class="line">        <span class="keyword">for</span>(tmp=head; tmp-&gt;next!=tail;tmp=tmp-&gt;next);</div><div class="line">        <span class="keyword">delete</span> tail;</div><div class="line">        tail = tmp;</div><div class="line">        tail-&gt;next = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::deleteNodeFromEl(<span class="keyword">int</span> el) &#123;</div><div class="line">    <span class="keyword">if</span>(head != <span class="number">0</span>)&#123; <span class="comment">// if non-empty list</span></div><div class="line">        <span class="keyword">if</span>(head == tail &amp;&amp; el == head-&gt;info)&#123;  <span class="comment">// if only one</span></div><div class="line">            <span class="keyword">delete</span> head;                       <span class="comment">// node in the list</span></div><div class="line">            head = tail = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(el == head-&gt;info)&#123; <span class="comment">// if more than one node in the list</span></div><div class="line">            IntNode* tmp = head;  <span class="comment">// 原文是head-&gt;next, 应该是错了</span></div><div class="line">            head = head-&gt;next;</div><div class="line">            <span class="keyword">delete</span> tmp;  <span class="comment">// and old head is deleted</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;<span class="comment">// if mpre than onde node in the lsit</span></div><div class="line">            IntNode *pred, *tmp;</div><div class="line">            <span class="keyword">for</span>(pred = head, tmp = head-&gt;next; tmp!=<span class="number">0</span> &amp;&amp; !(tmp-&gt;info == el);</div><div class="line">                    pred = pred-&gt;next, tmp = tmp-&gt;next);  <span class="comment">// and a non-head node is deleted</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(tmp != <span class="number">0</span>)&#123;</div><div class="line">                pred-&gt;next = tmp-&gt;next;</div><div class="line">                <span class="keyword">if</span>(tmp == tail)</div><div class="line">                    tail = pred;;</div><div class="line">                <span class="keyword">delete</span> tmp;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::deleteNodeFromPos(<span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        deleteFromHead();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos == <span class="number">-1</span>)</div><div class="line">        deleteFromTail();</div><div class="line"></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        IntNode *tmp=head-&gt;next;</div><div class="line">        IntNode *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pos<span class="number">-2</span>; i++, tmp = tmp-&gt;next, pred = pred-&gt;next);</div><div class="line"></div><div class="line">        pred-&gt;next = tmp-&gt;next;</div><div class="line">        <span class="keyword">delete</span> tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::addToLList(<span class="keyword">int</span> el, <span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        addToHead(el);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( pos == <span class="number">-1</span> )</div><div class="line">        addToTail(el);</div><div class="line"></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        IntNode *tmp=head-&gt;next;</div><div class="line">        IntNode *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pos<span class="number">-2</span>; i++, tmp = tmp-&gt;next, pred = pred-&gt;next);</div><div class="line"></div><div class="line">        IntNode* posNode = <span class="keyword">new</span> IntNode(el);</div><div class="line">        posNode-&gt;next = tmp;</div><div class="line">        pred-&gt;next = posNode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">bool</span> IntSLList::isInList(<span class="keyword">int</span> el) <span class="keyword">const</span> &#123;</div><div class="line">    IntNode *tmp;</div><div class="line">    <span class="keyword">for</span>(tmp = head; tmp !=<span class="number">0</span> &amp;&amp; (!tmp-&gt;info == el); tmp = tmp-&gt;next);</div><div class="line">    <span class="keyword">return</span> tmp != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// print the gly linked lists</span></div><div class="line"><span class="keyword">void</span> IntSLList::printLinkedLists()&#123;</div><div class="line">    IntNode* p = head;</div><div class="line">    <span class="keyword">while</span>(p != <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;info);</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"intSSLst.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// Linked lists</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    IntSLList <span class="built_in">list</span>;</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">50</span>);</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">8</span>);</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">10</span>);</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">13</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="built_in">list</span>.deleteFromHead();</div><div class="line">    &#125;<span class="keyword">catch</span> (<span class="keyword">char</span> <span class="keyword">const</span> * s)&#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"Error: "</span>&lt;&lt;s&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"After the deleting form head...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"After the deleting from pos: 2th...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.deleteNodeFromPos(<span class="number">2</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"After the adding from pos: 2th...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.addToLList(<span class="number">77</span>, <span class="number">2</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>13<br>10<br>8<br>50<br>After the deleting form head…<br>10<br>8<br>50<br>After the deleting from pos: 2th…<br>10<br>50<br>After the adding from pos: 2th…<br>10<br>77<br>50</p>
</blockquote>
<h6 id="new-delete-and-pointers"><a href="#new-delete-and-pointers" class="headerlink" title="new, delete and pointers"></a>new, delete and pointers</h6><p>在理解上面的deleteFromHead函数时有些懵，模仿着做了个测试，可以帮助理解。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num1 = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> num2 = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>* Ptr1 = <span class="keyword">new</span> <span class="keyword">int</span>(num1);</div><div class="line">    <span class="keyword">int</span>* Ptr2 = Ptr1; <span class="comment">// Ptr2与Ptr1是指向同一个地址的指针</span></div><div class="line">    <span class="keyword">int</span>* Ptr3 = &amp;num2;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr2);</div><div class="line">    Ptr1 = Ptr3;  <span class="comment">// 这里Ptr2已经为新的指针,和Ptr3指向同一地址</span></div><div class="line"></div><div class="line">    <span class="keyword">delete</span> Ptr2;  <span class="comment">// 释放Ptr2指向的内存,因为此时Ptr1已经和Ptr3指向了同一地址,所以不会受影响.</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>1<br>1<br>2<br>0</p>
</blockquote>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><em>Data Structures and Algorithms in C++</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Const in Cpp]]></title>
      <url>/2017/04/09/Const-in-Cpp/</url>
      <content type="html"><![CDATA[<p>关于const在函数声明里的应用。const放在函数前与后的区别。<br>先看下<a href="http://www.cplusplus.com/forum/general/12087/" target="_blank" rel="external">cplusplus</a>的一个问答：</p>
<p>问：</p>
<blockquote>
<p>Could you please explain the different between:<br>void const f() {} and void f() const {}.</p>
</blockquote>
<p>答：</p>
<blockquote>
<p>void const f() is equivilent to const void f(), which means the return type (in this case a void) is const. This is totally meaningless not only because it’s a void (there is nothing there that needs a const qualifier), but also because it’s a return type (returning something as const doesn’t make a whole lot of sense).</p>
<p>void f() const makes the function itself const. This only really has meaning for member functions. Making a member function const means that it cannot call any non-const member functions, nor can it change any member variables. It also means that the function can be called via a const object of the class:</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> A</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Const_No</span><span class="params">()</span></span>;   <span class="comment">// nonconst member function</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Const_Yes</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// const member function</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//-----------</span></div><div class="line"></div><div class="line">A  obj_nonconst;  <span class="comment">// nonconst object</span></div><div class="line">obj_nonconst.Const_No();  <span class="comment">// works fine</span></div><div class="line">obj_nonconst.Const_Yes(); <span class="comment">// works fine</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> A obj_const = A(); <span class="comment">// const object</span></div><div class="line">obj_const.Const_Yes(); <span class="comment">// works fine (const object can call const function)</span></div><div class="line">obj_const.Const_No();  <span class="comment">// ERROR (const object cannot call nonconst function) </span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>再参考下<a href="http://stackoverflow.com/questions/751681/meaning-of-const-last-in-a-c-method-declaration" target="_blank" rel="external">stackoverflow</a>:</p>
<blockquote>
<p>When you add the const keyword to a method the this pointer will essentially become const, and you can therefore not change any member data. (Unless you use mutable, more on that later).</p>
</blockquote>
<p>简单讲，就是说，const放在前面，是保证函数返回值为const；放在函数后面，是保证其调用的对象，也就是参数为const,不能被改变。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OPenCV--图片颜色空间缩减与遍历]]></title>
      <url>/2017/04/09/OPenCV-%E5%9B%BE%E7%89%87%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E7%BC%A9%E5%87%8F%E4%B8%8E%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p>记录下遍历图片的以及缩减图片颜色空间的几种办法，主要是记录下关于位运算进行像素的按位操作。<br>首先我们直观上看下图片的存储格式：</p>
<ul>
<li><p>[ ] 灰度图像<br>-<img src="http://img.blog.csdn.net/20160425221258898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
</li>
<li><p>[ ] 彩色图像<br><img src="http://img.blog.csdn.net/20160425221306945?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
</li>
</ul>
<h5 id="几种遍历的方法"><a href="#几种遍历的方法" class="headerlink" title="几种遍历的方法"></a>几种遍历的方法</h5><h6 id="利用指针进行"><a href="#利用指针进行" class="headerlink" title="利用指针进行"></a>利用指针进行</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReducePtr</span><span class="params">(cv::Mat image, <span class="keyword">int</span> div=<span class="number">64</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nl = image.rows; <span class="comment">// number of lines</span></div><div class="line">    <span class="comment">// total number or element per ;ine</span></div><div class="line">    <span class="keyword">int</span> nc = image.cols * image.channels();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)&#123;</div><div class="line">        <span class="comment">//get the address of row j</span></div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)&#123;</div><div class="line">            <span class="comment">// process each pixel=======================</span></div><div class="line"></div><div class="line">            data[i] = data[i]/div*div + div/<span class="number">2</span>;</div><div class="line">            <span class="comment">// OR in this way</span></div><div class="line">            <span class="comment">//data[i] = (data[i]/div)*div + div/2;</span></div><div class="line"></div><div class="line">            <span class="comment">//end of pixel processing=====================</span></div><div class="line">        &#125;<span class="comment">//end of line</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 理解reduction核心算法,这里假设div为10.</span></div><div class="line"><span class="comment">// 去除‘余数’， 拉向中心</span></div><div class="line"><span class="comment">// 11  --&gt; data[i]/div*div + div/2 --&gt; 10 + 5 --&gt; 15</span></div><div class="line"><span class="comment">// 16  --&gt; data[i]/div*div + div/2 --&gt; 10 + 5 --&gt; 15</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 使用Clone,保护原来图像不受损坏</span></div><div class="line">    cv::Mat imageClone = image.clone();</div><div class="line">    colorReducePtr(imageClone, <span class="number">64</span>);</div><div class="line">    cv::namedWindow(<span class="string">"Result"</span>);</div><div class="line">    cv::imshow(<span class="string">"Result"</span>, imageClone);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduceBit</span><span class="params">(cv::Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nl = image.rows;</div><div class="line">    <span class="keyword">int</span> nc = image.cols*image.channels();</div><div class="line">    <span class="keyword">if</span>(image.isContinuous())&#123;</div><div class="line">        nc = nc*nl;</div><div class="line">        nl = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(</div><div class="line">            <span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>)+<span class="number">0.5</span>);</div><div class="line"></div><div class="line">    uchar mask = <span class="number">0xFF</span>&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nl;j++)&#123;</div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)&#123;</div><div class="line">            *data &amp;= mask;   <span class="comment">//a &amp;= b; set a to a &amp; b</span></div><div class="line">            *data++ += div2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line"></div><div class="line">    colorReduceBit(image);</div><div class="line">    cv::namedWindow(<span class="string">"Result"</span>);</div><div class="line">    cv::imshow(<span class="string">"Result"</span>, image);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>几点解释：</p>
<blockquote>
<p>0xFF&lt;&lt;n 是为左移运算，这里简单说就是1111 1111(0xFF的二进制表示)整体向左移动n个长度，右边空出部分用0补充。假设n=4,则结果为1111 0000</p>
<p><em>data &amp;= mask等价于</em>data = (<em>data &amp; mask),即先进行按位和再赋值给</em>data, 例如说*data = 11001100,那么根据上面叙述，n=4时mask=1111 0000 ，那么取按位和之后得到，1100 0000</p>
<p><em>data++ += div2;的运算等价于</em>data += div/2; data++[指针移动]，可以如下测试得到。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> * p = &amp;a;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;p&lt;&lt;<span class="string">'\n'</span>;</div><div class="line">    *p++ += <span class="number">1</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">'\n'</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;p;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>0x7ffe0d69780c<br>2<br>0x7ffe0d697810<br>可以看到，a的值恰好增加了1，且指针p的位置增加了4,即一个单位int的长度。</p>
</blockquote>
<h6 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Iterators</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce</span><span class="params">(cv::Mat image, <span class="keyword">int</span> div=<span class="number">64</span>)</span></span>&#123;</div><div class="line">    <span class="comment">// div must be a power of 2</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(</div><div class="line">            <span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>)+<span class="number">0.5</span>);</div><div class="line">    <span class="comment">// mask used to round the pixel value</span></div><div class="line">    uchar mask = <span class="number">0xFF</span>&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//get iterators</span></div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator it = image.begin&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator itend = image.end&lt;cv::Vec3b&gt;();</div><div class="line"></div><div class="line">    <span class="comment">//scan all pixels</span></div><div class="line">    <span class="keyword">for</span>(;it!=itend;++it)&#123;</div><div class="line">        (*it)[<span class="number">0</span>] &amp;= mask;</div><div class="line">        (*it)[<span class="number">0</span>] += div2;</div><div class="line"></div><div class="line">        (*it)[<span class="number">1</span>] &amp;= mask;</div><div class="line">        (*it)[<span class="number">1</span>] += div2;</div><div class="line"></div><div class="line">        (*it)[<span class="number">2</span>] &amp;= mask;</div><div class="line">        (*it)[<span class="number">2</span>] += div2;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line"></div><div class="line">    colorReduce(image);</div><div class="line">    cv::namedWindow(<span class="string">"Result"</span>);</div><div class="line">    cv::imshow(<span class="string">"Result"</span>, image);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="时间效率比较"><a href="#时间效率比较" class="headerlink" title="时间效率比较"></a>时间效率比较</h5><p>这里，我们综合上面的三种方法进行时间效率的比较</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// Time calculation</div><div class="line"></div><div class="line">// get run time [学习函数作为参数的用法]</div><div class="line">double getTime(void(*pfunc)(cv::Mat,int), cv::Mat img,int div)&#123;</div><div class="line">    const int64 start = cv::getTickCount();</div><div class="line">    pfunc(img, 64);</div><div class="line">    double duration = (cv::getTickCount()-start)/cv::getTickFrequency();</div><div class="line">    std::cout&lt;&lt;duration&lt;&lt;'\n';</div><div class="line">    return duration;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 指针，除法</div><div class="line">void colorReducePtr(cv::Mat image, int div=64)&#123;</div><div class="line">    int nl = image.rows; // number of lines</div><div class="line">    // total number or element per ;ine</div><div class="line">    int nc = image.cols * image.channels();</div><div class="line"></div><div class="line">    for(int j=0; j&lt;nl; j++)&#123;</div><div class="line">        // get the address of row j</div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        for(int i=0;i&lt;nc;i++)&#123;</div><div class="line">            // process each pixel=======================</div><div class="line"></div><div class="line">            data[i] = data[i]/div*div + div/2;</div><div class="line">            // OR in this way</div><div class="line">            //data[i] = (data[i]/div)*div + div/2;</div><div class="line"></div><div class="line">            //end of pixel processing=====================</div><div class="line">        &#125;//end of line</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//位运算</div><div class="line"></div><div class="line">void colorReduceBit(cv::Mat image, int div=64)&#123;</div><div class="line">    int nl = image.rows;</div><div class="line">    int nc = image.cols*image.channels();</div><div class="line">    if(image.isContinuous())&#123;</div><div class="line">        nc = nc*nl;</div><div class="line">        nl = 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 四舍五入取指数</div><div class="line">    int n = static_cast&lt;int&gt;(</div><div class="line">            log(static_cast&lt;double&gt;(div))/log(2.0)+0.5);</div><div class="line"></div><div class="line">    uchar mask = 0xFF&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;1;</div><div class="line">    for(int j=0;j&lt;nl;j++)&#123;</div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        for(int i=0;i&lt;nc;i++)&#123;</div><div class="line">            // 下面这步等同于data[i] = data[i]/div*div</div><div class="line">            *data &amp;= mask;   //a &amp;= b; set a to a &amp; b</div><div class="line">            *data++ += div2;  // *data += div/2; data++[指针移动]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//Iterator</div><div class="line"></div><div class="line">void colorReduceItr(cv::Mat image, int div=64)&#123;</div><div class="line">    // div must be a power of 2</div><div class="line">    int n = static_cast&lt;int&gt;(</div><div class="line">            log(static_cast&lt;double&gt;(div))/log(2.0)+0.5);</div><div class="line">    // mask used to round the pixel value</div><div class="line">    uchar mask = 0xFF&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;1;</div><div class="line"></div><div class="line">    //get iterators</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator it = image.begin&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator itend = image.end&lt;cv::Vec3b&gt;();</div><div class="line"></div><div class="line">    //scan all pixels</div><div class="line">    for(;it!=itend;++it)&#123;</div><div class="line">        (*it)[0] &amp;= mask;</div><div class="line">        (*it)[0] += div2;</div><div class="line"></div><div class="line">        (*it)[1] &amp;= mask;</div><div class="line">        (*it)[1] += div2;</div><div class="line"></div><div class="line">        (*it)[2] &amp;= mask;</div><div class="line">        (*it)[2] += div2;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread(".../lake.png");</div><div class="line">    cv::Mat imagePtr(image), imageBit(image), imageItr(image);</div><div class="line"></div><div class="line">    // Ptr</div><div class="line">    std::cout&lt;&lt;"colorReducePtr=====\nTime: ";</div><div class="line">    getTime(colorReducePtr, imagePtr, 64);</div><div class="line"></div><div class="line">    // Bit</div><div class="line">    std::cout&lt;&lt;"colorReduceBit=====\nTime: ";</div><div class="line">    getTime(colorReduceBit, imageBit, 64);</div><div class="line"></div><div class="line">    // Itr</div><div class="line">    std::cout&lt;&lt;"colorReduceItr=====\nTime: ";</div><div class="line">    getTime(colorReduceItr, imageItr, 64);</div><div class="line"></div><div class="line"></div><div class="line">    cv::namedWindow("Result");</div><div class="line">    cv::imshow("Result", image);</div><div class="line">    cv::waitKey(0);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">colorReducePtr=====</div><div class="line">Time: 0.00144757</div><div class="line">colorReduceBit=====</div><div class="line">Time: 0.000849209</div><div class="line">colorReduceItr=====</div><div class="line">Time: 0.00298409</div></pre></td></tr></table></figure></p>
<p>可以明显看到位运算的高效</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://www.lai18.com/content/10109307.html" target="_blank" rel="external">OpenCv学习笔记(六)</a><br><a href="https://en.wikipedia.org/wiki/Bitwise_operation#Bit_shifts" target="_blank" rel="external">Bitwise operation</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Opencv3学习笔记]]></title>
      <url>/2017/04/06/Learning-Opencv3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h6 id="关于遍历"><a href="#关于遍历" class="headerlink" title="关于遍历"></a>关于遍历</h6><p>再学到P123时，发现书上的代码是无法运行的，先来看下它的写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">int</span> sz[<span class="number">3</span>] = &#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>&#125;;</div><div class="line">cv::<span class="function">Mat	<span class="title">m</span><span class="params">(<span class="number">3</span>, sz, CV_32FC3)</span></span>;		<span class="comment">//	A	three-dimensional	array	of	size	4-by-4-by-4</span></div><div class="line">cv::randu( m, <span class="number">-1.0</span>f, <span class="number">1.0f</span>);			<span class="comment">//	fill	with	random	numbers	from	-1.0	to	1.0</span></div><div class="line"><span class="keyword">float</span> max = <span class="number">0.0f</span>;														<span class="comment">//	minimum	possible	value	of	L2	norm</span></div><div class="line">cv::MatConstIterator&lt;cv::Vec3f&gt; it = m.begin();</div><div class="line"><span class="keyword">while</span>( it != m.end() ) &#123;</div><div class="line">    len2 = (*it)[<span class="number">0</span>]*(*it)[<span class="number">0</span>]+(*it)[<span class="number">1</span>]*(*it)[<span class="number">1</span>]+(*it)[<span class="number">2</span>]*(*it)[<span class="number">2</span>];</div><div class="line">    <span class="keyword">if</span>( len2 &gt; max ) max = len2;</div><div class="line">    it++;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>首先，len2未声明，再者，MatConstIterator的用法可能有变化。<br>参考<a href="http://docs.opencv.org/trunk/d5/dd2/classcv_1_1NAryMatIterator.html" target="_blank" rel="external">官方文档示例代码</a>解决。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sz[<span class="number">3</span>] = &#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>&#125;;</div><div class="line">    cv::<span class="function">Mat	<span class="title">m</span><span class="params">(<span class="number">3</span>, sz, CV_32FC3)</span></span>;		<span class="comment">//	A	three-dimensional	array	of	size	4-by-4-by-4</span></div><div class="line">    cv::randu( m, <span class="number">-1.0</span>f, <span class="number">1.0f</span>);			<span class="comment">//	fill	with	random	numbers	from	-1.0	to	1.0</span></div><div class="line">    <span class="keyword">float</span> max = <span class="number">0.0f</span>;														<span class="comment">//	minimum	possible	value	of	L2	norm</span></div><div class="line">    cv::MatConstIterator_&lt;cv::Vec3f&gt; it = m.begin&lt;cv::Vec3f&gt;();</div><div class="line">    <span class="keyword">while</span>( it != m.end&lt;cv::Vec3f&gt;() ) &#123;</div><div class="line">        <span class="keyword">float</span> len2 = (*it)[<span class="number">0</span>]*(*it)[<span class="number">0</span>]+(*it)[<span class="number">1</span>]*(*it)[<span class="number">1</span>]+(*it)[<span class="number">2</span>]*(*it)[<span class="number">2</span>];</div><div class="line">        <span class="keyword">if</span>( len2 &gt; max ) max = len2;</div><div class="line">        it++;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;max&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python抓取微信文章]]></title>
      <url>/2017/04/04/Python%E6%8A%93%E5%8F%96%E5%BE%AE%E4%BF%A1%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p>涉及selenium获取cookie并用于模拟登录[这方法很强大！]<br>通过<a href="http://www.gsdata.cn/" target="_blank" rel="external">清博指数</a>，抓取海大夜洞表白信…<br>数据存取及简单可视化…</p>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><h6 id="Get-lovelinks-py"><a href="#Get-lovelinks-py" class="headerlink" title="Get_lovelinks.py"></a>Get_lovelinks.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">selenium模拟登录清博指数后获取表白信列表页，</div><div class="line">并在列表页提取表白信文章标题及链接，存入csv文件</div><div class="line">[注意这里不登录获取不到全部的列表页，而登录涉及cookie加密，并未深入研究，直接用selenium获取cookie]</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># selenium获取cookie, 并写入文件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie_from_network</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Get data from selenium..."</span>)</div><div class="line">    <span class="comment"># 使用selenium</span></div><div class="line">    dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">    dcap[<span class="string">"phantomjs.page.settings.userAgent"</span>] = (</div><div class="line">        <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0"</span>)</div><div class="line">    driver = webdriver.PhantomJS(<span class="string">'/home/shensir/phantomjs-2.1.1-linux-x86_64/bin/phantomjs'</span>,</div><div class="line">                                 desired_capabilities=dcap)</div><div class="line">    driver.maximize_window()</div><div class="line"></div><div class="line">    login_url = <span class="string">'http://www.gsdata.cn/member/login'</span></div><div class="line">    driver.get(url=login_url)</div><div class="line">    data = driver.page_source</div><div class="line">    <span class="comment"># print(data)</span></div><div class="line">    driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/div/form/div/p[1]/input'</span>).send_keys(<span class="string">'登录手机号码'</span>)</div><div class="line">    driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/div/form/div/p[2]/input'</span>).send_keys(<span class="string">'密码'</span>)</div><div class="line">    driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/div/form/div/p[4]/input'</span>).click()</div><div class="line"></div><div class="line">    cookie_list = driver.get_cookies()</div><div class="line">    <span class="comment"># print(cookie_list)</span></div><div class="line">    cookie_dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookie_list:</div><div class="line">        <span class="comment">#写入文件</span></div><div class="line">        f = open(cookie[<span class="string">'name'</span>]+<span class="string">'.qingbo'</span>,<span class="string">'wb'</span>)</div><div class="line">        pickle.dump(cookie, f)</div><div class="line">        f.close()</div><div class="line">        cookie_dict[cookie[<span class="string">'name'</span>]] = cookie[<span class="string">'value'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cookie_dict</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 从文件获取cookie</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie_from_cache</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Get cookie from cache files..."</span>)</div><div class="line">    cookie_dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> parent, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">'./'</span>):</div><div class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</div><div class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">'.qingbo'</span>):</div><div class="line">                <span class="comment"># print(filename)</span></div><div class="line">                <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">                    d = pickle.load(f)</div><div class="line">                    cookie_dict[d[<span class="string">'name'</span>]] = d[<span class="string">'value'</span>]</div><div class="line">    <span class="keyword">return</span> cookie_dict</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Cookie final</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></div><div class="line">    cookie_dict = get_cookie_from_cache()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie_dict:</div><div class="line">        cookie_dict = get_cookie_from_network()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cookie_dict</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 从单个文章列表页获取表白信url</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_love_urls</span><span class="params">(url)</span>:</span></div><div class="line"></div><div class="line">    cookdic = get_cookie()</div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'</span>&#125;</div><div class="line">    timeout = <span class="number">5</span></div><div class="line">    r = requests.get(url, headers=headers, cookies=cookdic, timeout=timeout)</div><div class="line">    soup = bs(r.text, <span class="string">'lxml'</span>)</div><div class="line">    <span class="comment"># print(soup)</span></div><div class="line">    articles = soup.find(<span class="string">'ul'</span>, &#123;<span class="string">'class'</span>:<span class="string">'article-ul'</span>&#125;).find_all(<span class="string">'li'</span>)</div><div class="line">    <span class="comment"># print(len(articles))</span></div><div class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> articles:</div><div class="line">        title = article.find(<span class="string">'h4'</span>).get_text()</div><div class="line">        <span class="keyword">if</span> <span class="string">"表白"</span> <span class="keyword">in</span> title:</div><div class="line">            love_url = article.find(<span class="string">'h4'</span>).find(<span class="string">'a'</span>).get(<span class="string">'href'</span>)</div><div class="line">            print(title, love_url)</div><div class="line">            love_titles.append(title)</div><div class="line">            love_urls.append(str(love_url))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># urls为所有文章列表列</span></div><div class="line">    urls = [<span class="string">'http://www.gsdata.cn/query/article?q=hndxyd&amp;search_field=4&amp;post_time=0&amp;sort=-1&amp;read_num=0'</span> \</div><div class="line">            <span class="string">'&amp;page=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>)]</div><div class="line"></div><div class="line">    love_titles = []</div><div class="line">    love_urls = []</div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">        time.sleep(<span class="number">3</span>)   <span class="comment"># 这里建议sleep大约2-3s， 不然网页会因为访问频繁刷出验证码</span></div><div class="line">        get_love_urls(url)</div><div class="line"></div><div class="line">    <span class="comment"># 将表白新url数据存到文件</span></div><div class="line">    love_links_file = pd.DataFrame()</div><div class="line">    love_links_file[<span class="string">'titles'</span>] = love_titles</div><div class="line">    love_links_file[<span class="string">'urls'</span>] = love_urls</div><div class="line">    love_links_file.to_csv(<span class="string">'love_links.csv'</span>, index=<span class="keyword">None</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="Get-lovedatas-py"><a href="#Get-lovedatas-py" class="headerlink" title="Get_lovedatas.py"></a>Get_lovedatas.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">通过之前获取的表白信文章标题及链接文件，爬取表白信详细信息，存入json文件</div><div class="line">此处不需要登录~</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">2016.4.02 -- 2016.6.17 是旧的版式</div><div class="line">2016.6.21 -- 2017.4.03 是新的版式</div><div class="line"></div><div class="line"></div><div class="line">由于旧版内容较少，这里我们暂时只抓新版内容；</div><div class="line">以后有时间再补充旧版的抓取。</div><div class="line"></div><div class="line">文章有些已经被删除，注意设置容错</div><div class="line"></div><div class="line">尝试使用xpath, 其实不会用，，，这里完全是找规律，欢迎大家提出改进意见</div><div class="line"></div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 导入表白信标题链接数据[这里转化为字典是为了方便操作，当然，之前再保存时存为json格式会更方便]</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_links_data</span><span class="params">()</span>:</span></div><div class="line">    links_data = &#123;&#125;</div><div class="line">    data = pd.read_csv(<span class="string">'love_links.csv'</span>)</div><div class="line">    titles = list(data[<span class="string">'titles'</span>])</div><div class="line">    links = list(data[<span class="string">'urls'</span>])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(titles)):</div><div class="line">        links_data[titles[i]] = links[i]</div><div class="line">    <span class="keyword">return</span> links_data</div><div class="line"></div><div class="line"><span class="comment"># 从标题（注意是之前获取的列表页的标题）获取信件数目，用于下面的xpath路径的书写</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num_from_title</span><span class="params">(title)</span>:</span></div><div class="line">    num = re.findall(<span class="string">'.*?\|(\d+)封'</span>, title)[<span class="number">0</span>]</div><div class="line">    <span class="comment"># print(num)</span></div><div class="line">    <span class="keyword">return</span> int(num)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_date_from_title</span><span class="params">(title)</span>:</span></div><div class="line">    date = re.findall(<span class="string">'\\n(.*?)表白'</span>, title)</div><div class="line">    date = list(date)[<span class="number">0</span>]</div><div class="line">    print(date)</div><div class="line">    <span class="keyword">return</span> date</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(title, url)</span>:</span></div><div class="line">    page_data = &#123;&#125;</div><div class="line">    page_data[<span class="string">'title'</span>] = title</div><div class="line">    page_data[<span class="string">'url'</span>] = url</div><div class="line">    page_data[<span class="string">'envos'</span>] = &#123;&#125;</div><div class="line"></div><div class="line">    num = get_num_from_title(title)</div><div class="line">    data = requests.get(url)</div><div class="line">    selector = etree.HTML(data.text)</div><div class="line"></div><div class="line">    <span class="comment"># 表白信标题</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    不会用xpath, try...and we can find some rules from different part</div><div class="line">    And we know that the '/text()' is to get the text </div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[1]/section[1]/section/section/section[1]/section/section/p/span</div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[2]/section[1]/section/section/section[1]/section/section/p/span</div><div class="line">    '''</div><div class="line">    envo_titles = []</div><div class="line">    envo_title_paths = [<span class="string">'/html/body/div/div[2]/div[1]/div[1]/div[2]/section[&#123;&#125;]/section[1]/section/section/section[1]/section/section/p/span/text()'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num)]</div><div class="line">    <span class="keyword">for</span> envo_title_path <span class="keyword">in</span> envo_title_paths:</div><div class="line">        envo_title = selector.xpath(envo_title_path)</div><div class="line">        envo_titles.append(list(envo_title)[<span class="number">0</span>])</div><div class="line">        <span class="comment"># print(envo_title)</span></div><div class="line"></div><div class="line">    <span class="comment"># 表白信内容</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[1]/section[1]/section/section/section[1]/section/section/section/p[2]/span</div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[2]/section[1]/section/section/section[1]/section/section/section/p[2]/span</div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[3]/section[1]/section/section/section[1]/section/section/section/p[2]/span</div><div class="line">    '''</div><div class="line">    envo_conts = []</div><div class="line">    envo_cont_paths = [<span class="string">'/html/body/div/div[2]/div[1]/div[1]/div[2]/section[&#123;&#125;]/section[1]/section/section/section[1]/section/section/section/p[2]/span/text()'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num)]</div><div class="line">    <span class="keyword">for</span> envo_cont_path <span class="keyword">in</span> envo_cont_paths:</div><div class="line">        envo_cont = selector.xpath(envo_cont_path)</div><div class="line">        envo_cont = list(envo_cont)[<span class="number">0</span>]</div><div class="line">        envo_conts.append(envo_cont)</div><div class="line">        <span class="comment"># print(envo_cont)</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(envo_titles)):</div><div class="line">        page_data[<span class="string">'envos'</span>][envo_titles[i]] = envo_conts[i]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> page_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    links_data = load_links_data()</div><div class="line">    links_title = list(links_data.keys())</div><div class="line">    links_url = list(links_data.values())</div><div class="line">    all_data = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> link_num <span class="keyword">in</span> range(len(links_data)):</div><div class="line">        title = links_title[link_num]</div><div class="line">        url = links_url[link_num]</div><div class="line">        date = get_date_from_title(title)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            page_data = get_data(title, url)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(url)</div><div class="line">            page_data = <span class="keyword">None</span></div><div class="line">        all_data[date] = page_data</div><div class="line">        print(page_data)</div><div class="line"></div><div class="line">    <span class="comment"># save as json format</span></div><div class="line">    <span class="comment"># all_data = json.dumps(all_data,  ensure_ascii=False)</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'all_data.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</div><div class="line">        json.dump(all_data, f ,ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="Data-analysis-py"><a href="#Data-analysis-py" class="headerlink" title="Data_analysis.py"></a>Data_analysis.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">导入json文件进行分析</div><div class="line">这里仅仅进行简单的探索，大家可以仿照之前的QQ空间数据分析报告那篇文章，</div><div class="line">调用boson公司的ａｐｉ进行情感分析等</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'all_data.txt'</span>) <span class="keyword">as</span> data_file:</div><div class="line">    data = json.load(data_file)</div><div class="line"></div><div class="line"><span class="comment"># print(data)</span></div><div class="line">data = dict(data)</div><div class="line">details = list(data.values())</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 合并标题至同一列表</span></div><div class="line">whos = []</div><div class="line">texts = []</div><div class="line"><span class="keyword">for</span> detail <span class="keyword">in</span> details:</div><div class="line">    <span class="keyword">if</span> detail != <span class="keyword">None</span>:</div><div class="line">        page_data = detail[<span class="string">'envos'</span>]</div><div class="line">        who = list(page_data.keys())</div><div class="line">        text = list(page_data.values())</div><div class="line">        whos += who</div><div class="line">        texts += text</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Whos</span></div><div class="line">print(<span class="string">"总数量： "</span>,  len(whos))</div><div class="line">print(whos)</div><div class="line"></div><div class="line"><span class="comment">## 年级</span></div><div class="line">whos_text = <span class="string">' '</span>.join(str(who) <span class="keyword">for</span> who <span class="keyword">in</span> whos)</div><div class="line">rank = re.findall(<span class="string">'.*?(\d\d).*?'</span>, whos_text)</div><div class="line"></div><div class="line">true_rank = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(rank)):</div><div class="line">    <span class="keyword">if</span> (int(rank[i])&gt;=<span class="number">12</span>) <span class="keyword">and</span> (int(rank[i])&lt;=<span class="number">16</span>):</div><div class="line">        true_rank.append(rank[i])</div><div class="line"></div><div class="line">sns.countplot(true_rank)</div><div class="line">plt.title(<span class="string">'Grade'</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment">## reply</span></div><div class="line">reps = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> who <span class="keyword">in</span> whos:</div><div class="line">    <span class="keyword">if</span> <span class="string">'回复'</span> <span class="keyword">in</span> who:</div><div class="line">        reps += <span class="number">1</span></div><div class="line">print(<span class="string">"回信数： "</span>, reps)</div><div class="line">print(<span class="string">"回信率： "</span>, reps/len(whos))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># What</span></div><div class="line"><span class="comment"># print(texts)</span></div><div class="line"></div><div class="line"><span class="comment"># 分词</span></div><div class="line">clear_texts = []</div><div class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> texts:</div><div class="line">    sentence = sentence.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">'\xa0'</span>, <span class="string">''</span>)</div><div class="line">    clear_texts += sentence</div><div class="line"><span class="comment"># print(clear_texts)</span></div><div class="line"></div><div class="line"></div><div class="line">pic_path = <span class="string">'heart.png'</span></div><div class="line">heart_mask = imread(pic_path)</div><div class="line"></div><div class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</div><div class="line">wordcloud = WordCloud(background_color=<span class="string">"white"</span>, font_path=<span class="string">'/home/shensir/Downloads/Fonts/msyh.ttc'</span>, mask=heart_mask).generate(str(clear_texts))</div><div class="line">plt.imshow(wordcloud)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/wechat/grade.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/wechat/heart_wc.png" alt=""></p>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><blockquote>
<p>代码写的比较粗糙…不过思路还好比较清晰<br>这个清博…好像提供API来着…并未深入了解</p>
</blockquote>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://kekefund.com/2016/01/21/spider-cookie/" target="_blank" rel="external">网页爬虫之cookie自动获取 </a><br><a href="http://datahonor.com/2017/03/02/QQ%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/">QQ空间数据分析报告 </a></p>
<h5 id="废话几句"><a href="#废话几句" class="headerlink" title="废话几句"></a>废话几句</h5><p>自学Python快一年了，其中最大的快乐当真来自大家的认同。不断有朋友通过邮件，留言等方式告诉我说，为了学爬虫来的，觉得自己写的浅显易懂些，希望多更新爬虫的文章。有位大佬竟然真的从博客园，追到DATADREAM[之前的站点，不打算更了…], 再追到DATAHONOR[就是本站了…]，莫名感动…对大家的认可，真是发自内心的感激，谢谢你们的鼓励~ 曾听得曹涧秋老师讲到人活着的意义何在，说到底，三个字————被需要！那么我觉着…省略1W字 :-)<br>不过呢因为目前大部分时间放在cpp和数学，所以很少写爬虫了，十分抱歉~争取有时间尽量写点…<br>大好年华，一起努力吧！<br>           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                      ————2017/4/4  01:40 小小白<br>                                     -</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Opencv3学习笔记--制作简易视频播放器]]></title>
      <url>/2017/04/03/Opencv%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><em>Learning Opencv3</em>上面的的一个代码，第一次看的时候基本没看懂，这次大概看懂了。这里先贴上代码，再来简单解释下代码流程。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> g_slider_position = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> g_run = <span class="number">1</span>, g_dontset = <span class="number">0</span>;</div><div class="line">cv::VideoCapture g_cap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTrackbarSlide</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">void</span>*)</span></span>&#123;</div><div class="line">    g_cap.<span class="built_in">set</span>(cv::CAP_PROP_POS_FRAMES, pos);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!g_dontset)</div><div class="line">        g_run = <span class="number">1</span>;</div><div class="line">    g_dontset = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::namedWindow(<span class="string">"Example"</span>, cv::WINDOW_AUTOSIZE);</div><div class="line">    g_cap.open(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/sampvideo.ogv"</span>);</div><div class="line">    <span class="keyword">int</span> frames = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_FRAME_COUNT);</div><div class="line">    <span class="keyword">int</span> tmpw = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_FRAME_WIDTH);</div><div class="line">    <span class="keyword">int</span> tmph = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_FRAME_HEIGHT);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Video has "</span>&lt;&lt;frames&lt;&lt;<span class="string">" frames of dimensions("</span>&lt;&lt;tmpw&lt;&lt;<span class="string">", "</span>&lt;&lt;tmph&lt;&lt;<span class="string">")."</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    cv::createTrackbar(<span class="string">"Position"</span>,	<span class="string">"Example"</span>,	&amp;g_slider_position,	frames,</div><div class="line">                       onTrackbarSlide);</div><div class="line"></div><div class="line">    cv::Mat frame;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        <span class="keyword">if</span>(g_run != <span class="number">0</span>)&#123;</div><div class="line">            g_cap&gt;&gt;frame; <span class="keyword">if</span>(frame.empty()) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> current_pos = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_POS_FRAMES);</div><div class="line"></div><div class="line">            g_dontset = <span class="number">1</span>;</div><div class="line"></div><div class="line">            cv::setTrackbarPos(<span class="string">"Position"</span>, <span class="string">"Example"</span>, current_pos);</div><div class="line">            cv::imshow(<span class="string">"Example"</span>, frame);</div><div class="line"></div><div class="line">            g_run -= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">char</span> c = (<span class="keyword">char</span>) cvWaitKey(<span class="number">10</span>);</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'s'</span>) <span class="comment">// single step</span></div><div class="line">            &#123;g_run =<span class="number">1</span>; <span class="built_in">cout</span>&lt;&lt;<span class="string">"single step, run = "</span>&lt;&lt;g_run&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'r'</span>)  <span class="comment">// run mode</span></div><div class="line">            &#123;g_run = <span class="number">-1</span>; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Run mode, run = "</span>&lt;&lt;g_run&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(c == <span class="number">27</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h5><p>重要参数解释：</p>
<blockquote>
<p>g_slider_position，进度条位置</p>
<p>g_run，控制视频播放模式，为正数[如5]时，表示距离视频暂停还有几个[这里是5个]frame将输出到屏幕，这里g_run为正数大都是1，故为step即但不模式； 当为负数时，将一直播放下去，因为g_run -=1的存在使得g_run一直为负。</p>
<p>g_dontest,为了鼠标点击进度条的动作而设计的参数。使得点击进度条后，自动进入step模式。</p>
<p>createTrackbar( TrackbarName, “Linear Blend”, &amp;alpha_slider, alpha_slider_max, on_trackbar );Whenever the user moves the Trackbar, the callback function on_trackbar is called</p>
</blockquote>
<p>运行流程：</p>
<blockquote>
<p>开始时g_slider_position为0,在main函数中输出到frame，后show，这个过程中，g_dontset被设置为1，使得在不进行<em>点击以移动进度条</em>动作时，进度条不会被重置到新的指定的位置,且g_dontset将一直被从0重置为1.此时，如果在cvWaitKey的10ms[图片显示时间]，按下‘s’则，按照前面参数说明，在播放一帧之后，视频将暂停；按下’r’，则g_run将由-1递减下去，一直为负，视频一直进行下去。若是此时点击移动进度条，则在g_dontset = 1之前[这时g_dontset=0]调用回调函数onTrackbarSlide，使得g_cap的位置被指定为当前帧的位置，接着g_run = 1， 进入单步模式，接着将show当前帧的画面和他的下一帧画面后进入暂停模式。</p>
</blockquote>
<p>个人理解，错误之处请指正。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我，Arch和Ubuntu的故事]]></title>
      <url>/2017/03/30/%E6%88%91%EF%BC%8CArch%E5%92%8CUbuntu%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>最近几天，准确说是整整四天，一直在折腾系统，故事比较多…<br>享受win &amp; Ubuntu16.04LTS双系统的时候，突然Ubuntu就无法登入，进入无线login的情况。各种谷歌查资料，无果。在编程群问，无果。</p>
<blockquote>
<p>这里犯下两个错误。<br>1.在google不行的情况下，并没有尝试进行百度，或者其他搜索。[显然后面他们起了作用]。<br>2.在编程群问，毕竟不是专门玩系统的，无果也是难免。</p>
</blockquote>
<p>随后，开始重装Ubuntu,撞了两次，都是可以进去，配置Python和Cpp等一系列的开发环境后，重启，一样进入无限login。[注意到当中出现命令提示，含有sd2 , clean, blocks这些词]<br>失败告终。</p>
<blockquote>
<p>一个错误。<br>再次遇见同样的错误，并没有去深入研究然后尝试解决它！[说好的探索精神呢…]</p>
</blockquote>
<p>万念俱灰之时，大佬介绍Arch,开始整。查些资料，一次就安装成功了。xfce4桌面，startx启动。<br>之后再次配置环境，仍然出现[sd2, clean, blocks]这些提示，但是系统可以运行。换dde桌面（deepin），开启黑屏，发现壁纸是黑的，改变壁纸，完美运行，桌面环境很漂亮。配置环境，重启，黑屏，真的黑了。。。无解，重启，还是无法进入桌面…进tty,发现环境变量一团糟[这里是重点。。。]，继续配置已经没有可能…</p>
<p>被arch搞得巨伤…主要opencv，R也不好配置，滚回去再次尝试装Ubuntu。轻车熟路，装好重启，并未打开win10，进入grub的rescue模式，按照百度经验教程，一路ls (hd0,msdos6)/boot/grub，发现系统一道文件，在启动normal.mod，发现文件丢失。经玩系统的大佬指点，U盘安装微PE，进去PE后，DiskGenius重建MBR，成功进入win10!再easybcd引导Ubuntu,完成安装。再次进入Ubuntu,一样，配置环境之后重启，进入无限login，这时候…说实话，近乎崩溃了，毕竟四天了…</p>
<p>然而，还是没有放弃。。。喝口水，再来。</p>
<p>百度，转机出现，发现有人设置错了系统的环境变量进入无限login,回去tty看我的/home/.xession-error文件[过程中一样是一团糟的环境变量]，发现果然错了！现在找对了方向，于是进入/etc/profile，发现Anaconda的路径前面没有加export,而且路径格式不对…于是连同下面自己添加的java环境境变量一同注释，重启，搞定！</p>
<p>四天不眠不休的折腾[每天睡5个小时多点…]，确实很伤，但是也学到了很多知识。<br>下面总结下：</p>
<p>系统相关：</p>
<blockquote>
<p>双系统之间不要随意拖拽文件，之前那些莫名的提示，可能就是这个造成的。<br>启动arch桌面不要用startx,用lightdm[用前者启动deepin桌面可能黑屏]<br>设置wifi最简单的办法，命令nmtui</p>
</blockquote>
<p>博客转移：</p>
<blockquote>
<p>一定记得备份文件<br>记得hexo需要的node版本不要最新，官方稳定版本即可<br>只需要重新将hexo文件复制到新的电脑，配置git,安装hexo[不需要init等其他的，一条安装命令即可]</p>
</blockquote>
<p>方法：</p>
<blockquote>
<p>百度有时候比Google来得更加简单直接。<br>记得找专业的人士解决相关的问题<br>记得要针对问题探索，不要逃避问题…</p>
</blockquote>
<p>最后，真心感谢arch群里各位大佬的帮助，感谢废帝大佬多次建议让我换电脑:-)————不要折腾系统，换电脑————有钱会换的orz…</p>
<p>虽说又回到最初的起点，但是这四天，没有浪费。</p>
<p>继续努力吧少年，20岁，本就是野蛮生长的年纪。<br>也许明天是个好天气呢。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Arch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/03/30/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[typedef & #define]]></title>
      <url>/2017/03/25/typedef-define/</url>
      <content type="html"><![CDATA[<p>在c++里面，有两种方法为一个数据类型起一个别名，一个是通过预编译器(preprocessor)来替换文本实现，另一个是通过typedef来为类型起别名。<br>一般情况下，而这均可以实现想要的效果<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>* float_pointer;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FLOAT_POINTER float*</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">float</span> fv = <span class="number">1.0</span>;</div><div class="line">    float_pointer fp1;</div><div class="line">    fp1 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*fp1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    FLOAT_POINTER FP1;</div><div class="line">    FP1 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*FP1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>1<br>1</p>
</blockquote>
<p>然而，在<strong>同时为多个变量定义类型</strong>时，就会出现差别。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>* float_pointer;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FLOAT_POINTER float*</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">float</span> fv = <span class="number">1.0</span>;</div><div class="line">    float_pointer fp1, fp2;</div><div class="line">    fp1 = &amp;fv;</div><div class="line">    fp2 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*fp1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    FLOAT_POINTER FP1, FP2;</div><div class="line">    FP1 = &amp;fv;</div><div class="line">    FP2 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*FP1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>这段代码将报错</p>
<blockquote>
<p>main.cpp:18:9: error: cannot convert ‘float*’ to ‘float’ in assignment<br>     FP2 = &fv;<br>         ^</p>
</blockquote>
<p>可以看出，FP2的类型为float，而不是期望的float*</p>
<p>这是因为，预编译器仅仅是将FLOAT_POINTER 替换为 float *， 也就是说定义FP1，FP2时，是这样的：</p>
<blockquote>
<p>float * FP1, FP2;</p>
</blockquote>
<p>即仅仅定义FP1为float* ，而FP2为float.</p>
<p>参考：<em>C++ Primer Plus [5th]</em>p234</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Python,Lingo, Octave解线性规划问题(LP)]]></title>
      <url>/2017/03/22/%E5%88%A9%E7%94%A8Python%E8%A7%A3%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-LP/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>新学期开了运筹学(OR)的课,最近学线性规划问题(LP)。老师建议说是用MATLAB 或者 LINGO，这里再加上Python,三种都试下，进行下比较。[懒的切换到windows系统了。。。用Octave代替Matlab了先。。。]</p>
<h5 id="Python求解-cvxopt"><a href="#Python求解-cvxopt" class="headerlink" title="Python求解(cvxopt)"></a>Python求解(cvxopt)</h5><p>这里用的库是cvxopt,之前解SVM的QP问题也用过，这里求解LP问题。<br>这是文档的介绍：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/OR/LP1.png" alt=""></p>
<p>这里，我们主要看下在有无等式约束两种情况下的不同,其实也没差 :-）</p>
<h6 id="无等式约束"><a href="#无等式约束" class="headerlink" title="无等式约束"></a>无等式约束</h6><span>$$ minimize     \quad   -4x_{1}-5x_{2}$$</span><!-- Has MathJax -->
<span>$$subject \quad to
\left\{\begin{matrix}
2x_{1} &amp; +x_{2} &amp; \leq 3\\ 
x_{1}&amp; +2x_{2} &amp; \leq 3\\
x_{1}&amp;,x_{2}&amp;\geq 0
\end{matrix}\right.$$</span><!-- Has MathJax -->
<p>实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> cvxopt <span class="keyword">import</span> matrix, solvers</div><div class="line"></div><div class="line">c = matrix([<span class="number">-4.</span>, <span class="number">-5.</span>])</div><div class="line">G = matrix([[<span class="number">2.</span>, <span class="number">1.</span>, <span class="number">-1.</span>, <span class="number">0.</span>], [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">0.</span>, <span class="number">-1.</span>]])</div><div class="line">h = matrix([<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">0.</span>, <span class="number">0.</span>])</div><div class="line">sol = solvers.lp(c, G, h)</div><div class="line">print(sol[<span class="string">'x'</span>])</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><br>输出：</p>
<blockquote>
<pre><code>pcost       dcost       gap    pres   dres   k/t
</code></pre><p> 0: -8.1000e+00 -1.8300e+01  4e+00  0e+00  8e-01  1e+00<br> 1: -8.8055e+00 -9.4357e+00  2e-01  1e-16  4e-02  3e-02<br> 2: -8.9981e+00 -9.0049e+00  2e-03  3e-16  5e-04  4e-04<br> 3: -9.0000e+00 -9.0000e+00  2e-05  1e-16  5e-06  4e-06<br> 4: -9.0000e+00 -9.0000e+00  2e-07  3e-16  5e-08  4e-08<br>Optimal solution found.<br>[ 1.00e+00]<br>[ 1.00e+00]</p>
</blockquote>
<p>Remark：</p>
<blockquote>
<p>这里记得一定要调入numpy,否则会出现如下报错<br>Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.<br>可能是依赖的问题。</p>
</blockquote>
<h6 id="有等式约束"><a href="#有等式约束" class="headerlink" title="有等式约束"></a>有等式约束</h6><span>$$ minimize  \quad  z = -3x_{1}+x_{2}+x{3}$$</span><!-- Has MathJax -->
<span>$$subject \quad to
\left\{\begin{matrix}
x_{1} &amp;  -2x_{2}&amp; +x_{3} &amp; \leq 11\\ 
-4x_{1} &amp; +x{2} &amp;  +2x{3}&amp; \geq 3\\ 
 -2x_{1}&amp;  &amp; +x_{3} &amp; = 1\\ 
 x_{1},&amp;x_{2},&amp;x_{3}&amp;\geq 0 
\end{matrix}\right.$$</span><!-- Has MathJax -->
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> cvxopt <span class="keyword">import</span> matrix, solvers</div><div class="line"></div><div class="line"></div><div class="line">G = matrix([[<span class="number">1.0</span>,<span class="number">4.0</span>,<span class="number">-2.0</span>,<span class="number">-1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>], [<span class="number">-2.0</span>,<span class="number">-1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">-1.0</span>,<span class="number">0.0</span>],[<span class="number">1.0</span>,<span class="number">-2.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">-1.0</span>]])</div><div class="line">h = matrix([<span class="number">11.0</span>,<span class="number">-3.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>])</div><div class="line"></div><div class="line">A = matrix([<span class="number">-2.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>])</div><div class="line">A = A.trans()  <span class="comment"># 这里不转置会报错</span></div><div class="line">b = matrix([<span class="number">1.0</span>])</div><div class="line">c = matrix([<span class="number">-3.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>])</div><div class="line"></div><div class="line">sol = solvers.lp(c,G,h,A=A,b=b)</div><div class="line">print(sol[<span class="string">'x'</span>])</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<pre><code>pcost       dcost       gap    pres   dres   k/t
</code></pre><p> 0: -2.1667e+00 -1.1167e+01  3e+01  9e-01  1e+00  1e+00<br> 1: -1.1986e+00 -1.9278e+00  2e+00  7e-02  1e-01  1e-01<br> 2: -1.9895e+00 -2.0163e+00  6e-02  3e-03  4e-03  5e-03<br> 3: -1.9999e+00 -2.0002e+00  6e-04  3e-05  5e-05  5e-05<br> 4: -2.0000e+00 -2.0000e+00  6e-06  3e-07  5e-07  5e-07<br> 5: -2.0000e+00 -2.0000e+00  6e-08  3e-09  5e-09  5e-09<br>Optimal solution found.<br>[ 4.00e+00]<br>[ 1.00e+00]<br>[ 9.00e+00]</p>
</blockquote>
<h5 id="Lingo求解线性规划问题"><a href="#Lingo求解线性规划问题" class="headerlink" title="Lingo求解线性规划问题"></a>Lingo求解线性规划问题</h5><p>题目还是上面的有等式约束的那道题[用lingo处理等式约束方便的多，有无等式约束几乎是一样的]</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MIn=-3*x1+x2+x3;</div><div class="line"></div><div class="line">x1&gt;=0;</div><div class="line">x2&gt;=0;</div><div class="line">x3&gt;=0;</div><div class="line"></div><div class="line">x1-2*x2+x3 &lt;= 11;</div><div class="line">-4*x1+x2+2*x3&gt;=3;</div><div class="line">-2*x1+x3=1;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/OR/Lp2.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/OR/LP3.png" alt=""></p>
<h5 id="利用Octave解决LP问题"><a href="#利用Octave解决LP问题" class="headerlink" title="利用Octave解决LP问题"></a>利用Octave解决LP问题</h5><blockquote>
<p>注意，在MatLab中，使用的函数是linprog, 这在Octave换成了glpk函数。</p>
</blockquote>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">c = [-3 1 1]&apos;;</div><div class="line"></div><div class="line">A = [1 -2 1;</div><div class="line">-4 1 2;</div><div class="line">-2 0 1];</div><div class="line"></div><div class="line">b = [11 3 1];</div><div class="line">lb = [0 0 0];</div><div class="line">ub = [];</div><div class="line"></div><div class="line">ctype = &quot;ULS&quot;;</div><div class="line">vartype = &quot;CCC&quot;;</div><div class="line">s = 1;</div><div class="line">param.msglev = 1;</div><div class="line">param.itlim = 100;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[xopt, fmin, status, extra] = glpk (c, A, b, lb, ub, ctype, vartype, s, param)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>xopt =</p>
<p>   4<br>   1<br>   9</p>
<p>fmin = -2<br>status = 0<br>extra =</p>
<p> scalar structure containing the fields:</p>
<p>   lambda =</p>
<pre><code>-0.33333
   0.33333
   0.66667
</code></pre><p> redcosts =</p>
<pre><code>0
 0
 0
</code></pre><p>   time = 0<br>    status =  5</p>
</blockquote>
<p>好啦，都完美运行咯，再见单纯形法，再见大M法：-）</p>
<h5 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h5><p><a href="http://cvxopt.org/" target="_blank" rel="external">cvxopt</a><br><a href="https://www.gnu.org/software/octave/doc/v4.0.0/Linear-Programming.html" target="_blank" rel="external">glpk</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> OR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle——American Pubs[Python] ]]></title>
      <url>/2017/03/19/Kaggle%E2%80%94%E2%80%94American-Pubs-Python/</url>
      <content type="html"><![CDATA[<p>Kaggle案例学习——American Pubs [Python分析]<br>源码[notebook形式]已经发布在此数据集的<a href="https://www.kaggle.com/shenxiangzhuang/d/erikhambardzumyan/pubs/let-s-see" target="_blank" rel="external">kernel</a>上，亦可在Kaggle上直接查看。[这次是原创~]<br>这里仅记录下源码。<br>数据集：</p>
<blockquote>
<p>Income - Your Approximate Monthly Income (in Armenian Dram)<br>Fav_Pub - Which is your Favorite Pub?<br>WTS -Maximum willingness to spend at the pub<br>Freq - How often do you visit pubs?<br>Prim_Imp - Which feature is of primary importantance for you?<br>Sec_Imp - Which feature is of secondary importantance for you?<br>Stratum - From which regional stratum are you?<br>Lifestyle - What is your lifestyle?<br>Occasions- On which occasions do you go to pubs most of the time?</p>
</blockquote>
<p>源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># linear algebra</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line"><span class="comment"># machine learning</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"><span class="comment"># function to split the data for cross-validation</span></div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC, LinearSVC</div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># EDA</span></div><div class="line">data = pd.read_csv(<span class="string">"/home/shen/PycharmProjects/MyPython/Kaggle/American Pubs/armenian_pubs.csv"</span> )</div><div class="line">data.head()</div><div class="line"></div><div class="line">data.info()</div><div class="line">print(<span class="string">'=============================\n'</span>, data.notnull().sum())</div><div class="line"></div><div class="line">columns = data.columns</div><div class="line"><span class="comment"># Notice that there are 'Age ', 'Gender ', 'Income ', not 'Age', 'Gender', 'Income'.</span></div><div class="line"><span class="comment"># In other words, we'd better remove the additional space.</span></div><div class="line">data.columns = [<span class="string">'Timestamp'</span>, <span class="string">'Age'</span>, <span class="string">'Gender'</span>, <span class="string">'Income'</span>, <span class="string">'Occupation'</span>, <span class="string">'Fav_Pub'</span>, <span class="string">'WTS'</span>, <span class="string">'Freq'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>, <span class="string">'Stratum'</span>, <span class="string">'Lifestyle'</span>, <span class="string">'Occasions'</span>]</div><div class="line">columns = data.columns</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Age</span></div><div class="line">sns.countplot(<span class="string">'Age'</span>,data=data)</div><div class="line"><span class="comment"># Or we can use matplotlib</span></div><div class="line"><span class="string">'''</span></div><div class="line">Agedata = data['Age']</div><div class="line">Agebins = list(range(Agedata.min(), Agedata.max()))</div><div class="line">plt.hist(Agedata, bins=Agebins)</div><div class="line">plt.title('Age')</div><div class="line">plt.show()</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># Gender</span></div><div class="line">sns.countplot(<span class="string">'Gender'</span>,data=data)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Income</span></div><div class="line">Incomedata = data[<span class="string">'Income'</span>]</div><div class="line">print(Incomedata.notnull().sum())</div><div class="line">print(Incomedata.describe())</div><div class="line">sns.boxplot(Incomedata)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Notice that there are some outliers, let's remove them and plot them again for the detail</span></div><div class="line">Incomedata_cleaned = Incomedata[Incomedata &lt; <span class="number">1000000</span>]</div><div class="line">sns.boxplot(Incomedata_cleaned)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># The rest...yes, still countplot...I love it :)</span></div><div class="line">cols = [<span class="string">'Occupation'</span>, <span class="string">'Freq'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>, <span class="string">'Stratum'</span>, <span class="string">'Lifestyle'</span>, <span class="string">'Occasions'</span>]</div><div class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">36</span>))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cols)):</div><div class="line">    fig.add_subplot(len(cols),<span class="number">1</span>, i+<span class="number">1</span>)</div><div class="line">    sns.countplot(cols[i], data=data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Let's try do some predict by training the data</span></div><div class="line"><span class="comment"># Try to transform str value to numeric value</span></div><div class="line"><span class="comment"># We'll use the method as fellow to do this job</span></div><div class="line">le = preprocessing.LabelEncoder()</div><div class="line">le.fit(data[<span class="string">'Occupation'</span>].unique())</div><div class="line">print(le.classes_)</div><div class="line">le.transform(data[<span class="string">'Occupation'</span>])</div><div class="line"></div><div class="line"></div><div class="line">numcols = [<span class="string">'Age'</span>, <span class="string">'Income'</span>, <span class="string">'WTS'</span>]</div><div class="line">strcols = [<span class="string">'Gender'</span>, <span class="string">'Occupation'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>, <span class="string">'Stratum'</span>, <span class="string">'Lifestyle'</span>,<span class="string">'Occasions'</span>,<span class="string">'Freq'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># numcols</span></div><div class="line"></div><div class="line"><span class="comment"># Classify the age</span></div><div class="line">Cdata = data.copy()</div><div class="line"></div><div class="line">Simplage = Cdata[<span class="string">'Age'</span>]</div><div class="line">fig.add_subplot(<span class="number">311</span>)</div><div class="line">sns.boxplot(Simplage)</div><div class="line">Simplage[Simplage &lt; <span class="number">18</span>] = <span class="number">0</span></div><div class="line">Simplage[(Simplage &gt;= <span class="number">18</span>) &amp; (Simplage &lt;<span class="number">23</span>)] = <span class="number">1</span></div><div class="line">Simplage[Simplage &gt;= <span class="number">23</span>] = <span class="number">2</span></div><div class="line">print(Simplage.head())</div><div class="line"></div><div class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">24</span>))</div><div class="line"><span class="comment"># Income</span></div><div class="line">Incomedata = Cdata[<span class="string">'Income'</span>]</div><div class="line"><span class="comment"># Many people are student with no income, so we use o to fill the missing value</span></div><div class="line">Simplincome = Incomedata.fillna(<span class="number">0.0</span>)</div><div class="line"><span class="comment">#print('==============\n', Simplincome.notnull().sum())</span></div><div class="line">print(Simplincome.describe())</div><div class="line">fig.add_subplot(<span class="number">312</span>)</div><div class="line">sns.boxplot(Simplincome)</div><div class="line">Simplincome[Simplincome &lt;= <span class="number">2000</span>] = <span class="number">0</span></div><div class="line">Simplincome[(<span class="number">2000</span> &lt; Simplincome) &amp; (Simplincome &lt;= <span class="number">4000</span>)] = <span class="number">1</span></div><div class="line">Simplincome[(<span class="number">4000</span> &lt; Simplincome) &amp; (Simplincome &lt;= <span class="number">6000</span>)] = <span class="number">2</span></div><div class="line">Simplincome[Simplincome &gt; <span class="number">8000</span>] = <span class="number">3</span></div><div class="line">print(Simplincome.head())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Classify the WTS</span></div><div class="line">Simplwts = Cdata[<span class="string">'WTS'</span>]</div><div class="line"><span class="comment">#print(Simplwts.notnull().sum())</span></div><div class="line"><span class="comment"># fill these missing values</span></div><div class="line">fig.add_subplot(<span class="number">313</span>)</div><div class="line">sns.boxplot(<span class="string">'WTS'</span>, data=Cdata)</div><div class="line"></div><div class="line">Simplwts = Simplwts.fillna(<span class="number">5000</span>)</div><div class="line"><span class="comment">#print(Simplwts.notnull().sum())</span></div><div class="line"><span class="comment">#print(Simplwts.describe())</span></div><div class="line"><span class="comment"># Classify</span></div><div class="line">Simplwts[Simplwts &lt;= <span class="number">2000</span>] = <span class="number">0</span></div><div class="line">Simplwts[(<span class="number">2000</span> &lt; Simplwts) &amp; (Simplwts &lt;= <span class="number">4000</span>)] = <span class="number">1</span></div><div class="line">Simplwts[(<span class="number">4000</span> &lt; Simplwts) &amp; (Simplwts &lt;= <span class="number">6000</span>)] = <span class="number">2</span></div><div class="line">Simplwts[Simplwts &gt; <span class="number">8000</span>] = <span class="number">3</span></div><div class="line"><span class="comment">#print(Simplwts.head())</span></div><div class="line"></div><div class="line">newdata = pd.concat([Simplage, Simplincome, Simplwts], axis=<span class="number">1</span>)</div><div class="line">print(newdata.head())</div><div class="line">print(newdata.notnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># str cols</span></div><div class="line">print(Cdata.notnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># fillna and label them</span></div><div class="line">ontodict = &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettrans</span><span class="params">(colname)</span>:</span></div><div class="line">    coldata = Cdata[colname]</div><div class="line">    coldata = coldata.fillna(coldata.mode()[<span class="number">0</span>])  <span class="comment"># the [0] looks like indispensable</span></div><div class="line">    le = preprocessing.LabelEncoder()</div><div class="line">    le.fit(coldata.unique())</div><div class="line">    <span class="comment">#print(colname, '--&gt;', le.classes_)</span></div><div class="line">    ontodict[colname] = le.classes_</div><div class="line">    newcoldata = le.transform(coldata)</div><div class="line">    newdata[colname] = newcoldata</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> colname <span class="keyword">in</span> strcols:</div><div class="line">    gettrans(colname)</div><div class="line"></div><div class="line">print(newdata.head())</div><div class="line">print(newdata.notnull().sum())</div><div class="line">print(ontodict)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Let's make Freq as the value that can be predicted by other values</span></div><div class="line">x = newdata[[<span class="string">'Age'</span>, <span class="string">'Income'</span>, <span class="string">'WTS'</span>, <span class="string">'Gender'</span>, <span class="string">'Occupation'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>,</div><div class="line">       <span class="string">'Stratum'</span>,<span class="string">'Lifestyle'</span>, <span class="string">'Occasions'</span>]]</div><div class="line">y = newdata[<span class="string">'Freq'</span>]</div><div class="line"></div><div class="line"><span class="comment"># split into train and test sets</span></div><div class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>)</div><div class="line"><span class="comment"># take a look at the shape of each of these</span></div><div class="line">print(x_train.shape)</div><div class="line">print(y_train.shape)</div><div class="line">print(x_test.shape)</div><div class="line">print(y_test.shape)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># predict</span></div><div class="line"></div><div class="line"><span class="comment"># Logistic Regression</span></div><div class="line">logreg = LogisticRegression()</div><div class="line">logreg.fit(x_train, y_train)</div><div class="line">Y_pred = logreg.predict(x_test)</div><div class="line">logreg.score(x_train, y_train)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># knn</span></div><div class="line">knn = KNeighborsClassifier(n_neighbors = <span class="number">3</span>)</div><div class="line">knn.fit(x_train, y_train)</div><div class="line">Y_pred = knn.predict(x_test)</div><div class="line">knn.score(x_train, y_train)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># SVM</span></div><div class="line">svc = SVC()</div><div class="line">svc.fit(x_train, y_train)</div><div class="line">Y_pred = svc.predict(x_test)</div><div class="line">svc.score(x_train, y_train)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Random Forests</span></div><div class="line">random_forest = RandomForestClassifier(n_estimators=<span class="number">50</span>)</div><div class="line">random_forest.fit(x_train, y_train)</div><div class="line">Y_pred = random_forest.predict(x_test)</div><div class="line"></div><div class="line"></div><div class="line">random_forest.score(x_train, y_train)</div><div class="line">random_forest.score(x_test, y_test)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法竞赛入门经典[紫书]习题笔记(第三章)]]></title>
      <url>/2017/03/16/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8-%E7%B4%AB%E4%B9%A6-%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>紫书第三章习题代码及笔记。主要是想练习下c++的使用，有错误欢迎指出，有可以改进的地方请不吝赐教，多加交流。</p>
<h5 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//题目1--统计个数[不用数组]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;  <span class="comment">// count用于计数</span></div><div class="line">    <span class="keyword">float</span> num;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;num) == <span class="number">1</span>) &#123;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Nums: %d\n"</span>, count);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//题目1--求最大值，最小值，均值[不用数组]</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int  count = 0;</div><div class="line">    float num, sum=0, min_x, max_x;</div><div class="line">    while ( scanf("%f", &amp;num) == 1)&#123;</div><div class="line">        if(count == 0)&#123;min_x = max_x = num;&#125;</div><div class="line">        if(num &gt; max_x) max_x = num;</div><div class="line">        if(num &lt; min_x) min_x = num;</div><div class="line">        sum += num;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    printf("Max:%f Min:%f Ave:%f\n", max_x, min_x, sum/count);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">// 题目1--哪两个数最接近[数组]</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int nums[maxn];</div><div class="line">int main()&#123;</div><div class="line">    int num, n = 0;</div><div class="line">    while (scanf("%d", &amp;num) == 1) &#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    int min_d = std::abs(nums[0]-nums[1]);</div><div class="line">    for(int i=0;i&lt;n;i++)</div><div class="line">        for(int j=0;j&lt;n;j++)&#123;</div><div class="line">            if(j != i)&#123;</div><div class="line">                if(std::abs(nums[i]-nums[j]) &lt; min_d) min_d = std::abs(nums[i]-nums[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    printf("%d\n", min_d);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--第二大的数[数组]</span></div><div class="line"><span class="comment">//思路一：先获取数组最大值，在获取去除最大值后的数组，在求最大值</span></div><div class="line"><span class="comment">// 获取数组的最大值</span></div><div class="line"><span class="comment">/*</span></div><div class="line">float getmax(float arr[], int n);</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    float num, nums[maxn];</div><div class="line">    int n=0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1)&#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    float max_x = getmax(nums, n);</div><div class="line"></div><div class="line">    float newnums[maxn];</div><div class="line">    int newn = 0;</div><div class="line">    for(int i=0;i&lt;n;i++)&#123;</div><div class="line">        if(nums[i] != max_x) &#123;</div><div class="line">            newnums[newn] = nums[i];</div><div class="line">            newn++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    float sec_max_x = getmax(newnums, newn);</div><div class="line">    printf("%f\n", sec_max_x);</div><div class="line">&#125;</div><div class="line"></div><div class="line">float getmax(float arr[], int n)&#123;</div><div class="line">    float max_x_arr = arr[0];</div><div class="line">    for(int i=1;i&lt;n;i++)&#123;</div><div class="line">        if(arr[i] &gt; max_x_arr) max_x_arr = arr[i];</div><div class="line">    &#125;</div><div class="line">    return max_x_arr;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--第二大的数[数组]</span></div><div class="line"><span class="comment">// 思路二：冒泡排序</span></div><div class="line"><span class="comment">/*</span></div><div class="line">void bubblesort(float A[], int n)&#123;</div><div class="line">    bool sorted = false;  // 整体排序标志，首先假定尚未进行排序</div><div class="line">    while(!sorted)&#123;  //在尚未确认已经全局排序之前，逐趟进行扫描交换</div><div class="line">        sorted = true;  // 假定已经排序</div><div class="line">        for (int i =1; i &lt; n; i++ )&#123;</div><div class="line">            if (A[i - 1] &gt; A[i])&#123; // 一旦A[i-1]与A[i]逆序，则</div><div class="line">                std::swap( A[i-1], A[i]); // 交换之</div><div class="line">                sorted = false;// 因整体排序不能保证，需要清除排序标志</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    n--;  // 至此末位元素必然就位， 故可以缩短排序序列的有效长度。</div><div class="line">&#125;// 借助布尔值标志位sorted, 可以及时提前退出，而不至于总是忙里地做n-1次扫描</div><div class="line"></div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    float num, nums[maxn];</div><div class="line">    int n = 0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1) &#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    bubblesort(nums, n);</div><div class="line">    printf("%f\n", nums[n-2]);</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--方差[数组]</span></div><div class="line"></div><div class="line"><span class="comment">//计算数组方差</span></div><div class="line"><span class="comment">/*</span></div><div class="line">float getvar(float arr[], int n);</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    float num, nums[maxn];</div><div class="line">    int n = 0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1) &#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    float var = getvar(nums, n);</div><div class="line">    printf("%f\n", var);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">float getvar(float arr[], int n)&#123;</div><div class="line">    float sum = 0;</div><div class="line">    for(int i=0;i&lt;n;i++)</div><div class="line">        sum += arr[i];</div><div class="line">    float ave = sum/n;</div><div class="line">    float p_var;</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        p_var += (arr[i]-ave)*(arr[i]-ave);</div><div class="line">    &#125;</div><div class="line">    float var = p_var/(n-1);</div><div class="line">    return var;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--不超过平均数的数字个数[数组]</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main() &#123;</div><div class="line">    float num, nums[maxn], sum=0;</div><div class="line">    int n = 0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1) &#123;</div><div class="line">        sum += num;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    float ave = sum/n;</div><div class="line">    int nx = 0;</div><div class="line">    for(int i=0;i&lt;n;i++)&#123;</div><div class="line">        if(nums[i] &lt;= ave) nx += 1;</div><div class="line">    &#125;</div><div class="line">    printf("%d\n", nx);</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="OJ练习"><a href="#OJ练习" class="headerlink" title="OJ练习"></a>OJ练习</h5><ul>
<li>[ ] UVa 1585<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 85</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'O'</span>)&#123;</div><div class="line">                count += <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=(i<span class="number">-1</span>);j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">                    <span class="keyword">if</span>(s[j] == <span class="string">'X'</span>) <span class="keyword">break</span>;</div><div class="line">                    count += <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sum += count;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>[ ] UVa 1586<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 85</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">char</span> const_s[] = <span class="string">"CHON"</span>;</div><div class="line">    <span class="keyword">float</span> const_num[<span class="number">4</span>] = &#123;<span class="number">12.01</span>, <span class="number">1.008</span>, <span class="number">16.00</span>, <span class="number">14.01</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">float</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">char</span> s[maxn];</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(s[j])) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;<span class="number">4</span>; m++)</div><div class="line">                <span class="keyword">if</span>(s[j] == const_s[m])&#123;</div><div class="line">                    sum += const_num[m];</div><div class="line">                    <span class="keyword">if</span>((j+<span class="number">1</span>)&lt; len &amp;&amp; !<span class="built_in">isalpha</span>(s[j+<span class="number">1</span>]))&#123;</div><div class="line">                        <span class="keyword">if</span>((j+<span class="number">2</span>)&lt; len &amp;&amp; !<span class="built_in">isalpha</span>(s[j+<span class="number">2</span>])) sum += const_num[m]*((<span class="keyword">int</span>(s[j+<span class="number">1</span>])<span class="number">-48</span>)*<span class="number">10</span>+<span class="keyword">int</span>(s[j+<span class="number">2</span>])<span class="number">-48</span><span class="number">-1</span>);</div><div class="line">                        <span class="keyword">else</span> sum += const_num[m]*(<span class="keyword">int</span>(s[j+<span class="number">1</span>])<span class="number">-48</span><span class="number">-1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>, sum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>[ ] UVa 1225<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// sprintf is the key to solve the problem.</span></div><div class="line"><span class="comment">/*</span></div><div class="line"># define maxn 10005</div><div class="line">int main() &#123;</div><div class="line">    int n;</div><div class="line">    scanf("%d", &amp;n);</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        int nums[10], nx;</div><div class="line"></div><div class="line">        memset(nums, 0, sizeof(nums));</div><div class="line">        scanf("%d", &amp;nx);</div><div class="line">        char strnum[maxn];</div><div class="line">        for (int j = 1; j &lt;=nx; j++) &#123;</div><div class="line">            sprintf(strnum, "%d", j);</div><div class="line">            for (int k = 0; k &lt; strlen(strnum); k++) &#123;</div><div class="line">                for (int l = 0; l &lt;= 9; l++) &#123;</div><div class="line">                    if((int(strnum[k])-48) == l) nums[l] += 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int m = 0; m &lt; 9; m++) &#123;</div><div class="line">            printf("%d ", nums[m]);</div><div class="line">        &#125;</div><div class="line">        printf("%d\n", nums[9]);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>[ ] UVa 455<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 85</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> times;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;times);</div><div class="line">    <span class="keyword">while</span> (times--)&#123;</div><div class="line">        <span class="keyword">char</span> s[maxn];</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> length = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt; length+<span class="number">1</span>; T++) &#123;  <span class="comment">// 这里最大周期可以是它本身的！！</span></div><div class="line">            <span class="keyword">int</span> isans = <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> T_nums;</div><div class="line">            <span class="keyword">if</span>(length%T == <span class="number">0</span>) &#123;</div><div class="line">                T_nums = length/T;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; T_nums; j++) &#123;</div><div class="line">                            <span class="keyword">if</span>(s[i] != s[(i+T*j)])&#123;isans = <span class="number">0</span>;<span class="keyword">break</span>;&#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> isans=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(isans)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(times)<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法竞赛入门经典[紫书]习题笔记(第二章)]]></title>
      <url>/2017/03/13/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8-%E7%B4%AB%E4%B9%A6-%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>紫书第二章习题代码及笔记。主要是想练习下c++的使用，这里纯粹作为记录，有错误欢迎指出，多加交流。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 水仙花</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>; i&lt;=<span class="number">999</span>;i++)&#123;</div><div class="line">        a = i / <span class="number">100</span>;</div><div class="line">        b = (i % <span class="number">100</span>)/<span class="number">10</span>;</div><div class="line">        c = (i % <span class="number">100</span>)%<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>((<span class="built_in">pow</span>(a,<span class="number">3</span>)+<span class="built_in">pow</span>(b,<span class="number">3</span>)+<span class="built_in">pow</span>(c,<span class="number">3</span>)) == i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 韩信点兵</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int a, b, c, n=1;</div><div class="line">    while(scanf("%d %d %d", &amp;a, &amp;b, &amp;c) == 3)&#123;</div><div class="line">        int get = 0;</div><div class="line">        for(int i=10;i&lt;=100; i++ )&#123;</div><div class="line">            if((i%3==a)&amp;&amp;(i%5==b)&amp;&amp;(i%7==c))</div><div class="line">            &#123;</div><div class="line">                get = 1;</div><div class="line">                printf("Case %d: %d\n", n, i);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">        if(get == 0) printf("Case %d: %s\n", n, "No answer");</div><div class="line">    n++;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">// 倒三角形</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int n;</div><div class="line">    scanf("%d", &amp;n);</div><div class="line">    int a=n, b=0;  // a控制#的数量， 把控制前后空格的数量</div><div class="line">    do&#123;</div><div class="line">        for(int j=1;j&lt;=b; j++)</div><div class="line">            printf("%s", " ");</div><div class="line">        for(int i=1; i&lt;=2*a-1;i++ )</div><div class="line">        &#123;</div><div class="line">            printf("%s", "#");</div><div class="line">        &#125;</div><div class="line">        for(int j=1;j&lt;=b; j++)</div><div class="line">            printf("%s", " ");</div><div class="line"></div><div class="line">        a -= 1;</div><div class="line">        b++;</div><div class="line"></div><div class="line">        printf("\n");</div><div class="line"></div><div class="line"></div><div class="line">    &#125;while ((a&gt;=1)&amp;&amp;(a&lt;=20));</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 子序列的和</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int n, m, num=0;</div><div class="line">    while ((scanf("%d %d", &amp;n, &amp;m) == 2)&amp;&amp;m&amp;&amp;n)&#123;</div><div class="line">        num += 1;</div><div class="line">        float r=0.0;</div><div class="line">        for(float i=n; i&lt;=m; i++)&#123;</div><div class="line">            r += 1 / (i*i);</div><div class="line">        &#125;</div><div class="line">        printf("Case %d: %.5f\n", num, r);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">// 分数化小数</span></div><div class="line"><span class="comment">// 偷懒~</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int a, b ,c;</div><div class="line">    while (scanf("%d %d %d", &amp;a, &amp;b, &amp;c))&#123;</div><div class="line">        float r;</div><div class="line">        r = a/((float) b);</div><div class="line">        std::cout&lt;&lt;std::setprecision(c)&lt;&lt;std::fixed&lt;&lt;r&lt;&lt;"\n";</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 排列</span></div><div class="line"><span class="comment">// 不会...</span></div><div class="line"></div><div class="line"><span class="comment">//思考题2</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    double i;</div><div class="line">//    freopen("output.txt", "w", stdout);</div><div class="line">    for(i=0; i != 10; i += 0.1)&#123;</div><div class="line">        printf("%.1f\n", i);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div></pre></td></tr></table></figure>
<p>最后的思考题，原因在与10.0属于float, 不等于10[int]，所以会一直输出打印的内容，但开始并未出现0.1,0.2,…等的递增的情况，debug发现没有问题，最后发现原因是输出太多内容，将上面的内容掩盖，通过写入文件后再查看，发现打印还是正常的。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu16.04LTS下安装Hadoop2.7.3]]></title>
      <url>/2017/03/08/Ubuntu16-04LTS%E4%B8%8B%E5%AE%89%E8%A3%85Hadoop2-7-3/</url>
      <content type="html"><![CDATA[<p>撸码间隙，突然看到Hadoop，久闻其名，但是还没研究过，于是动手装了下。<br>主要就是参考<a href="https://www.digitalocean.com/community/tutorials/how-to-install-hadoop-in-stand-alone-mode-on-ubuntu-16-04" target="_blank" rel="external">digitalocean</a>的这篇教程，写的十分详细，这里不再赘述。要注意的一点就是在<em>Step 3 — Configuring Hadoop’s Java Home</em>这里，按照教程上的方法找到JAVA的路径再设置，两种方法均可以运行Hadoop，但是在后面运行MapReduce时却总是报错：</p>
<blockquote>
<p>/usr/local/hadoop/bin/hadoop: line 166: /usr/bin/java: No such file or directory</p>
</blockquote>
<p>好象是JAVA的路径不对，之前设置的是</p>
<blockquote>
<p>export JAVA_HOME=/usr/</p>
</blockquote>
<p>就重新找到JAVA的安装路径，设置为</p>
<blockquote>
<p>export JAVA_HOME=/usr/jdk-8/jre/</p>
</blockquote>
<p>然后就可以了。<br>装好了，之后忙完这阵，就先学个入门: - )</p>
]]></content>
      
        <categories>
            
            <category> Hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Numpy日常积累]]></title>
      <url>/2017/03/06/Numpy%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>阅读书籍 <em>NumPy Beginner’s Guide [Second Edition]</em>，一些关于使用Numpy的笔记。</p>
<h5 id="1-ravel-and-flatten"><a href="#1-ravel-and-flatten" class="headerlink" title="1. ravel and flatten"></a>1. ravel and flatten</h5><blockquote>
<p>参考<a href="http://stackoverflow.com/questions/28930465/what-is-the-difference-between-flatten-and-ravel-functions-in-numpy" target="_blank" rel="external">这里</a></p>
<p>The difference is that flatten always returns a copy and ravel returns a view of the original array whenever possible. This isn’t visible in the printed output, but if you modify the array returned by ravel, it may modify the entries in the original array. If you modify the entries in an array returned from flatten this will never happen. ravel will often be faster since no memory is copied, but you have to be more careful about modifying the array it returns.</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/numpy/3.png" alt=""></p>
<h5 id="2-reshape-and-resize"><a href="#2-reshape-and-resize" class="headerlink" title="2. reshape and resize"></a>2. reshape and resize</h5><blockquote>
<p>The resize method works just like the reshape method, but modifies the<br>array it operates on</p>
<p>即，resize改变操作的对象，而reshape不改变。</p>
</blockquote>
<h5 id="3-Dates"><a href="#3-Dates" class="headerlink" title="3. Dates"></a>3. Dates</h5><p>关于np.loadtxt函数导入日期的问题。</p>
<h6 id="3-1-converters"><a href="#3-1-converters" class="headerlink" title="3.1 converters"></a>3.1 converters</h6><blockquote>
<p>converters : dict, optional<br>A dictionary mapping column number to a function that will convert<br>that column to a float.  E.g., if column 0 is a date string:<br><code>converters = {0: datestr2num}</code>.  Converters can also be used to<br>provide a default value for missing data (but see also <code>genfromtxt</code>):<br><code>converters = {3: lambda s: float(s.strip() or 0)}</code>.  Default: None.</p>
</blockquote>
<h6 id="3-2-binary-to-str"><a href="#3-2-binary-to-str" class="headerlink" title="3.2 binary to str"></a>3.2 binary to str</h6><p>首先，我们运行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dates, close=np.loadtxt(<span class="string">'data.csv'</span>, delimiter=<span class="string">','</span>, usecols=(<span class="number">1</span>,<span class="number">6</span>), unpack=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>结果报错：</p>
<blockquote>
<p><strong>ValueError: could not convert string to float: b’28-01-2011’</strong></p>
</blockquote>
<p>于是我们编写指定日期格式的函数，再次导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">datestr2num</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> datetime.strptime(s, <span class="string">"%d-%m-%Y"</span>).date().weekday()</div><div class="line">    </div><div class="line">dates, close=np.loadtxt(<span class="string">'data.csv'</span>, delimiter=<span class="string">','</span>, usecols=(<span class="number">1</span>,<span class="number">6</span>),</div><div class="line">converters=&#123;<span class="number">1</span>: datestr2num&#125;, unpack=<span class="keyword">True</span>)</div><div class="line"></div></pre></td></tr></table></figure><br>还是报错：</p>
<blockquote>
<p><strong>TypeError: strptime() argument 1 must be str, not bytes</strong></p>
</blockquote>
<p>这次是因为日期列是二进制的格式，而我们的strptime要求参数是字符型。<br>修改datestr2num函数即可。继续运行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">datestr2num</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> datetime.strptime(s.decode(<span class="string">'ascii'</span>), <span class="string">"%d-%m-%Y"</span>).date().weekday()</div><div class="line">    </div><div class="line">dates, close=np.loadtxt(<span class="string">'data.csv'</span>, delimiter=<span class="string">','</span>, usecols=(<span class="number">1</span>,<span class="number">6</span>),</div><div class="line">converters=&#123;<span class="number">1</span>: datestr2num&#125;, unpack=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>这次OK了!</p>
<p>参考：<em>NumPy Beginner’s Guide [Second Edition] </em>，<a href="http://stackoverflow.com/questions/21117311/time-strptime-argument-0-must-be-str-not-bytes" target="_blank" rel="external">stackoverflow</a></p>
<h5 id="4-argmax-amp-argmin"><a href="#4-argmax-amp-argmin" class="headerlink" title="4. argmax &amp; argmin"></a>4. argmax &amp; argmin</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/numpy/4.png" alt=""></p>
<p>也就是说，在使用argmax[argmin]时，我们一定注意数组中没有nan,否则我们将会得到错误的结果而找不出原因。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python日常积累]]></title>
      <url>/2017/03/06/Python%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<h5 id="1-copy-amp-deepcopy"><a href="#1-copy-amp-deepcopy" class="headerlink" title="1.copy &amp; deepcopy"></a>1.copy &amp; deepcopy</h5><p>参考<a href="http://www.cnblogs.com/Richardzhu/p/4723750.html" target="_blank" rel="external">这里</a><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/copy.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The Speed of Numpy]]></title>
      <url>/2017/03/06/The-Speed-of-Numpy/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>实现算法时，越发觉得，Numpy对效率的影响特别大，所以再次学习。<br>这里主要是进行数组运算速度的对比，对原文代码稍加改进，更直观地看到速度上的差别。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env/python3</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">numpysum</span><span class="params">(n)</span>:</span></div><div class="line">    a = np.arange(n)**<span class="number">2</span></div><div class="line">    b = np.arange(n)**<span class="number">3</span></div><div class="line">    c  =a + b</div><div class="line">    <span class="keyword">return</span> c</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pythonsum</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment"># 这里由于源码为Python2的，range的用法可能有变</span></div><div class="line">    <span class="comment"># 直接运行报错TypeError: 'range' object does not support item assignment</span></div><div class="line">    <span class="comment"># 故转化为列表</span></div><div class="line">    a = list(range(n))</div><div class="line">    b = list(range(n))</div><div class="line">    c = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">        a[i] = i ** <span class="number">2</span></div><div class="line">        b[i] = i ** <span class="number">3</span></div><div class="line">        c.append(a[i] + b[i])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> c</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># prt表示是否打印结果</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printest</span><span class="params">(func, size, prt=True)</span>:</span></div><div class="line">    start = datetime.now()</div><div class="line">    c = func(size)</div><div class="line">    delta = datetime.now() - start</div><div class="line">    <span class="keyword">if</span> prt==<span class="keyword">True</span>:</div><div class="line">        print(<span class="string">"The last 2 elements of the sum "</span>, c[<span class="number">-2</span>:])</div><div class="line">        print(<span class="string">'Elapsed time in microsecondas '</span>, delta.microseconds)</div><div class="line">    <span class="keyword">return</span> delta.microseconds</div><div class="line"></div><div class="line"><span class="comment"># 用于作n-time图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeplot</span><span class="params">()</span>:</span></div><div class="line">    pts = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">10000</span>, <span class="number">100</span>):</div><div class="line">        t_numpy = printest(numpysum, i, prt=<span class="keyword">False</span>)</div><div class="line">        t_python = printest(pythonsum, i, prt=<span class="keyword">False</span>)</div><div class="line">        pts.append([t_numpy, t_python])</div><div class="line">    plt.plot(pts)</div><div class="line">    plt.legend([<span class="string">'Numpy'</span>, <span class="string">'Python'</span>])</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    size = int(sys.argv[<span class="number">1</span>])</div><div class="line">    print(<span class="string">'Numpysum...'</span>)</div><div class="line">    printest(numpysum, size)</div><div class="line">    print(<span class="string">'Pythonsum...'</span>)</div><div class="line">    printest(pythonsum, size)</div><div class="line">    timeplot()</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>运行：</p>
<blockquote>
<p>python Speed.py 10000</p>
</blockquote>
<p>输出：<br>&gt;<br>Numpysum…<br>The last 2 elements of the sum  [999500079996 999800010000]<br>Elapsed time in microsecondas  1299<br>Pythonsum…<br>The last 2 elements of the sum  [999500079996, 999800010000]<br>Elapsed time in microsecondas  18202</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/numpy/2.png" alt=""></p>
<p>可以看到，相比pure python， Numpy在大规模的运算上具有极高的效率。</p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>关于做图的补充：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">l = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>]]</div><div class="line">plt.plot(l); plt.legend([<span class="string">'a'</span>, <span class="string">'b'</span>])</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure><br>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/numpy/1.png" alt=""></p>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><em>NumPy Beginner’s Guide [Second Edition]</em> <em>Page19</em></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cin and cin.getline]]></title>
      <url>/2017/03/06/cin-and-cin-getline/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>关于cin与cin.getline在使用时要注意的地方，关键在于”newline”的处理。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>我们先来看一个例子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What year was your house biult?\n"</span>;</div><div class="line">        <span class="keyword">int</span> year;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;year;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What is its streer address?\n"</span>;</div><div class="line">        <span class="keyword">char</span> address[<span class="number">80</span>];</div><div class="line">        <span class="built_in">cin</span>.getline(address, <span class="number">80</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">"Year built: "</span>&lt;&lt;year&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Address: "</span>&lt;&lt;address&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Done!\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出:</p>
<blockquote>
<p>What year was your house biult?<br>2017<br>What is its streer address?<br>Year built: 2017<br>Address:<br>Done!</p>
</blockquote>
<p>可以看到，还没输入地址，就打印并结束了程序。<br>原因:</p>
<blockquote>
<p>The problem is that when cin reads the year, it leaves the newline generated by the Enter key in the input queue. Then, cin.getline() reads the newline as an empty line and assigns a null string to the address array.</p>
</blockquote>
<p>解决办法：</p>
<blockquote>
<p>The fix is to read and discard the newline before reading the address.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What year was your house biult?\n"</span>;</div><div class="line">        <span class="keyword">int</span> year;</div><div class="line"></div><div class="line">        <span class="comment">// 这里使用get将作为cin结束的newline清除即可</span></div><div class="line">        <span class="comment">//(cin&gt;&gt;year).get();</span></div><div class="line">        <span class="built_in">cin</span>&gt;&gt;year;</div><div class="line">        <span class="built_in">cin</span>.get();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What is its streer address?\n"</span>;</div><div class="line">        <span class="keyword">char</span> address[<span class="number">80</span>];</div><div class="line">        <span class="built_in">cin</span>.getline(address, <span class="number">80</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">"Year built: "</span>&lt;&lt;year&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Address: "</span>&lt;&lt;address&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Done!\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>What year was your house biult?<br>1998<br>What is its streer address?<br>earth<br>Year built: 1998<br>Address: earth<br>Done!</p>
</blockquote>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><em>C++ Primer Plus(5th Edition)</em>   Page147</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Classifying News Headlines with scikit-learn]]></title>
      <url>/2017/03/05/Classifying-News-Headlines-with-scikit-learn/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p>Kaggle案例学习，练习使用sklearn进行新闻的分类，主要使用了朴素贝叶斯进行分类。</p>
<h5 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h5><blockquote>
<p>学习使用正则来清洗数据<br>掌握sklearn准备训练集和测试集的方法[LabelEncoder， train_test_split等的使用]<br>学习使用sklearn调用朴素贝叶斯算法进行分类预测</p>
</blockquote>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># get some libraries that will be useful</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># linear algebra</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span></div><div class="line"></div><div class="line"><span class="comment"># the Naive Bayes model</span></div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</div><div class="line"><span class="comment"># function to split the data for cross-validation</span></div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="comment"># function for transforming documents into counts</span></div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</div><div class="line"><span class="comment"># function for encoding categories</span></div><div class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># grab the data</span></div><div class="line">news = pd.read_csv(<span class="string">"uci-news-aggregator.csv"</span>)</div><div class="line"></div><div class="line"><span class="comment"># let's take a look at our data</span></div><div class="line">print(news.head())</div><div class="line"></div><div class="line"><span class="comment"># 对新闻标题的处理</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_text</span><span class="params">(s)</span>:</span></div><div class="line">    s = s.lower()</div><div class="line"></div><div class="line">    <span class="comment"># remove punctuation that is not word-internal (e.g., hyphens, apostrophes)</span></div><div class="line">    s = re.sub(<span class="string">'\s\W'</span>, <span class="string">' '</span>, s)</div><div class="line">    s = re.sub(<span class="string">'\W\s'</span>, <span class="string">' '</span>, s)</div><div class="line"></div><div class="line">    <span class="comment"># make sure we didn't introduce any double spaces</span></div><div class="line">    s = re.sub(<span class="string">'\s+'</span>, <span class="string">' '</span>, s)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line"></div><div class="line">news[<span class="string">'TEXT'</span>] = [normalize_text(s) <span class="keyword">for</span> s <span class="keyword">in</span> news[<span class="string">'TITLE'</span>]]</div><div class="line">print(news[<span class="string">'TITLE'</span>].head())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 准备训练集和测试集</span></div><div class="line"><span class="comment"># pull the data into vectors</span></div><div class="line">vectorizer = CountVectorizer()</div><div class="line">x = vectorizer.fit_transform(news[<span class="string">'TEXT'</span>])</div><div class="line"></div><div class="line">encoder = LabelEncoder()</div><div class="line">y = encoder.fit_transform(news[<span class="string">'CATEGORY'</span>])</div><div class="line"></div><div class="line"><span class="comment"># split into train and test sets</span></div><div class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>)</div><div class="line"></div><div class="line"><span class="comment"># take a look at the shape of each of these</span></div><div class="line">print(x_train.shape)</div><div class="line">print(y_train.shape)</div><div class="line">print(x_test.shape)</div><div class="line">print(y_test.shape)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 开始预测</span></div><div class="line">nb = MultinomialNB()</div><div class="line">nb.fit(x_train, y_train)</div><div class="line">print(nb.score(x_test, y_test))</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>关于正则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in</div><div class="line">         bytes patterns or string patterns with the ASCII flag.</div><div class="line">         In string patterns without the ASCII flag, it will match the whole</div><div class="line">         range of Unicode whitespace characters.</div><div class="line">\S       Matches any non-whitespace character; equivalent to [^\s].</div><div class="line">\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]</div><div class="line">         in bytes patterns or string patterns with the ASCII flag.</div><div class="line">         In string patterns without the ASCII flag, it will match the</div><div class="line">         range of Unicode alphanumeric characters (letters plus digits</div><div class="line">         plus underscore).</div><div class="line">         With LOCALE, it will match the set [0-9_] plus characters defined</div><div class="line">         as letters for the current locale.</div><div class="line">\W       Matches the complement of \w.</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>关于LabelEncoder:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class LabelEncoder(sklearn.base.BaseEstimator, sklearn.base.TransformerMixin)</div><div class="line">|  Encode labels with value between 0 and n_classes-1.</div><div class="line">|</div><div class="line">|  Read more in the :ref:`User Guide &lt;preprocessing_targets&gt;`.</div><div class="line">|</div><div class="line">|  Attributes</div><div class="line">|  ----------</div><div class="line">|  classes_ : array of shape (n_class,)</div><div class="line">|      Holds the label for each class.</div><div class="line">|</div><div class="line">|  Examples</div><div class="line">|  --------</div><div class="line">|  `LabelEncoder` can be used to normalize labels.</div><div class="line">|  &gt;&gt;&gt; from sklearn import preprocessing</div><div class="line">|  &gt;&gt;&gt; le = preprocessing.LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; le.fit([1, 2, 2, 6])</div><div class="line">|  LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; le.classes_</div><div class="line">|  array([1, 2, 6])</div><div class="line">|  &gt;&gt;&gt; le.transform([1, 1, 2, 6]) #doctest: +ELLIPSIS</div><div class="line">|  array([0, 0, 1, 2]...)</div><div class="line">|  &gt;&gt;&gt; le.inverse_transform([0, 0, 1, 2])</div><div class="line">|  array([1, 1, 2, 6])</div><div class="line">|</div><div class="line">|  It can also be used to transform non-numerical labels (as long as they are</div><div class="line">|  hashable and comparable) to numerical labels.</div><div class="line">|</div><div class="line">|  &gt;&gt;&gt; le = preprocessing.LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; le.fit([&quot;paris&quot;, &quot;paris&quot;, &quot;tokyo&quot;, &quot;amsterdam&quot;])</div><div class="line">|  LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; list(le.classes_)</div><div class="line">|  [&apos;amsterdam&apos;, &apos;paris&apos;, &apos;tokyo&apos;]</div><div class="line">|  &gt;&gt;&gt; le.transform([&quot;tokyo&quot;, &quot;tokyo&quot;, &quot;paris&quot;]) #doctest: +ELLIPSIS</div><div class="line">|  array([2, 2, 1]...)</div><div class="line">|  &gt;&gt;&gt; list(le.inverse_transform([2, 2, 1]))</div><div class="line">|  [&apos;tokyo&apos;, &apos;tokyo&apos;, &apos;paris&apos;]</div><div class="line"></div></pre></td></tr></table></figure></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.kaggle.com/shenxiangzhuang/d/uciml/news-aggregator-dataset/classifying-news-headlines-with-scikit-learn/editnb" target="_blank" rel="external"><em>Classifying News Headlines with scikit-learn</em></a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最大似然估计与经验风险最小化]]></title>
      <url>/2017/03/03/%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E4%B8%8E%E7%BB%8F%E9%AA%8C%E9%A3%8E%E9%99%A9%E6%9C%80%E5%B0%8F%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第一章笔记——经验风险最小化推导极大似然估计</p>
<p>题目：当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计</p>
<p>1.1预备知识——统计学习三要素</p>
<p>模型的假设空间，模型选择的标准以及模型学习的算法是统计学习方法的三要素。</p>
<p>简记为： 方法 = 模型+策略+算法</p>
<p>1.2.预备知识——损失函数</p>
<p>在模型的假设空间，我们要确定一定的准则来确定模型的好坏，即我们需要确定一定的策略[三要素之一]去衡量，所以我们引入了损失函数[loss function]或代价函数[cost function].</p>
<p>损失函数有很多种，例如0-1损失函数， 平方损失函数等，这里我们要用的是对数损失函数。<br>$$L(Y, P(Y | X)) = - \log P(Y | X)$$</p>
<p>1.3.预备知识——风险函数</p>
<p>选定损失函数后，其值越小，模型就越好。模型的输入与输出(X, Y)是随机变量，遵循联合分布P（X, Y）， 所以损失函数的期望为:</p>
<span>$$R_{exp} = E_p[L(Y, f(X))] = \int_{X \times Y} L(y, f(x))P(x, y)dxdy $$</span><!-- Has MathJax -->
<p>这就是风险函数[risk function] 或 期望损失[expected loss], 其代表理论上模型f(X)关于联合分布P(X, Y)的平均意义下的损失.</p>
<p>1.4.预备知识——经验风险</p>
<p>关于有监督学习的病态问题[ill-formed problem]: 一方面，根据最小化风险函数确立最优的的模型需要联合分布P(X, Y)，另一方面此联合分布又是未知的。</p>
<p>我们想到用样本估计整体， 为此我们引入经验风险[empirical risk]或经验损失[empirical loss] ：</p>
<span>$$ R_{emp}(f) = \frac{1}{N}\sum_{i=1}^{N}L(y_i, f(x_i)) $$</span><!-- Has MathJax -->
<p>其中，定义训练集为：</p>
<p>$$T = {(x_1, y_1), (x_2, y_2), \cdots , (x_N, y_N)}$$</p>
<p>根据大数定律，在样本量N趋向于无穷时， $R<em>{emp}(f)$趋于$R</em>{exp}(f)$. 当然实际上标注好的样本一般达不到要求，所以效果不太好，这时我们可以引入关于模型复杂度的罚项来纠正，这里暂时不展开讨论。</p>
<p>1.5.预备知识——极大似然估计</p>
<ol>
<li>证明：</li>
</ol>
<p>设$$x_1, x_2, \cdots , x_n$$为独立同分布[idd]的样本，$$\theta$$为模型参数，$$f$$为我们使用的模型。</p>
<p>由idd:</p>
<p>$$f(x_1, x_2, \cdots, x_n) = f(x_1|\theta)\times f(x_2|\theta)\times \cdots \times f(x_n|\theta)$$</p>
<p>而实际上我们已知$$x_1, x_2, \cdots , x_n$$, 未知的是，$$\theta$$， 故似然定义为:</p>
<span>$$L(\theta|x_1, x_2, \cdots , x_n) = f(x_1, x_2, \cdots , x_n|\theta) = \coprod_{i=1}^{n}f(x_i|\theta)$$</span><!-- Has MathJax -->
<p>此为样本发生可能性的大小，而极大似然估计的核心即为，以使得当前样本发生概率最大时的参数$$\hat{\theta}$$作为真实参数$$\theta$$的一个估计值。所以此时我们要求的是$$L(\theta|x_1, x_2, \cdots , x_n)$$取得最大值时$$\theta$$的值，即为$$\hat{\theta}$$。即问题转化为求$$L(\theta|x_1, x_2, \cdots , x_n)$$的极值问题。自然想到导数，而由于连乘的存在，可利用对数函数单调递增的性质，两边取对数再求导，可以简化计算。</p>
<span>$$\ln{L(\theta|x_1, x_2, \cdots, x_n)} = \sum_{i=1}^{n}\ln{f(x_i|\theta)}$$</span><!-- Has MathJax -->
<p>上式即为对数似然，而一般而言的最大似然中的似然指的是对数平均似然$$\hat{l}$$，即为：</p>
<p>$$\hat{l} = \frac{1}{n}\ln{L}$$</p>
<p>整理得：</p>
<p>$$\hat{\theta} = \mathop{\arg\max}_{\theta\epsilon R^n}\hat{l}(\theta|x_1, x_2, \cdots, x_n)$$</p>
<p>看到，极大似然估计即为:</p>
<p>$$max\frac{1}{n}\sum_{i=1}^{n}\ln{f(x_i|\theta)}$$</p>
<p>即：</p>
<p>$$min\frac{1}{n}\sum_{i=1}^{n}-\ln{f(x_i|\theta)}$$</p>
<p>而经验风险最小化公式为：</p>
<span>$$\mathop{\arg\min}_{f\epsilon F}\frac{1}{N}\sum_{i=1}^{N}L(y_i, f(x_i))$$</span><!-- Has MathJax -->
<p>所以，在模型为条件概率分布模型，损失函数是对数损失函数$$L(Y, P(Y | X)) = - \log P(Y | X)$$时，经验风险最小化就等价于极大似然估计</p>
<p>证毕。</p>
]]></content>
      
        <categories>
            
            <category> 统计学习方法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[感知机学习算法的对偶形式]]></title>
      <url>/2017/03/03/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%B9%E5%81%B6%E5%BD%A2%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第二章笔记。<br>关于感知机学习算法对偶形式的简单实现[ Python ]。<br>之前有<a href="http://datahonor.com/2017/03/03/%E5%8E%9F%E5%A7%8B%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%A8%A1%E5%9E%8B/#more">原始感知机学习算法</a>的实现。</p>
<h5 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/21.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/22.png" alt=""></p>
<h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S1--&gt;随机生成训练集并标注</span></div><div class="line"></div><div class="line"><span class="comment"># train matrix</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_data</span><span class="params">()</span>:</span></div><div class="line">    M1 = np.random.random((<span class="number">100</span>, <span class="number">2</span>))</div><div class="line">    M11 = np.column_stack((M1, np.ones(<span class="number">100</span>)))</div><div class="line"></div><div class="line">    M2 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) - <span class="number">0.7</span></div><div class="line">    M22 = np.column_stack((M2, np.ones(<span class="number">100</span>) * (<span class="number">-1</span>)))</div><div class="line">    <span class="comment"># 合并两类，并将位置索引加到最后</span></div><div class="line">    MA = np.vstack((M11, M22))</div><div class="line">    MA = np.column_stack((MA, range(<span class="number">0</span>, <span class="number">200</span>)))</div><div class="line"></div><div class="line">    <span class="comment"># 作图操作</span></div><div class="line">    plt.plot(M1[:, <span class="number">0</span>], M1[:, <span class="number">1</span>], <span class="string">'ro'</span>)</div><div class="line">    plt.plot(M2[:, <span class="number">0</span>], M2[:, <span class="number">1</span>], <span class="string">'go'</span>)</div><div class="line">    <span class="comment"># 为了美观，根据数据点限制之后分类线的范围</span></div><div class="line">    min_x = np.min(M2)</div><div class="line">    max_x = np.max(M1)</div><div class="line">    <span class="comment"># 分隔x,方便作图</span></div><div class="line">    x = np.linspace(min_x, max_x, <span class="number">100</span>)</div><div class="line">    <span class="comment"># 此处返回 x 是为了之后作图方便</span></div><div class="line">    <span class="keyword">return</span> MA, x</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S2--&gt;GRAM计算</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gram</span><span class="params">(MA)</span>:</span></div><div class="line">    GRAM = np.empty(shape=(<span class="number">200</span>, <span class="number">200</span>))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(MA)):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(MA)):</div><div class="line">            GRAM[i, j] = np.dot(MA[i,][:<span class="number">2</span>], MA[j,][:<span class="number">2</span>])</div><div class="line">    <span class="keyword">return</span> GRAM</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S3--&gt;训练模型</span></div><div class="line"></div><div class="line"><span class="comment"># 模型实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(alpha, b, xi, yi, yN, index, GRAM)</span>:</span></div><div class="line">    pa1 = alpha * yN</div><div class="line">    pa2 = GRAM[:, index]</div><div class="line">    num = yi * (np.dot(pa1, pa2) + b)</div><div class="line">    <span class="keyword">return</span> num</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 训练training data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(MA, alpha, b, GRAM, yN)</span>:</span></div><div class="line">    <span class="comment"># M 存储每次处理后依旧处于误分类的原始数据</span></div><div class="line">    M = []</div><div class="line">    <span class="keyword">for</span> sample <span class="keyword">in</span> MA:</div><div class="line">        xi = sample[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">        yi = sample[<span class="number">-2</span>]</div><div class="line">        index = int(sample[<span class="number">-1</span>])</div><div class="line">        <span class="comment"># 如果为误分类，改变alpha,b</span></div><div class="line">        <span class="comment"># n 为学习率</span></div><div class="line">        <span class="keyword">if</span> func(alpha, b, xi, yi, yN, index, GRAM) &lt;= <span class="number">0</span>:</div><div class="line">            alpha[index] += n</div><div class="line">            b += n * yi</div><div class="line">            M.append(sample)</div><div class="line">    <span class="keyword">if</span> len(M) &gt; <span class="number">0</span>:</div><div class="line">        train(M, alpha, b, GRAM, yN)</div><div class="line">    <span class="keyword">return</span> alpha, b</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 作出分类线的图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_classify</span><span class="params">(w, b, x, rate0)</span>:</span></div><div class="line">    y = (w[<span class="number">0</span>] * x + b) / ((<span class="number">-1</span>) * w[<span class="number">1</span>])</div><div class="line">    plt.plot(x, y)</div><div class="line">    plt.title(<span class="string">'Accuracy = '</span> + str(rate0))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S4--&gt;生成测试集并测试模型准确性</span></div><div class="line"></div><div class="line"><span class="comment"># 随机生成testing data 并作图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_data</span><span class="params">()</span>:</span></div><div class="line">    M = np.random.random((<span class="number">50</span>, <span class="number">2</span>))</div><div class="line">    plt.plot(M[:, <span class="number">0</span>], M[:, <span class="number">1</span>], <span class="string">'*y'</span>)</div><div class="line">    <span class="keyword">return</span> M</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对传入的testing data 的单个样本进行分类</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(w, b, test_i)</span>:</span></div><div class="line">    <span class="keyword">if</span> np.sign(np.dot(w, test_i) + b) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 测试数据，返回正确率</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(w, b, test_data)</span>:</span></div><div class="line">    right_count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> test_i <span class="keyword">in</span> test_data:</div><div class="line">        classx = classify(w, b, test_i)</div><div class="line">        <span class="keyword">if</span> classx == <span class="number">1</span>:</div><div class="line">            right_count += <span class="number">1</span></div><div class="line">    rate = right_count / len(test_data)</div><div class="line">    <span class="keyword">return</span> rate</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 作出学习率——准确率的图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_n_rate</span><span class="params">(rate_l)</span>:</span></div><div class="line">    <span class="comment"># plot n-rate</span></div><div class="line">    n_l = sorted([float(x) <span class="keyword">for</span> x <span class="keyword">in</span> rate_l.keys()])</div><div class="line">    y = [float(rate_l[n_l[i]]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n_l))]</div><div class="line">    print(n_l, <span class="string">'\n'</span>, y)</div><div class="line">    plt.plot(n_l, y, <span class="string">'ro-'</span>)</div><div class="line">    plt.title(<span class="string">"n-accuracy"</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    MA, x = get_train_data()</div><div class="line">    test_data = get_test_data()</div><div class="line">    GRAM = get_gram(MA)</div><div class="line">    yN = MA[:, <span class="number">2</span>]</div><div class="line">    xN = MA[:, <span class="number">0</span>:<span class="number">2</span>]</div><div class="line">    <span class="comment"># 定义初始值</span></div><div class="line">    alpha = [<span class="number">0</span>] * <span class="number">200</span></div><div class="line">    b = <span class="number">0</span></div><div class="line">    n = <span class="number">1</span></div><div class="line">    <span class="comment"># 初始化最优的正确率</span></div><div class="line">    rate0 = <span class="number">0</span></div><div class="line">    rate_l = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">#    print(alpha,b)</span></div><div class="line">    <span class="comment">#    循环不同的学习率n,寻求最优的学习率，即最终的rate0</span></div><div class="line">    <span class="comment">#    w0,b0为对应的最优参数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">0.01</span>, <span class="number">1</span>, <span class="number">1000</span>):</div><div class="line">        n = i</div><div class="line">        alpha, b = train(MA, alpha, b, GRAM, yN)</div><div class="line">        alphap = np.column_stack((alpha * yN, alpha * yN))</div><div class="line">        w = sum(alphap * xN)</div><div class="line">        rate = test(w, b, test_data)</div><div class="line">        <span class="comment"># print(w,b)</span></div><div class="line">        rate = test(w, b, test_data)</div><div class="line">        <span class="keyword">if</span> rate &gt; rate0:</div><div class="line">            rate_l[n] = rate</div><div class="line">            rate0 = rate</div><div class="line">            w0 = w</div><div class="line">            b0 = b</div><div class="line">            print(<span class="string">'Until now, the best result of the accuracy on test data is '</span> + str(rate))</div><div class="line">            print(<span class="string">'with w='</span> + str(w0) + <span class="string">' b='</span> + str(b0))</div><div class="line">            print(<span class="string">"n="</span>, n)</div><div class="line">            print(<span class="string">'---------------------------------------------'</span>)</div><div class="line">            <span class="comment">#     在选定最优的学习率后，作图</span></div><div class="line">    plot_classify(w0, b0, x, rate0)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># 作出学习率——准确率的图</span></div><div class="line">    plot_n_rate(rate_l)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/23.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/24.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/25.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原始感知机模型]]></title>
      <url>/2017/03/03/%E5%8E%9F%E5%A7%8B%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第二章笔记。<br>关于原始感知机学习算法的简单实现[ Python ]。<br>之后有<a href="http://datahonor.com/2017/03/03/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%B9%E5%81%B6%E5%BD%A2%E5%BC%8F/#more">感知机的对偶形式</a>的实现。</p>
<h5 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/1.png" alt=""></p>
<h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S1--&gt;随机生成训练集并标注</span></div><div class="line"></div><div class="line"><span class="comment"># train matrix</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_data</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    M1 = np.random.random((<span class="number">100</span>, <span class="number">2</span>))</div><div class="line">    M11 = np.column_stack((M1, np.ones(<span class="number">100</span>)))</div><div class="line"></div><div class="line">    M2 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) - <span class="number">0.7</span></div><div class="line">    M22 = np.column_stack((M2, np.ones(<span class="number">100</span>) * (<span class="number">-1</span>)))</div><div class="line"></div><div class="line">    MA = np.vstack((M11, M22))</div><div class="line"></div><div class="line">    plt.plot(M1[:, <span class="number">0</span>], M1[:, <span class="number">1</span>], <span class="string">'ro'</span>)</div><div class="line">    plt.plot(M2[:, <span class="number">0</span>], M2[:, <span class="number">1</span>], <span class="string">'go'</span>)</div><div class="line">    min_x = np.min(M2)</div><div class="line">    max_x = np.max(M1)</div><div class="line">    <span class="comment"># 此处返回 x 是为了之后作图方便</span></div><div class="line">    x = np.linspace(min_x, max_x, <span class="number">100</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> MA, x</div><div class="line"></div><div class="line"><span class="comment"># S2--&gt;原始感知机模型的训练及做图</span></div><div class="line"></div><div class="line"><span class="comment"># 感知机模型:f(x) = sign(w*x+b)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(w, b, xi, yi)</span>:</span></div><div class="line">    num = yi * (np.dot(w, xi) + b)</div><div class="line">    <span class="keyword">return</span> num</div><div class="line"></div><div class="line"><span class="comment"># 训练training data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(MA, w, b)</span>:</span></div><div class="line">    <span class="comment"># M 存储每次处理后依旧处于误分类的原始数据</span></div><div class="line">    M = []</div><div class="line">    <span class="keyword">for</span> sample <span class="keyword">in</span> MA:</div><div class="line">        xi = sample[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">        yi = sample[<span class="number">-1</span>]</div><div class="line">        <span class="comment"># 如果为误分类，更新w, b</span></div><div class="line">        <span class="comment"># n 为学习率</span></div><div class="line">        <span class="keyword">if</span> func(w, b, xi, yi) &lt;= <span class="number">0</span>:</div><div class="line">            w += n * yi * xi</div><div class="line">            b += n * yi</div><div class="line">            M.append(sample)</div><div class="line">    <span class="keyword">if</span> len(M) &gt; <span class="number">0</span>:</div><div class="line">        train(M, w, b)</div><div class="line">    <span class="keyword">return</span> w, b</div><div class="line"></div><div class="line"><span class="comment"># 作出分类线的图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_classify</span><span class="params">(w, b, x, rate0)</span>:</span></div><div class="line">    y = (w[<span class="number">0</span>] * x + b) / ((<span class="number">-1</span>) * w[<span class="number">1</span>])</div><div class="line">    plt.plot(x, y)</div><div class="line">    plt.title(<span class="string">'Accuracy = '</span> + str(rate0))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S3--&gt;随机生成测试集，并测试模型</span></div><div class="line"></div><div class="line"><span class="comment"># 随机生成testing data 并作图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_data</span><span class="params">()</span>:</span></div><div class="line">    M = np.random.random((<span class="number">50</span>, <span class="number">2</span>))</div><div class="line">    plt.plot(M[:, <span class="number">0</span>], M[:, <span class="number">1</span>], <span class="string">'*y'</span>)</div><div class="line">    <span class="keyword">return</span> M</div><div class="line"></div><div class="line"><span class="comment"># 对传入的testing data 的单个样本进行分类</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(w, b, test_i)</span>:</span></div><div class="line">    <span class="keyword">if</span> np.sign(np.dot(w, test_i) + b) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># 测试数据，返回正确率</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(w, b, test_data)</span>:</span></div><div class="line">    right_count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> test_i <span class="keyword">in</span> test_data:</div><div class="line">        classx = classify(w, b, test_i)</div><div class="line">        <span class="keyword">if</span> classx == <span class="number">1</span>:</div><div class="line">            right_count += <span class="number">1</span></div><div class="line">    rate = right_count / len(test_data)</div><div class="line">    <span class="keyword">return</span> rate</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_n_rate</span><span class="params">(rate_l)</span>:</span></div><div class="line">    <span class="comment"># plot n-rate</span></div><div class="line">    n_l = sorted([float(x) <span class="keyword">for</span> x <span class="keyword">in</span> rate_l.keys()])</div><div class="line">    y = [float(rate_l[n_l[i]]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n_l))]</div><div class="line">    print(n_l, <span class="string">'\n'</span>, y)</div><div class="line">    plt.plot(n_l, y, <span class="string">'ro-'</span>)</div><div class="line">    plt.title(<span class="string">"n-accuracy"</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    MA, x = get_train_data()</div><div class="line">    test_data = get_test_data()</div><div class="line">    <span class="comment"># 定义初始的w,b</span></div><div class="line">    w = [<span class="number">0</span>, <span class="number">0</span>]</div><div class="line">    b = <span class="number">0</span></div><div class="line">    <span class="comment"># 初始化最优的正确率</span></div><div class="line">    rate0 = <span class="number">0</span></div><div class="line">    <span class="comment"># rate_l 记录学习率的更新</span></div><div class="line">    rate_l = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment"># 循环不同的学习率n,寻求最优的学习率，即最终的rate0</span></div><div class="line">    <span class="comment"># w0,b0为对应的最优参数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">0.01</span>, <span class="number">1</span>, <span class="number">1000</span>):</div><div class="line">        n = i</div><div class="line">        w, b = train(MA, w, b)</div><div class="line">        <span class="comment"># print(w,b)</span></div><div class="line">        rate = test(w, b, test_data)</div><div class="line">        <span class="keyword">if</span> rate &gt;= rate0:</div><div class="line">            rate_l[n] = rate</div><div class="line">            rate0 = rate</div><div class="line">            w0 = w</div><div class="line">            b0 = b</div><div class="line">            print(<span class="string">'Until now, the best result of the accuracy on test data is '</span> + str(rate))</div><div class="line">            print(<span class="string">'with w='</span> + str(w0) + <span class="string">' b='</span> + str(b0))</div><div class="line">            print(<span class="string">"n="</span>, n)</div><div class="line">            print(<span class="string">'---------------------------------------------'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 在选定最优的学习率后，作图</span></div><div class="line">    plot_classify(w0, b0, x, rate0)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># 作出学习率——准确率的图</span></div><div class="line">    plot_n_rate(rate_l)</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/2.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/3.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/4.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[朴素贝叶斯算法的简单实现]]></title>
      <url>/2017/03/03/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>李航老师，《统计学习方法》第四章，朴素贝叶斯算法笔记。</p>
<h5 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h5><h6 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h6><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch4/Screenshot%20from%202017-03-03%2012-38-53.png" alt=""></p>
<h6 id="贝叶斯估计"><a href="#贝叶斯估计" class="headerlink" title="贝叶斯估计"></a>贝叶斯估计</h6><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch4/Screenshot%20from%202017-03-03%2012-46-57.png" alt=""></p>
<p>如上所述，在lambda = 0时，贝叶斯估计就等价于极大似然估计。</p>
<h5 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h5><blockquote>
<p>这里用的是<a href="http://download.csdn.net/detail/zouxy09/6610571" target="_blank" rel="external">数字手写体</a>的数据，之前在<a href="http://datahonor.com/2017/03/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0KNN-Python/">KNN</a>也用到过。</p>
</blockquote>
<h6 id="手动实现算法"><a href="#手动实现算法" class="headerlink" title="手动实现算法"></a>手动实现算法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">朴素贝叶斯预测手写体</div><div class="line"></div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">## 处理单个txt文件, 将文件转化为1-d数组</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vector</span><span class="params">(filename)</span>:</span></div><div class="line">    rows = <span class="number">32</span></div><div class="line">    cols = <span class="number">32</span></div><div class="line">    imgVector = np.zeros((<span class="number">1</span>, rows * cols))</div><div class="line">    fileIn = open(filename)</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(rows):</div><div class="line">        lineStr = fileIn.readline()</div><div class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(cols):</div><div class="line">            imgVector[<span class="number">0</span>, row * <span class="number">32</span> + col] = int(lineStr[col])</div><div class="line">    fileIn.close()</div><div class="line">    <span class="keyword">return</span> imgVector</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取训练集</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_training_sample</span><span class="params">()</span>:</span></div><div class="line">    os.chdir(<span class="string">'/home/shen/PycharmProjects/MyPython/统计学习方法/Naive Bayes/digits/trainingDigits'</span>)</div><div class="line">    files = os.listdir()</div><div class="line">    numSamples = len(files)</div><div class="line">    train_x = np.zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    train_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = files[i]</div><div class="line">        yi = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])</div><div class="line">        xi = img2vector(filename)</div><div class="line"></div><div class="line">        train_x[i, :] = xi</div><div class="line">        train_y.append(yi)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> train_x, train_y</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取测试集</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_sample</span><span class="params">()</span>:</span></div><div class="line">    os.chdir(<span class="string">'/home/shen/PycharmProjects/MyPython/统计学习方法/Naive Bayes/digits/testDigits'</span>)</div><div class="line">    files = os.listdir()</div><div class="line">    numSamples = len(files)</div><div class="line">    test_x = np.zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    test_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = files[i]</div><div class="line">        yi = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])</div><div class="line">        xi = img2vector(filename)</div><div class="line"></div><div class="line">        test_x[i, :] = xi</div><div class="line">        test_y.append(yi)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> test_x, test_y</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 核心训练算法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_x_yi</span><span class="params">(train_x, train_y, yi)</span>:</span></div><div class="line">    <span class="keyword">if</span> yi == <span class="number">0</span>:</div><div class="line">        train_x_yi = train_x[train_y == np.zeros(len(train_y))]</div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        train_x_yi = train_x[train_y == np.ones(len(train_y)) * yi]</div><div class="line"></div><div class="line">    x_equal_1 = (train_x_yi.sum(axis=<span class="number">0</span>)+lamda)/ (len(train_x_yi)+len(train_x_yi[<span class="number">0</span>])*lamda)</div><div class="line">    x_equal_0 = np.ones(len(x_equal_1)) - x_equal_1</div><div class="line">    x_prec = np.vstack((x_equal_0, x_equal_1))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> x_prec</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_x, train_y)</span>:</span></div><div class="line">    <span class="comment"># 根据需要，构造合适的结构</span></div><div class="line">    <span class="comment"># [[0, [&#123;0:p0, 1:p1&#125;, &#123;...&#125;, &#123;...&#125;,...&#123;...&#125;]], [1, [...]], [...], ...]</span></div><div class="line">    train_result = list(range(<span class="number">0</span>, <span class="number">10</span>))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> train_result:</div><div class="line">        train_result[i] = [<span class="number">0</span>, [&#123;&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span> * <span class="number">32</span>)]]</div><div class="line"></div><div class="line">    N = len(train_y)</div><div class="line">    unique_yi, counts_yi = np.unique(train_y, return_counts=<span class="keyword">True</span>)</div><div class="line">    prec_yi = (counts_yi+lamda) / (len(train_y)+len(unique_yi)*lamda)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prec_yi)):</div><div class="line">        train_result[i][<span class="number">0</span>] = list(prec_yi)[i]</div><div class="line">    <span class="comment"># yi = dict(zip(unique_yi, prec_yi))</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        x_prec = get_train_x_yi(train_x, train_y, y)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> xi <span class="keyword">in</span> range(len(x_prec[<span class="number">0</span>])):</div><div class="line">            train_result[y][<span class="number">1</span>][xi][<span class="number">0</span>] = x_prec[<span class="number">0</span>][xi]</div><div class="line">            train_result[y][<span class="number">1</span>][xi][<span class="number">1</span>] = x_prec[<span class="number">1</span>][xi]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> train_result</div><div class="line"></div><div class="line"><span class="comment"># 对测试集进行预测</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(test_x, test_y, train_result)</span>:</span></div><div class="line">    true_pre = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(test_x)):</div><div class="line">        yi = test_y[i]</div><div class="line">        xi = test_x[i]</div><div class="line">        result_xi = []</div><div class="line">        <span class="keyword">for</span> classx <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            P_yi = train_result[classx][<span class="number">0</span>]</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(xi)):</div><div class="line">                <span class="comment"># print(train_result[classx][1][k][int(xi[k])])</span></div><div class="line">                P_yi *= train_result[classx][<span class="number">1</span>][k][int(xi[k])]</div><div class="line">            result_xi.append(P_yi)</div><div class="line"></div><div class="line">        y0 = dict(zip(result_xi, range(len(result_xi))))[max(result_xi)]</div><div class="line">        <span class="keyword">if</span> y0 == yi:</div><div class="line">            true_pre += <span class="number">1</span></div><div class="line"></div><div class="line">    print(<span class="string">'预测准确率为： '</span>, true_pre / len(test_x))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    s = time.time()</div><div class="line">    train_x, train_y = get_training_sample()</div><div class="line">    test_x, test_y = get_test_sample()</div><div class="line"></div><div class="line"></div><div class="line">    train_result = train(train_x, train_y)</div><div class="line">    predict(train_x, train_y, train_result)</div><div class="line">    e = time.time()</div><div class="line">    print(<span class="string">'本次训练预测共耗时 '</span>, e - s)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 选取合适的lamda</span></div><div class="line">    <span class="comment"># lamda=0是为极大似然估计</span></div><div class="line">    <span class="comment"># lamda&gt;0是为贝叶斯估计，特别地，在其为1时，称作拉普拉斯平滑。</span></div><div class="line">    lamda = <span class="number">0</span>  <span class="comment"># 这里lamda=0得到的准确率较高</span></div><div class="line">    run()</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch4/Screenshot%20from%202017-03-03%2012-48-31.png" alt=""></p>
<h6 id="与sklearn实现对比"><a href="#与sklearn实现对比" class="headerlink" title="与sklearn实现对比"></a>与sklearn实现对比</h6><p>为了对比，我们也用sklearn的朴素贝叶斯算法实现下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="keyword">import</span> os</div><div class="line">   <span class="keyword">import</span> time</div><div class="line">   <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">   <span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">   <span class="comment"># the Naive Bayes model</span></div><div class="line">   <span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB, GaussianNB</div><div class="line"></div><div class="line"><span class="comment"># 这里的函数还是上面那些，只不过用到其中几个而已，这里不再赘述</span></div><div class="line">   <span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">       s = time.time()</div><div class="line"></div><div class="line">       train_x, train_y = get_training_sample()</div><div class="line">       test_x, test_y = get_test_sample()</div><div class="line">       nb = MultinomialNB()</div><div class="line">       <span class="comment"># nb = GaussianNB()</span></div><div class="line">       nb.fit(train_x, train_y)</div><div class="line">       print(nb.score(test_x, test_y))</div><div class="line"></div><div class="line">       e = time.time()</div><div class="line">       print(<span class="string">'本次训练预测共耗时 '</span>, e-s)</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>nb = MultinomialNB()<br>0.923890063425<br>本次训练预测共耗时  1.693662405014038</p>
<p>nb = GaussianNB()<br>0.733615221987<br>本次训练预测共耗时  1.8078570365905762</p>
</blockquote>
<p>可以看到，sklearn的算法实现明显要快得多，在正确选择合适算法时，也能达到较高的准确率。</p>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>这里训练数据的结果用了一个比较复杂结构，开始的时候怎么也构造不出。但是后来反过来逆向考虑</p>
<blockquote>
<p>在新的待预测的测试向量进入时,我需要哪些数据去预测呢？<br>怎样高效地调用这些数据呢？<br>所以，从其需要，构造其现有的就够，变得简单许多。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[梯度下降法[Gradient Descent]]]></title>
      <url>/2017/03/02/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95-Gradient-Descent/</url>
      <content type="html"><![CDATA[<p>初步认识梯度下降这一算法，认识并分析其优缺点以更好地利用此算法。</p>
<h5 id="简介wiki"><a href="#简介wiki" class="headerlink" title="简介wiki"></a>简介<a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95" target="_blank" rel="external">wiki</a></h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/1.png" alt=""></p>
<h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/2.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/4.png" alt=""></p>
<h5 id="线性回归的应用"><a href="#线性回归的应用" class="headerlink" title="线性回归的应用"></a>线性回归的应用</h5><p>参考<a href="https://github.com/mattnedrich/GradientDescentExample" target="_blank" rel="external">这里</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># y = mx + b</span></div><div class="line"><span class="comment"># m is slope, b is y-intercept</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_error_for_line_given_points</span><span class="params">(b, m, points)</span>:</span></div><div class="line">    totalError = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(points)):</div><div class="line">        x = points[i, <span class="number">0</span>]</div><div class="line">        y = points[i, <span class="number">1</span>]</div><div class="line">        totalError += (y - (m * x + b)) ** <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> totalError / float(len(points))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_gradient</span><span class="params">(b_current, m_current, points, learningRate)</span>:</span></div><div class="line">    b_gradient = <span class="number">0</span></div><div class="line">    m_gradient = <span class="number">0</span></div><div class="line">    N = float(len(points))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(points)):</div><div class="line">        x = points[i, <span class="number">0</span>]</div><div class="line">        y = points[i, <span class="number">1</span>]</div><div class="line">        b_gradient += -(<span class="number">2</span>/N) * (y - ((m_current * x) + b_current))</div><div class="line">        m_gradient += -(<span class="number">2</span>/N) * x * (y - ((m_current * x) + b_current))</div><div class="line">    new_b = b_current - (learningRate * b_gradient)</div><div class="line">    new_m = m_current - (learningRate * m_gradient)</div><div class="line">    <span class="keyword">return</span> [new_b, new_m]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent_runner</span><span class="params">(points, starting_b, starting_m, learning_rate, num_iterations)</span>:</span></div><div class="line">    b = starting_b</div><div class="line">    m = starting_m</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iterations):</div><div class="line">        b, m = step_gradient(b, m, array(points), learning_rate)</div><div class="line">    <span class="keyword">return</span> [b, m]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    points = genfromtxt(<span class="string">"data.csv"</span>, delimiter=<span class="string">","</span>)</div><div class="line">    learning_rate = <span class="number">0.0001</span></div><div class="line">    initial_b = <span class="number">0</span> <span class="comment"># initial y-intercept guess</span></div><div class="line">    initial_m = <span class="number">0</span> <span class="comment"># initial slope guess</span></div><div class="line">    num_iterations = <span class="number">1000</span></div><div class="line">    print(<span class="string">"Starting gradient descent at b = &#123;0&#125;, m = &#123;1&#125;, error = &#123;2&#125;"</span>.format(initial_b, initial_m, compute_error_for_line_given_points(initial_b, initial_m, points)))</div><div class="line">    print(<span class="string">"Running..."</span>)</div><div class="line">    [b, m] = gradient_descent_runner(points, initial_b, initial_m, learning_rate, num_iterations)</div><div class="line">    print(<span class="string">"After &#123;0&#125; iterations b = &#123;1&#125;, m = &#123;2&#125;, error = &#123;3&#125;"</span>.format(num_iterations, b, m, compute_error_for_line_given_points(b, m, points)))</div><div class="line"></div><div class="line">    <span class="comment"># 作图[只是为了直观地看下拟合的效果]</span></div><div class="line">    plt.plot([points[i,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))], [points[i,<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))], <span class="string">'bo'</span>)</div><div class="line">    x = linspace(min([points[i,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))])<span class="number">-5</span>, max([points[i,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))])+<span class="number">5</span>, <span class="number">1000</span>)</div><div class="line">    plt.plot(x, m*x+b)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run()</div><div class="line"></div></pre></td></tr></table></figure><br>运行结果：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/5.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/6.png" alt=""></p>
<h5 id="梯度下降的弊端及验证"><a href="#梯度下降的弊端及验证" class="headerlink" title="梯度下降的弊端及验证"></a>梯度下降的弊端及验证</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/7.png" alt=""></p>
<p>尝试验证wiki的下图：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/8.gif" alt=""></p>
<p>选取不同的学习率，实验结果如下：</p>
<blockquote>
<p>E1：Learning Rate = 0.0045</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/9.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/10.png" alt=""></p>
<blockquote>
<p>E2: Learning Rate = 0.0025</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/11.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/12.png" alt=""><br>可以看到还是有一定的差别，推测与学习率和迭代次数有关，这个暂时留到以后深究。</p>
<p>Python实现源码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># 递归实现逐次求梯度，这里为了充分迭代，修改递归次数限制</span></div><div class="line">sys.setrecursionlimit(<span class="number">2000</span>)</div><div class="line"></div><div class="line"><span class="comment"># 计算Rosenbrock函數的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(X, Y)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> - X) ** <span class="number">2</span> + <span class="number">100</span> * ((Y - X ** <span class="number">2</span>) ** <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_gradient</span><span class="params">(pre, learningRate=<span class="number">0.0025</span>)</span>:</span>  <span class="comment">#0.0025</span></div><div class="line">    scatter.append(pre)</div><div class="line">    x = pre[<span class="number">0</span>]</div><div class="line">    y = pre[<span class="number">1</span>]</div><div class="line">    x_gradient = <span class="number">2</span>*(x<span class="number">-1</span>)+<span class="number">400</span>*x*(x**<span class="number">2</span>-y)</div><div class="line">    y_gradient = <span class="number">200</span>*(y-x**<span class="number">2</span>)</div><div class="line">    step_x = learningRate * x_gradient</div><div class="line">    step_y = learningRate * y_gradient</div><div class="line">    steps = [step_x, step_y]</div><div class="line">    now = [pre[<span class="number">0</span>] - steps[<span class="number">0</span>], pre[<span class="number">1</span>] - steps[<span class="number">1</span>]]</div><div class="line">    <span class="comment"># 将新的点存储到scatter列表里面去</span></div><div class="line">    z = func(now[<span class="number">0</span>], now[<span class="number">1</span>])</div><div class="line">    <span class="comment"># print(z)</span></div><div class="line">    z_l.append(z)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        step_gradient(now)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    fig = plt.figure()</div><div class="line">    <span class="comment"># ax = Axes3D(fig)</span></div><div class="line">    <span class="comment"># 随机度下降起始点</span></div><div class="line">    point = (<span class="number">-0.5</span>, <span class="number">0.5</span>)</div><div class="line">    scatter = []</div><div class="line">    z_l = []</div><div class="line">    scatter.append(point)</div><div class="line">    step_gradient(point)</div><div class="line">    print(<span class="string">'Total times'</span>, len(scatter))</div><div class="line">    print(<span class="string">"Min_z--&gt;"</span>, min(z_l))</div><div class="line">    plt.plot([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], [point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], <span class="string">'r'</span>)</div><div class="line"></div><div class="line">    X = np.arange(<span class="number">-0.8</span>, <span class="number">1</span>, <span class="number">0.01</span>)</div><div class="line">    Y = np.arange(<span class="number">-0.2</span>, <span class="number">1.1</span>, <span class="number">0.025</span>)</div><div class="line">    X, Y = np.meshgrid(X, Y)</div><div class="line">    Z = func(X, Y)</div><div class="line"></div><div class="line">    <span class="comment"># ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')</span></div><div class="line">    <span class="comment"># plt.show()</span></div><div class="line">    CS = plt.contour(X, Y, Z, <span class="number">100</span>)</div><div class="line">    manual_locations = [(i, i+<span class="number">0.02</span>) <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">-0.2</span>, <span class="number">0.3</span>, <span class="number">10</span>)]</div><div class="line">    manual_locations.append((<span class="number">1</span>,<span class="number">1</span>))</div><div class="line"></div><div class="line">    plt.clabel(CS, inline=<span class="number">1</span>, fontsize=<span class="number">8</span>, manual=manual_locations)</div><div class="line">    plt.title(<span class="string">'Rosenbrock'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><br>适当调节参数，也可以作出下面的图：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/13.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/14.png" alt=""></p>
<p>第一次补充：[尝试放大局部图像找到所谓的“之”字形失败]<br>之前未能实现wiki“之”字形震荡, 就想到可能是点过于密集导致微小的弯折被掩盖，于是进行局部放大图像的尝试。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># 递归实现逐次求梯度，这里为了充分迭代，修改递归次数限制</span></div><div class="line">sys.setrecursionlimit(<span class="number">2000</span>)</div><div class="line"></div><div class="line"><span class="comment"># 计算Rosenbrock函數的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(X, Y)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> - X) ** <span class="number">2</span> + <span class="number">100</span> * ((Y - X ** <span class="number">2</span>) ** <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_gradient</span><span class="params">(pre, learningRate=<span class="number">0.0045</span>)</span>:</span>  <span class="comment">#0.0025</span></div><div class="line">    scatter.append(pre)</div><div class="line">    x = pre[<span class="number">0</span>]</div><div class="line">    y = pre[<span class="number">1</span>]</div><div class="line">    x_gradient = <span class="number">2</span>*(x<span class="number">-1</span>)+<span class="number">400</span>*x*(x**<span class="number">2</span>-y)</div><div class="line">    y_gradient = <span class="number">200</span>*(y-x**<span class="number">2</span>)</div><div class="line">    step_x = learningRate * x_gradient</div><div class="line">    step_y = learningRate * y_gradient</div><div class="line">    steps = [step_x, step_y]</div><div class="line">    now = [pre[<span class="number">0</span>] - steps[<span class="number">0</span>], pre[<span class="number">1</span>] - steps[<span class="number">1</span>]]</div><div class="line">    <span class="comment"># 将新的点存储到scatter列表里面去</span></div><div class="line">    z = func(now[<span class="number">0</span>], now[<span class="number">1</span>])</div><div class="line">    <span class="comment"># print(z)</span></div><div class="line">    z_l.append(z)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        step_gradient(now)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">8</span>), dpi=<span class="number">98</span>)</div><div class="line">    p1 = plt.subplot(<span class="number">121</span>, aspect=<span class="number">1.8</span> / <span class="number">1.3</span>)</div><div class="line">    p2 = plt.subplot(<span class="number">122</span>, aspect=<span class="number">0.06</span> / <span class="number">0.001</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 随机度下降起始点</span></div><div class="line">    point = (<span class="number">-0.5</span>, <span class="number">0.5</span>)</div><div class="line">    scatter = []</div><div class="line">    z_l = []</div><div class="line">    scatter.append(point)</div><div class="line">    step_gradient(point)</div><div class="line">    print(<span class="string">'Total times'</span>, len(scatter))</div><div class="line">    print(<span class="string">"Min_z--&gt;"</span>, min(z_l))</div><div class="line">    p1.plot([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], [point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], <span class="string">'r'</span>)</div><div class="line"></div><div class="line">    p2.plot([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], [point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], <span class="string">'r'</span>)</div><div class="line">    p2.axis([<span class="number">-0.02</span>, <span class="number">0.04</span>, <span class="number">-0.0005</span>, <span class="number">0.0005</span>])</div><div class="line"></div><div class="line">    X = np.arange(<span class="number">-0.8</span>, <span class="number">1</span>, <span class="number">0.01</span>)</div><div class="line">    Y = np.arange(<span class="number">-0.2</span>, <span class="number">1.1</span>, <span class="number">0.025</span>)</div><div class="line">    X, Y = np.meshgrid(X, Y)</div><div class="line">    Z = func(X, Y)</div><div class="line"></div><div class="line">    CS = p1.contour(X, Y, Z, <span class="number">100</span>)</div><div class="line">    manual_locations = [(i, i+<span class="number">0.02</span>) <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">-0.2</span>, <span class="number">0.3</span>, <span class="number">10</span>)]</div><div class="line">    manual_locations.append((<span class="number">1</span>,<span class="number">1</span>))</div><div class="line">    p1.clabel(CS, inline=<span class="number">1</span>, fontsize=<span class="number">8</span>, manual=manual_locations)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>得到结果如下[显然实验失败了:-)]<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/15.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 统计学习方法 </tag>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[豆瓣影评爬取]]></title>
      <url>/2017/03/02/%E8%B1%86%E7%93%A3%E5%BD%B1%E8%AF%84%E7%88%AC%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>以爬取豆瓣影评为例，抽象简单的爬取流程。</p>
<p>环境与工具：</p>
<blockquote>
<p>Ubuntu16.04 64bit<br>Pycharm<br>Anaconda3<br>bs4</p>
</blockquote>
<h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/douban%20/1.png" alt=""></p>
<h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取一个评论列表页面的网页数据</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(url)</span>:</span></div><div class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36"</span>&#125;</div><div class="line">    data = requests.get(url, headers=headers).text</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="comment"># 获取页面中影评标题及链接</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_data_bs</span><span class="params">(data)</span>:</span></div><div class="line">    title_data_d = &#123;&#125;</div><div class="line">    bsObj = BeautifulSoup(data, <span class="string">'lxml'</span>)</div><div class="line">    review_lists = bsObj.findAll(<span class="string">'div'</span>, &#123;<span class="string">'typeof'</span>:<span class="string">"v:Review"</span>&#125;)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> review_lists:</div><div class="line">        title_data = item.find(<span class="string">'h3'</span>, &#123;<span class="string">'class'</span>:<span class="string">'title'</span>&#125;)</div><div class="line">        <span class="comment"># 这里多次使用replace可用正则表达式代替，这里省略，详情参考站内正则表达式python版的总结</span></div><div class="line">        title = title_data.get_text().replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</div><div class="line">        title_href = title_data.find(<span class="string">'a'</span>).get(<span class="string">'href'</span>)</div><div class="line">        title_data_d[title] = title_href</div><div class="line">    <span class="keyword">return</span> title_data_d</div><div class="line"></div><div class="line"><span class="comment"># 根据评论标题链接抓取评论内容</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comment_data</span><span class="params">(comment_url)</span>:</span></div><div class="line">    comment_data = get_data(comment_url)</div><div class="line">    bsObj = BeautifulSoup(comment_data, <span class="string">'lxml'</span>)</div><div class="line">    <span class="comment"># print(bsObj)</span></div><div class="line">    <span class="comment"># author data</span></div><div class="line">    p_name = bsObj.find(<span class="string">'header'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-hd'</span>&#125;).find(<span class="string">'a'</span>).find(<span class="string">'span'</span>).get_text()</div><div class="line">    p_url = bsObj.find(<span class="string">'header'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-hd'</span>&#125;).find(<span class="string">'a'</span>).get(<span class="string">'href'</span>)</div><div class="line">    <span class="comment"># comment data</span></div><div class="line">    c_date = bsObj.find(<span class="string">'span'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-meta'</span>&#125;).get_text()</div><div class="line">    <span class="comment"># c_rank提取中发现查看源码发现与检查元素不符合</span></div><div class="line">    <span class="comment"># 有些用户未评分</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        c_rank = bsObj.find(<span class="string">'span'</span>, &#123;<span class="string">'class'</span>: <span class="string">"main-title-hide"</span>&#125;).get_text()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        c_rank = <span class="keyword">None</span></div><div class="line">    c_comment = bsObj.find(<span class="string">'div'</span>, &#123;<span class="string">'property'</span>: <span class="string">'v:description'</span>&#125;).get_text()</div><div class="line">    <span class="comment"># 有用，无用</span></div><div class="line">    useful = bsObj.find(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-panel-useful'</span>&#125;).find_all(<span class="string">'button'</span>)</div><div class="line">    y_use = useful[<span class="number">0</span>].get_text().replace(<span class="string">'\n'</span>, <span class="string">''</span>).split(<span class="string">' '</span>)[<span class="number">5</span>]</div><div class="line">    n_use = useful[<span class="number">1</span>].get_text().replace(<span class="string">'\n'</span>, <span class="string">''</span>).split(<span class="string">' '</span>)[<span class="number">5</span>]</div><div class="line">    comment_data = [p_name, p_url, c_date, c_comment, c_rank, y_use, n_use]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> comment_data</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>:</span></div><div class="line">    db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"密码不给看"</span>, <span class="string">"USpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = db.cursor()</div><div class="line">    cursor.execute(<span class="string">"DROP TABLE IF EXISTS DouBan"</span>)</div><div class="line">    <span class="comment"># p_name, p_url, c_date, c_data, c_rank, y_use, n_use</span></div><div class="line">    cursor.execute(<span class="string">"CREATE TABLE DouBan(p_name VARCHAR(20), p_url VARCHAR(100), "</span></div><div class="line">                   <span class="string">"c_date VARCHAR (20), c_comment VARCHAR (20000), c_rank VARCHAR (5), "</span></div><div class="line">                   <span class="string">"y_use VARCHAR (10), n_use VARCHAR (10));"</span>)  <span class="comment"># 创建表</span></div><div class="line">    db.commit()</div><div class="line">    db.close()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">(cursor, db, commemt_data)</span>:</span></div><div class="line">    <span class="comment"># try:</span></div><div class="line">    sql = <span class="string">'INSERT INTO DouBan(p_name, p_url, c_date, c_comment, c_rank, y_use, n_use)VALUES(%s,%s,%s,%s,%s,%s,%s)'</span></div><div class="line">    <span class="comment"># cursor.execute(sql, (commemt_data[0], commemt_data[1], commemt_data[2], commemt_data[3], commemt_data[4], commemt_data[5], commemt_data[6]))</span></div><div class="line">    cursor.execute(sql, [commemt_data[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>)])</div><div class="line">    <span class="comment"># 提交事务</span></div><div class="line">    db.commit()</div><div class="line">    print(commemt_data[<span class="number">0</span>])</div><div class="line">    <span class="comment"># except:</span></div><div class="line">    <span class="comment">#     print('Save fail...')</span></div><div class="line">    <span class="comment">#     pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_spider</span><span class="params">(list_url)</span>:</span></div><div class="line">    db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"密码不给看"</span>, <span class="string">"USpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = db.cursor()</div><div class="line">    page_data = get_data(list_url)</div><div class="line">    <span class="comment"># https: // movie.douban.com/subject/26616436/reviews</span></div><div class="line">    titles_data = parse_data_bs(page_data)</div><div class="line">    <span class="comment"># print(titles_data)</span></div><div class="line">    <span class="keyword">for</span> comment_title, comment_url <span class="keyword">in</span> titles_data.items():</div><div class="line">        comment_data = get_comment_data(comment_url)</div><div class="line">        <span class="comment"># print(comment_data)</span></div><div class="line">        save_to_mysql(cursor, db, comment_data)</div><div class="line"></div><div class="line">    db.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_list_urls</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> [<span class="string">'https://movie.douban.com/subject/1292052/reviews?start=%s'</span>%(v) <span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4300</span>, <span class="number">20</span>)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    create_table()</div><div class="line">    list_urls = get_all_list_urls()</div><div class="line">    error_link = []</div><div class="line">    <span class="keyword">for</span> list_url <span class="keyword">in</span> list_urls:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            main_spider(list_url)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            error_link.append(list_url)</div><div class="line">            <span class="keyword">if</span> len(error_link) &gt; <span class="number">10</span>:</div><div class="line">                print(<span class="string">"ERROR!!!"</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">    print(<span class="string">'OK!'</span>)</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu使用]]></title>
      <url>/2017/03/02/Ubuntu%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<h5 id="查看CPU及内存"><a href="#查看CPU及内存" class="headerlink" title="查看CPU及内存"></a>查看CPU及内存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">top</div><div class="line">或者</div><div class="line">sudo apt-get install htop</div><div class="line">htop</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 查看网卡</div><div class="line">ifconfig</div><div class="line"># 查看网络状况</div><div class="line">sudo apt-get install slurm</div><div class="line">slurm -i wlan0    # wlan0是指定的网卡 </div></pre></td></tr></table></figure>
<h5 id="登录到远程服务器"><a href="#登录到远程服务器" class="headerlink" title="登录到远程服务器"></a>登录到远程服务器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -l root 101.200.59.127</div></pre></td></tr></table></figure>
<h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><p>参考<a href="http://www.th7.cn/system/lin/201605/164198.shtml" target="_blank" rel="external">这里</a></p>
<h6 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=路径:$PATH</div></pre></td></tr></table></figure>
<h6 id="用户环境变量"><a href="#用户环境变量" class="headerlink" title="用户环境变量"></a>用户环境变量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gedit  ~/.profile</div><div class="line">export PATH=路径:$PATH</div><div class="line">source .profile</div></pre></td></tr></table></figure>
<h6 id="系统-所有用户-环境变量"><a href="#系统-所有用户-环境变量" class="headerlink" title="系统[所有用户]环境变量"></a>系统[所有用户]环境变量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/profile</div><div class="line">export PATH=路径:$PATH</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h5 id="查看-特定程序-线程"><a href="#查看-特定程序-线程" class="headerlink" title="查看[特定程序]线程"></a>查看[特定程序]线程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -eLf|grep python[指定程序]</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/2.png" alt=""><br>可以看到有三个Python线程在运行。</p>
<p> 关于ps -eLf:<a href="http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu/" target="_blank" rel="external">参考这里</a>：</p>
<blockquote>
<p>输出按顺序为：UID PID PPID LWP C NLWP STIME TTY TIME CMD</p>
<p>LWP　light weight process ID 可以称其为线程ID。<br>NLWP 进程中的线程数number of lwps (threads) in the process。 </p>
</blockquote>
<h5 id="Ubuntu计划任务之crontab"><a href="#Ubuntu计划任务之crontab" class="headerlink" title="Ubuntu计划任务之crontab"></a>Ubuntu计划任务之crontab</h5><p>参考<a href="http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu/" target="_blank" rel="external">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">crontab -e </div><div class="line">30 7 * * * run-parts /home   #每天7：30运行 /home 目录下的所有脚本</div></pre></td></tr></table></figure></p>
<p>具体到执行Python脚本的话参考<a href="http://blog.csdn.net/ybsun2010/article/details/9972403" target="_blank" rel="external">这里</a>，就是如下的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*/2 * * * * python /home/mytask/hello.py &gt;&gt; /home/mytask/hello.py.log 2&gt;&amp;1</div></pre></td></tr></table></figure><br> 即，每两分钟执行/home/mytask目录下的hello.py脚本, 并将执行的log写入hello.py.log文件中。</p>
<p>hello.py如下：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/3.png" alt=""></p>
<p>crontab -e 后的添加：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/4.png" alt=""><br>log文件如下：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/5.png" alt=""></p>
<h5 id="Ubuntu安装中文字体"><a href="#Ubuntu安装中文字体" class="headerlink" title="Ubuntu安装中文字体"></a>Ubuntu安装中文字体</h5><p>参考<a href="http://blog.csdn.net/up_com/article/details/51218458" target="_blank" rel="external">这里</a>.<br>由于我是双系统，直接从win10里面C:/Windows/Fonts/目录下面，将所有字体文件都复制下来到</p>
<blockquote>
<p>/home/shen/Downloads/font</p>
</blockquote>
<p>再用cp命令：</p>
<blockquote>
<p>sudo cp -r /home/shen/Downloads/font /usr/share/fonts/</p>
</blockquote>
<p>最后：</p>
<blockquote>
<p>sudo mkfontscale<br>sudo mkfontdir<br>sudo fc-cache -fv</p>
</blockquote>
<h5 id="为浏览器安装安装flash插件"><a href="#为浏览器安装安装flash插件" class="headerlink" title="为浏览器安装安装flash插件"></a>为浏览器安装安装flash插件</h5><p>之前手动装过一次，最近提示过期，换了种方法安装，参考<a href="http://www.linuxidc.com/Linux/2016-05/131098.htm" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu搭建SS]]></title>
      <url>/2017/03/02/Ubuntu%E6%90%AD%E5%BB%BASS/</url>
      <content type="html"><![CDATA[<p>S1:注册<a href="https://app.arukas.io/" target="_blank" rel="external">arukas</a>帐号</p>
<p>S2:创建SS账户，参考<a href="http://www.iqcni.com/other/12.html" target="_blank" rel="external">这里</a>。</p>
<p>S3：Ubuntu搭建SS客户端的GUI， 参考<a href="http://www.jianshu.com/p/4f6ea97427e9" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>sudo add-apt-repository ppa:hzwhuang/ss-qt5<br>sudo apt-get update<br>sudo apt-get install shadowsocks-qt5</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Anaconda使用笔记]]></title>
      <url>/2017/03/02/Anaconda%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h5 id="conda-search-and-conda-install"><a href="#conda-search-and-conda-install" class="headerlink" title="conda search and conda install"></a>conda search and conda install</h5><p>在我们用conda install 安装包时，可能会出现像下面这种找不到的情况。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/1.png" alt=""><br>这样我们就按照提示操作进行搜索：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/2.png" alt=""><br>这时根据自己的系统找到对应的包进行如下尝试[之所以说尝试是因为，有时候会因依赖冲突等问题安装不成功]，进行安装：</p>
<p>比如我的系统是linux64, 我尝试安装这个版本的包<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/3.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/4.png" alt=""><br>之后就是确认安装了： </p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/5.png" alt=""><br>   打开ipython进行检验： </p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/6.png" alt=""><br>可以看到安装成功。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV识别条形码——python实现[CPP补充]]]></title>
      <url>/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0-CPP%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<p>在之前的<a href="待测文件： 位于与当前cpp文件同目录的data文件夹下 
http://datahonor.com/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0/">这篇文章</a>，仿照教程做了一个条形码识别的程序，不过结果不太理想，就暂时放下，最近继续看OpenCV官方文档，看到了Template Matching，于是动手实验了一下，成功的解决了问题。</p>
<p>环境：ubuntu14.04， OpenCV3.2.0， Clion</p>
<h5 id="data-barcode-jpg"><a href="#data-barcode-jpg" class="headerlink" title="data/barcode.jpg"></a>data/barcode.jpg</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/barcode.jpg" alt=""></p>
<h5 id="data-barcode-temp-png"><a href="#data-barcode-temp-png" class="headerlink" title="/data/barcode_temp.png"></a>/data/barcode_temp.png</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/barcode_temp.png" alt=""></p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/// Function Headers</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatchingMethod</span><span class="params">( <span class="keyword">int</span>, <span class="keyword">void</span>* )</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/** @function main */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/// Load image and template</span></div><div class="line">    img = imread( argv[<span class="number">1</span>], <span class="number">1</span> );</div><div class="line">    templ = imread( argv[<span class="number">2</span>], <span class="number">1</span> );</div><div class="line"></div><div class="line">    <span class="comment">/// Create windows</span></div><div class="line">    namedWindow( image_window, CV_WINDOW_AUTOSIZE );</div><div class="line">    namedWindow( result_window, CV_WINDOW_AUTOSIZE );</div><div class="line"></div><div class="line">    <span class="comment">/// Create Trackbar</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *trackbar_label = <span class="string">"Method: \n 0: SQDIFF \n 1: SQDIFF NORMED \n 2: TM CCORR \n 3: TM CCORR NORMED \n 4: TM COEFF \n 5: TM COEFF NORMED"</span>;</div><div class="line">    createTrackbar( trackbar_label, image_window, &amp;match_method, max_Trackbar, MatchingMethod );</div><div class="line"></div><div class="line">    MatchingMethod( <span class="number">0</span>, <span class="number">0</span> );</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @function MatchingMethod</div><div class="line"> * @brief Trackbar callback</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatchingMethod</span><span class="params">( <span class="keyword">int</span>, <span class="keyword">void</span>* )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/// Source image to display</span></div><div class="line">    Mat img_display;</div><div class="line">    img.copyTo( img_display );</div><div class="line"></div><div class="line">    <span class="comment">/// Create the result matrix</span></div><div class="line">    <span class="keyword">int</span> result_cols =  img.cols - templ.cols + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> result_rows = img.rows - templ.rows + <span class="number">1</span>;</div><div class="line"></div><div class="line">    result.create( result_rows, result_cols, CV_32FC1 );</div><div class="line"></div><div class="line">    <span class="comment">/// Do the Matching and Normalize</span></div><div class="line">    matchTemplate( img, templ, result, match_method );</div><div class="line">    normalize( result, result, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX, <span class="number">-1</span>, Mat() );</div><div class="line"></div><div class="line">    <span class="comment">/// Localizing the best match with minMaxLoc</span></div><div class="line">    <span class="keyword">double</span> minVal; <span class="keyword">double</span> maxVal; Point minLoc; Point maxLoc;</div><div class="line">    Point matchLoc;</div><div class="line"></div><div class="line">    minMaxLoc( result, &amp;minVal, &amp;maxVal, &amp;minLoc, &amp;maxLoc, Mat() );</div><div class="line"></div><div class="line">    <span class="comment">/// For SQDIFF and SQDIFF_NORMED, the best matches are lower values. For all the other methods, the higher the better</span></div><div class="line">    <span class="keyword">if</span>( match_method  == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED )</div><div class="line">    &#123; matchLoc = minLoc; &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123; matchLoc = maxLoc; &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// Show me what you got</span></div><div class="line">    rectangle( img_display, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(<span class="number">0</span>), <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span> );</div><div class="line">    rectangle( result, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(<span class="number">0</span>), <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span> );</div><div class="line"></div><div class="line">    imshow( image_window, img_display );</div><div class="line">    imshow( result_window, result );</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>之后在Clion编译运行：</p>
<blockquote>
<p>cmake .      // 注意空格<br>make<br>./CvTest data/barcode.jpg data/barcode_temp.png    // CvTest是我的项目名称</p>
</blockquote>
<p>运行结果如下： 可通过滑动trackbar选择不同的matching方式<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/barcode-1.jpg" alt=""><br>最后，要注意的是，上面的barcode_temp.png是直接从barcode.jpg中截取的照片，而我们使用的又是以来与Histgram的算法，所以模板图片的大小可能会对其识别有一定的影响，具体改进等继续学习以后再回来补充了。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV识别条形码——python实现]]></title>
      <url>/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>今天看到<a href="http://python.jobbole.com/80448/" target="_blank" rel="external">这篇文章</a>，这里保留核心识别算法，稍微进行一些改动贴在这里学习研究。</p>
<p>环境：Win32, Anaconda3, Spyder, OpenCV3.1.0</p>
<p>文件目录：</p>
<blockquote>
<p>待测试图片文件夹test-imgs<br>核心预测算法实现bar_code.py<br>图片批处理imgs_pro.py </p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><h6 id="bar-code-py"><a href="#bar-code-py" class="headerlink" title="bar_code.py"></a>bar_code.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">Created on Mon Dec 26 21:46:21 2016</div><div class="line"></div><div class="line">@author: Administrator</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment">#image_name = input("Enter the name of the picture:")</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">(image_name)</span>:</span></div><div class="line">    print(<span class="string">"正在识别"</span>+image_name+<span class="string">'...'</span>)</div><div class="line">    <span class="comment"># Load the image and convert it to grayscale</span></div><div class="line">    image = cv2.imread(image_name)</div><div class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">    <span class="comment"># compute the Scharr gradient magnitude representation of the iamges</span></div><div class="line">    <span class="comment"># in both the x and y direction</span></div><div class="line">    <span class="comment"># 原来代码下面是cv2.cv.CV_32F会报错-&gt;AttributeError: module 'cv2' has no attribute 'cv'</span></div><div class="line">    <span class="comment"># 在新版本变为cv2.CV_32F</span></div><div class="line">    gradX = cv2.Sobel(gray, ddepth = cv2.CV_32F, dx = <span class="number">1</span>, dy = <span class="number">0</span>, ksize = <span class="number">-1</span>)</div><div class="line">    gradY = cv2.Sobel(gray, ddepth = cv2.CV_32F, dx = <span class="number">0</span>, dy = <span class="number">1</span>, ksize = <span class="number">-1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># substract the y-gradient from the x-gradient</span></div><div class="line">    gradient = cv2.subtract(gradX, gradY)</div><div class="line">    gradient = cv2.convertScaleAbs(gradient)</div><div class="line"></div><div class="line">    <span class="comment"># blur and threhold the image</span></div><div class="line">    <span class="comment"># 这里(13,13)是kernel matrix size，自己可以改变看看识别效果</span></div><div class="line">    blurred = cv2.blur(gradient, (<span class="number">13</span>, <span class="number">13</span>))</div><div class="line">    <span class="comment"># 这里的阀值200,255也可以根据图片自定义</span></div><div class="line">    (_, thresh) = cv2.threshold(blurred, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</div><div class="line"></div><div class="line">    <span class="comment"># construct a closing kernel and apply it to the thresholded image</span></div><div class="line">    <span class="comment"># (20, 15)也是一个参数，用来获取需要的kernel</span></div><div class="line">    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">20</span>, <span class="number">15</span>))</div><div class="line">    closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)</div><div class="line"></div><div class="line">    <span class="comment"># perform a series of erosions and dilations</span></div><div class="line">    closed = cv2.erode(closed, <span class="keyword">None</span>, iterations = <span class="number">4</span>)</div><div class="line">    closed = cv2.dilate(closed, <span class="keyword">None</span>, iterations = <span class="number">4</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Find the contours in the thresholded image, then sort the contours</span></div><div class="line">    <span class="comment"># by their area, keeping only the largest one</span></div><div class="line">    <span class="comment"># ValueError: too many values to unpack (expected 2)</span></div><div class="line">    (img,cnts, _) = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</div><div class="line">    c = sorted(cnts, key = cv2.contourArea, reverse = <span class="keyword">True</span>)[<span class="number">0</span>]</div><div class="line">    <span class="comment"># compute the rotated bounding box of the largest contour</span></div><div class="line">    rect = cv2.minAreaRect(c)</div><div class="line">    <span class="comment"># 原文这里使用cv2.cv.BoxPoints，新版本已经移除，换为cv2.boxPoints</span></div><div class="line">    box = np.int0(cv2.boxPoints(rect))</div><div class="line"></div><div class="line">    <span class="comment"># draw a bounding box around the detected barcode</span></div><div class="line">    <span class="comment"># and display the image</span></div><div class="line">    cv2.drawContours(image, [box], <span class="number">-1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line">    cv2.imshow(image_name, image)</div><div class="line">    cv2.waitKey(<span class="number">0</span>)</div><div class="line">    print(<span class="string">"Done...\n##################################"</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="imgs-pro-py"><a href="#imgs-pro-py" class="headerlink" title="imgs_pro.py"></a>imgs_pro.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">Created on Mon Dec 26 23:22:01 2016</div><div class="line"></div><div class="line">@author: Administrator</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> bar_code <span class="keyword">import</span> detect</div><div class="line"><span class="comment"># 切换到测试图片文件夹</span></div><div class="line">os.chdir(<span class="string">'test-imgs'</span>)</div><div class="line"><span class="comment"># 找到所有的测试图片文件名</span></div><div class="line">image_names = os.listdir()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> image_name <span class="keyword">in</span> image_names:</div><div class="line">        detect(image_name)</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="test-imgs文件夹"><a href="#test-imgs文件夹" class="headerlink" title="test-imgs文件夹"></a>test-imgs文件夹</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/1.png" alt=""></p>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/4.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/5.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/6.png" alt=""></p>
<p> 开始按照原来的程序识别效果不怎么好，自己调整了几个参数，效果还可以，但是可以看到还是有的识别不出。接下来我们会用OpenCV官方给出的<a href="http://datahonor.com/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0-CPP%E8%A1%A5%E5%85%85/#more">Cpp</a>的例子来纠正这个问题。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度新闻爬虫——多进程抓取]]></title>
      <url>/2017/03/02/%E7%99%BE%E5%BA%A6%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%8A%93%E5%8F%96/</url>
      <content type="html"><![CDATA[<hr>
<p>基于<a href="http://datahonor.com/2017/03/02/%E7%99%BE%E5%BA%A6%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E6%99%AE%E9%80%9A%E6%8A%93%E5%8F%96/">上文</a>的改进，使用进程池抓取。</p>
<p>环境：</p>
<blockquote>
<p>Ubuntu14.04, Pycharm, Anaconda3,<br>MySQL:mysql  Ver 14.14 Distrib 5.5.53, for debian-linux-gnu (x86_64) using readline 6.3</p>
</blockquote>
<p>文件目录：</p>
<blockquote>
<p>MyTools.py 存放获取，解析并储存网页内容的工具函数[和上文的一样]<br>processing_pool.py  单线程普通抓取的实现<br>globalValue.py  新闻条数count的跨文件传递.</p>
</blockquote>
<h5 id="MyTools-py"><a href="#MyTools-py" class="headerlink" title="MyTools.py"></a>MyTools.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> chardet</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># headers = &#123;'User-Agent': "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"&#125;</span></div><div class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36"</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 打开数据库，之后在具体调用后close</span></div><div class="line">db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"数据库密码"</span>, <span class="string">"数据库名称"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">cursor = db.cursor()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：给定新闻类别链接的列表class_urls，获取并储存数据</span></div><div class="line"><span class="comment"># 待实现函数:get_class_data, getdata</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_save_data</span><span class="params">(class_urls)</span>:</span></div><div class="line">    <span class="keyword">for</span> class_url <span class="keyword">in</span> class_urls:</div><div class="line">        class_data = get_class_data(class_url)</div><div class="line">        getdata(class_data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对于每个分类提取单个新闻标题信息class_data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class_data</span><span class="params">(class_url)</span>:</span></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)</div><div class="line">    class_data = requests.get(class_url, headers=headers)</div><div class="line">    pa = re.compile(<span class="string">r'charset=(.*?)"&gt;'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        charset = re.findall(pa, class_data.text)[<span class="number">0</span>]</div><div class="line">        class_data.encoding = charset</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="comment"># class_data.encoding = 'gbk'</span></div><div class="line">    class_data = class_data.text</div><div class="line">    soup = BeautifulSoup(class_data, <span class="string">'lxml'</span>)</div><div class="line">    data = soup.findAll(<span class="string">'a'</span>, &#123;<span class="string">'target'</span>: <span class="string">'_blank'</span>&#125;)</div><div class="line">    class_data = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">        title = data[i].get_text()</div><div class="line">        href = data[i].get(<span class="string">'href'</span>)</div><div class="line">        <span class="comment"># 过滤一些干扰链接</span></div><div class="line">        <span class="keyword">if</span> len(title) &gt; <span class="number">10</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'下载'</span> <span class="keyword">in</span> title:</div><div class="line">                class_data[title] = href</div><div class="line"></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)[<span class="number">0</span>][<span class="number">7</span>:]</div><div class="line"></div><div class="line">    <span class="comment"># 这里返回classname,主要是为了入库方便</span></div><div class="line">    <span class="keyword">return</span> [classname, class_data]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：根据传入的新闻类别的信息class_data, 获取新闻文本并存入数据库</span></div><div class="line"><span class="comment"># 待实现函数：get_news_text</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">(class_data)</span>:</span></div><div class="line">    class_title = class_data[<span class="number">0</span>]</div><div class="line">    class_data = class_data[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> news_title, news_url <span class="keyword">in</span> dict(class_data).items():</div><div class="line"></div><div class="line">        print(news_title)</div><div class="line">        text = get_news_text(news_url)</div><div class="line">        <span class="keyword">if</span> text <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            print(<span class="string">"Got text data..."</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            text = <span class="string">'lost'</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            sql = <span class="string">'INSERT INTO BaiduNews(class, title, text)VALUES(%s,%s,%s)'</span></div><div class="line">            cursor.execute(sql, (class_title, news_title, text))</div><div class="line">            <span class="comment"># 提交事务</span></div><div class="line">            db.commit()</div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'Save fail...'</span>)</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取每条新闻的具体文本内容，粗略抓取</span></div><div class="line"><span class="string">'''</span></div><div class="line">百度新闻的链接是跳转到各个新闻网站的，网站大部分的结构都不同，</div><div class="line">很难做到完全抓取到文本，所以目前只能粗略抓取。</div><div class="line"></div><div class="line">之后会进行pyquery 的 css抓取，有时间会研究下专门的文本抓取算法</div><div class="line">'''</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_news_text</span><span class="params">(href)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = requests.get(href, headers=headers)</div><div class="line">        <span class="comment"># 检测编码</span></div><div class="line">        char = chardet.detect(data.content)</div><div class="line">        data.encoding = char[<span class="string">'encoding'</span>]</div><div class="line">        <span class="comment"># 解析网页</span></div><div class="line">        data = BeautifulSoup(data.text, <span class="string">'lxml'</span>)</div><div class="line">        <span class="comment"># 这里对于同一属性多个值进行匹配</span></div><div class="line">        <span class="comment"># data = BeautifulSoup(data.text,'lxml').find("div", &#123;'class': ['text', 'article', 'content']&#125;)</span></div><div class="line">        data = data.find(<span class="string">"div"</span>, &#123;<span class="string">'class'</span>: re.compile(<span class="string">r"^(text|article|content)$"</span>)&#125;)</div><div class="line">        text = data.get_text()</div><div class="line">        count = globalValue.get_value()</div><div class="line">        print(count)</div><div class="line">        count += <span class="number">1</span></div><div class="line">        globalValue.set_value(count)</div><div class="line"></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        text = <span class="keyword">None</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 邮件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((Header(name,<span class="string">'utf-8'</span>).encode(), addr))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ms</span><span class="params">(T)</span>:</span></div><div class="line">    from_addr = <span class="string">"发件箱，自定义"</span></div><div class="line">    <span class="comment"># 开启QQ邮箱STMP服务的授权码</span></div><div class="line">    <span class="comment"># 参考这里http://jingyan.baidu.com/article/4f7d5712b1ac7c1a201927da.html</span></div><div class="line">    password = <span class="string">'授权码'</span></div><div class="line">    to_addr = <span class="string">'收件箱[需开启STMP服务]'</span></div><div class="line">    smtp_server = <span class="string">'smtp.qq.com'</span></div><div class="line">    msg = MIMEText(T, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">    msg[<span class="string">'From'</span>] = _format_addr(<span class="string">'Anyone'</span>)</div><div class="line">    msg[<span class="string">'To'</span>] = _format_addr(<span class="string">'Echo'</span>)</div><div class="line">    msg[<span class="string">'Subject'</span>] = Header(<span class="string">'The New Report'</span>, <span class="string">'utf-8'</span>).encode()</div><div class="line">    server = smtplib.SMTP_SSL(smtp_server, <span class="number">465</span>, timeout=<span class="number">10</span>)</div><div class="line">    server.set_debuglevel(<span class="number">0</span>)</div><div class="line">    server.login(from_addr,password)</div><div class="line">    server.sendmail(from_addr, [to_addr], msg.as_string())</div><div class="line">    server.quit()</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="processing-pool-py"><a href="#processing-pool-py" class="headerlink" title="processing_pool.py"></a>processing_pool.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">进程池抓取</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> send_email</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> MyTools <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    count = <span class="number">0</span></div><div class="line">    globalValue.set_value(count)</div><div class="line"></div><div class="line">    start = time.time()</div><div class="line">    s = time.ctime()</div><div class="line"></div><div class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"</span>&#125;</div><div class="line">    class_list = [<span class="string">'http://finance.baidu.com/'</span>, <span class="string">'http://internet.baidu.com/'</span>, <span class="string">'http://yule.baidu.com/'</span>,</div><div class="line">                       <span class="string">'http://shipin.news.baidu.com/'</span>]</div><div class="line"></div><div class="line">    data_lists = []</div><div class="line">    <span class="keyword">for</span> class_url <span class="keyword">in</span> class_list:</div><div class="line">        data = get_class_data(class_url)</div><div class="line">        data_lists.append(data)</div><div class="line"></div><div class="line">    pool = Pool(processes=<span class="number">4</span>)</div><div class="line">    pool.map(getdata, data_lists)</div><div class="line">    count = globalValue.get_value()</div><div class="line"></div><div class="line">    pool.close()</div><div class="line">    pool.join()</div><div class="line"></div><div class="line">    db.close()</div><div class="line"></div><div class="line">    end = time.time()</div><div class="line">    e = time.ctime()</div><div class="line"></div><div class="line">    total_time = end - start</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(<span class="string">"processing_pool.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(<span class="string">"\nprocessing_pool抓取\n本次抓取开始于%s,结束于%s,耗时%s\n"</span>%(s, e, total_time))</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="globalValue-py"><a href="#globalValue-py" class="headerlink" title="globalValue.py"></a>globalValue.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(input_value)</span>:</span></div><div class="line">    <span class="keyword">global</span> value</div><div class="line">    value = input_value</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> value</div><div class="line"></div></pre></td></tr></table></figure>
<p> 日志文件：</p>
<p>[可以看到约190秒,较普通抓取有明显的速度提速]<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/baidu/3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度新闻爬虫——普通抓取]]></title>
      <url>/2017/03/02/%E7%99%BE%E5%BA%A6%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E6%99%AE%E9%80%9A%E6%8A%93%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>一个关于百度新闻的爬虫， 分类提取新闻文本。</p>
<p>环境</p>
<blockquote>
<p>Ubuntu14.04, Pycharm, Anaconda3,<br>MySQL:mysql  Ver 14.14 Distrib 5.5.53, for debian-linux-gnu (x86_64) using readline 6.3</p>
</blockquote>
<p>文件目录：</p>
<blockquote>
<p>MyTools.py 存放获取，解析并储存网页内容的工具函数<br>single_thread.py  单线程普通抓取的实现<br>globalValue.py  新闻条数count的跨文件传递，参考<a href="http://www.jianshu.com/p/6cee728f3490" target="_blank" rel="external">这里</a></p>
</blockquote>
<h5 id="MyTools-py"><a href="#MyTools-py" class="headerlink" title="MyTools.py"></a>MyTools.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> chardet</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># headers = &#123;'User-Agent': "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"&#125;</span></div><div class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36"</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 打开数据库，之后在具体调用后close</span></div><div class="line">db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"你的密码"</span>, <span class="string">"USpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">cursor = db.cursor()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：给定新闻类别链接的列表class_urls，获取并储存数据</span></div><div class="line"><span class="comment"># 待实现函数:get_class_data, getdata</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_save_data</span><span class="params">(class_urls)</span>:</span></div><div class="line">    <span class="keyword">for</span> class_url <span class="keyword">in</span> class_urls:</div><div class="line">        class_data = get_class_data(class_url)</div><div class="line">        getdata(class_data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对于每个分类提取单个新闻标题信息class_data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class_data</span><span class="params">(class_url)</span>:</span></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)</div><div class="line">    class_data = requests.get(class_url, headers=headers)</div><div class="line"></div><div class="line">    char = chardet.detect(class_data.content)</div><div class="line">    class_data.encoding = char[<span class="string">'encoding'</span>]</div><div class="line">    <span class="comment"># 解析网页</span></div><div class="line">    class_data = class_data.text</div><div class="line">    soup = BeautifulSoup(class_data, <span class="string">'lxml'</span>)</div><div class="line">    data = soup.findAll(<span class="string">'a'</span>, &#123;<span class="string">'target'</span>: <span class="string">'_blank'</span>&#125;)</div><div class="line">    class_data = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">        title = data[i].get_text()</div><div class="line">        href = data[i].get(<span class="string">'href'</span>)</div><div class="line">        <span class="comment"># 过滤一些干扰链接</span></div><div class="line">        <span class="keyword">if</span> len(title) &gt; <span class="number">10</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'下载'</span> <span class="keyword">in</span> title:</div><div class="line">                class_data[title] = href</div><div class="line"></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)[<span class="number">0</span>][<span class="number">7</span>:]</div><div class="line"></div><div class="line">    <span class="comment"># 这里返回classname,主要是为了入库方便</span></div><div class="line">    <span class="keyword">return</span> [classname, class_data]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：根据传入的新闻类别的信息class_data, 获取新闻文本并存入数据库</span></div><div class="line"><span class="comment"># 待实现函数：get_news_text</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">(class_data)</span>:</span></div><div class="line">    class_title = class_data[<span class="number">0</span>]</div><div class="line">    class_data = class_data[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> news_title, news_url <span class="keyword">in</span> dict(class_data).items():</div><div class="line"></div><div class="line">        print(news_title)</div><div class="line">        text = get_news_text(news_url)</div><div class="line">        <span class="keyword">if</span> text <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            print(<span class="string">"Got text data..."</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            text = <span class="string">'lost'</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            sql = <span class="string">'INSERT INTO BaiduNews(class, title, text)VALUES(%s,%s,%s)'</span></div><div class="line">            cursor.execute(sql, (class_title, news_title, text))</div><div class="line">            <span class="comment"># 提交事务</span></div><div class="line">            db.commit()</div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'Save fail...'</span>)</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取每条新闻的具体文本内容，粗略抓取</span></div><div class="line"><span class="string">'''</span></div><div class="line">百度新闻的链接是跳转到各个新闻网站的，网站大部分的结构都不同，</div><div class="line">很难做到完全抓取到文本，所以目前只能粗略抓取。</div><div class="line"></div><div class="line">之后会进行pyquery 的 css抓取，有时间会研究下专门的文本抓取算法</div><div class="line">'''</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_news_text</span><span class="params">(href)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = requests.get(href, headers=headers)</div><div class="line">        <span class="comment"># 检测编码</span></div><div class="line">        char = chardet.detect(data.content)</div><div class="line">        data.encoding = char[<span class="string">'encoding'</span>]</div><div class="line">        <span class="comment"># 解析网页</span></div><div class="line">        data = BeautifulSoup(data.text, <span class="string">'lxml'</span>)</div><div class="line">        <span class="comment"># 这里对于同一属性多个值进行匹配</span></div><div class="line">        <span class="comment"># data = BeautifulSoup(data.text,'lxml').find("div", &#123;'class': ['text', 'article', 'content']&#125;)</span></div><div class="line">        data = data.find(<span class="string">"div"</span>, &#123;<span class="string">'class'</span>: re.compile(<span class="string">r"^(text|article|content)$"</span>)&#125;)</div><div class="line">        text = data.get_text()</div><div class="line">        count = globalValue.get_value()</div><div class="line">        print(count)</div><div class="line">        count += <span class="number">1</span></div><div class="line">        globalValue.set_value(count)</div><div class="line"></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        text = <span class="keyword">None</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 邮件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((Header(name,<span class="string">'utf-8'</span>).encode(), addr))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ms</span><span class="params">(T)</span>:</span></div><div class="line">    from_addr = <span class="string">"1021550072@qq.com"</span></div><div class="line">    <span class="comment"># 开启QQ邮箱STMP服务的授权码</span></div><div class="line">    <span class="comment"># 参考这里http://jingyan.baidu.com/article/4f7d5712b1ac7c1a201927da.html</span></div><div class="line">    password = <span class="string">'你的密钥'</span></div><div class="line">    to_addr = <span class="string">'1021550072@qq.com'</span></div><div class="line">    smtp_server = <span class="string">'smtp.qq.com'</span></div><div class="line">    msg = MIMEText(T, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">    msg[<span class="string">'From'</span>] = _format_addr(<span class="string">'Anyone'</span>)</div><div class="line">    msg[<span class="string">'To'</span>] = _format_addr(<span class="string">'Echo'</span>)</div><div class="line">    msg[<span class="string">'Subject'</span>] = Header(<span class="string">'The New Report'</span>, <span class="string">'utf-8'</span>).encode()</div><div class="line">    server = smtplib.SMTP_SSL(smtp_server, <span class="number">465</span>, timeout=<span class="number">10</span>)</div><div class="line">    server.set_debuglevel(<span class="number">0</span>)</div><div class="line">    server.login(from_addr,password)</div><div class="line">    server.sendmail(from_addr, [to_addr], msg.as_string())</div><div class="line">    server.quit()</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="single-thread-py"><a href="#single-thread-py" class="headerlink" title="single_thread.py"></a>single_thread.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">from</span> MyTools <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 初始化count，记录抓取的新闻条数</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    globalValue.set_value(count)</div><div class="line"></div><div class="line">    s = time.ctime()</div><div class="line">    start = time.time()</div><div class="line"></div><div class="line">    class_lists = [<span class="string">'http://finance.baidu.com/'</span>, <span class="string">'http://internet.baidu.com/'</span>, <span class="string">'http://yule.baidu.com/'</span>,</div><div class="line">                       <span class="string">'http://shipin.news.baidu.com/'</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 开始抓取</span></div><div class="line">    get_save_data(class_lists)</div><div class="line">    count = globalValue.get_value()</div><div class="line"></div><div class="line">    <span class="comment"># 记得关闭数据库</span></div><div class="line">    db.close()</div><div class="line"></div><div class="line">    end = time.time()</div><div class="line">    e = time.ctime()</div><div class="line">    total_time = end - start</div><div class="line">    print(total_time)</div><div class="line">    print(count)</div><div class="line">    <span class="comment"># 抓取的日志文件</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">"single_thread.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(<span class="string">"\nSingle-thread抓取\n本次抓取开始于%s,结束于%s,耗时%s\n共抓取新闻%s条"</span>%(s, e, total_time, count))</div><div class="line"></div><div class="line">    <span class="comment"># 发送邮件通知，可选</span></div><div class="line">    T = <span class="string">"\nSingle-thread抓取\n本次抓取开始于%s,结束于%s,耗时%s\n共抓取新闻%s条"</span>%(s, e, total_time, count)</div><div class="line"></div><div class="line">    send_ms(T)</div><div class="line">    print(<span class="string">'已成功发送邮件，请查收'</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="globalValue-py"><a href="#globalValue-py" class="headerlink" title="globalValue.py"></a>globalValue.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(input_value)</span>:</span></div><div class="line">    <span class="keyword">global</span> value</div><div class="line">    value = input_value</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> value</div><div class="line"></div></pre></td></tr></table></figure>
<p>日志文件及运行结果[同时会发送邮件到指定邮箱]：<br>[可以看到约400多秒] </p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/baidu/1.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/baidu/2.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[统计学习方法——简单实现KNN[Python]]]></title>
      <url>/2017/03/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0KNN-Python/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第三章笔记。</p>
<p>关于KNN[k-Nearest Neighbors algorithm]的基本知识和实验。</p>
<h5 id="KNN的基本知识"><a href="#KNN的基本知识" class="headerlink" title="KNN的基本知识"></a>KNN的基本知识</h5><p>详情参考<a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm" target="_blank" rel="external">WIKI</a>, 这里我们暂时先研究分类方面的应用。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/1.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/2.png" alt=""></p>
<h5 id="算法的描述："><a href="#算法的描述：" class="headerlink" title="算法的描述："></a>算法的描述：</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/3.png" alt=""></p>
<blockquote>
<p>(1)在K近邻法中，当训练集、距离度量[如欧式距离]、K值及分类决策规则[如多数表决]确定后，对于任一新的输入实例，它所属的类唯一地确定。</p>
<p>  (2)k值的减小就意味着整体模型变得复杂，容易发生过拟合。K一般取较小的值，通常采用交叉验证法来选取最优的K值。</p>
</blockquote>
<h5 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S1--&gt;随机生成训练集并标注</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 模拟对原始数据标注</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(Px, D, classx)</span>:</span></div><div class="line">    <span class="keyword">for</span> px <span class="keyword">in</span> Px:</div><div class="line">        D[tuple(px)] = classx</div><div class="line"></div><div class="line"><span class="comment"># 湖区train_data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_data</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># D 用来储存所有的标注好的实例点</span></div><div class="line">    D = &#123;&#125;</div><div class="line">    P1 = np.random.random((<span class="number">100</span>, <span class="number">2</span>))</div><div class="line">    sign(P1, D, <span class="number">1</span>)</div><div class="line"></div><div class="line">    P2 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) - <span class="number">0.7</span></div><div class="line">    sign(P2, D, <span class="number">2</span>)</div><div class="line"></div><div class="line">    P3 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) + <span class="number">0.7</span></div><div class="line">    sign(P3, D, <span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line">    plt.plot(P1[:, <span class="number">0</span>], P1[:, <span class="number">1</span>], <span class="string">'ro'</span>, label=<span class="string">'class1'</span>, alpha = <span class="number">0.7</span>)</div><div class="line">    plt.plot(P2[:, <span class="number">0</span>], P2[:, <span class="number">1</span>], <span class="string">'go'</span>, label=<span class="string">'class2'</span>, alpha = <span class="number">0.7</span>)</div><div class="line">    plt.plot(P3[:, <span class="number">0</span>], P3[:, <span class="number">1</span>], <span class="string">'bo'</span>, label=<span class="string">'class3'</span>, alpha = <span class="number">0.7</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> D</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S2--&gt; 算法实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_dist</span><span class="params">(px, py)</span>:</span></div><div class="line">        <span class="keyword">return</span> np.linalg.norm(np.array(px)-np.array(py))</div><div class="line"></div><div class="line"><span class="comment"># 按照与待测点距离的大小排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rank</span><span class="params">(D, p0)</span>:</span></div><div class="line">    plt.plot(p0[<span class="number">0</span>], p0[<span class="number">1</span>], <span class="string">'k*'</span>, markersize=<span class="number">15</span>, label=<span class="string">"Test Point"</span>)</div><div class="line">    point_dist = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> px <span class="keyword">in</span> D.keys():</div><div class="line">        point_dist[px] = calc_dist(px, p0)</div><div class="line">    point_dist = pd.Series(point_dist, index=point_dist.keys())</div><div class="line">    point_dist.sort_values(inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> point_dist</div><div class="line"></div><div class="line"><span class="comment"># 获取最近的k个数据点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_knn</span><span class="params">(point_dist, k=<span class="number">1</span>)</span>:</span></div><div class="line">    knn = point_dist[:k].index</div><div class="line">    knn_x = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> list(knn)]</div><div class="line">    knn_y = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> list(knn)]</div><div class="line"></div><div class="line">    plt.plot(knn_x, knn_y, <span class="string">'yo'</span>, markersize=<span class="number">5</span>, label=<span class="string">"k nearest neighbors"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> knn</div><div class="line"></div><div class="line"><span class="comment"># 找到待测点所属的类别</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class</span><span class="params">(knn, D)</span>:</span></div><div class="line">    class_all = [D[point] <span class="keyword">for</span> point <span class="keyword">in</span> knn]</div><div class="line">    <span class="comment"># print(class_all)</span></div><div class="line">    c = Counter(class_all)</div><div class="line">    <span class="comment"># 多数表决</span></div><div class="line">    classx = c.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> classx</div><div class="line"></div><div class="line"><span class="comment"># S3--&gt; 运行测试</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(p0 = <span class="params">(<span class="number">0</span>, <span class="number">1</span>)</span>)</span>:</span></div><div class="line">    D = get_train_data()</div><div class="line">    point_dist = get_rank(D, p0)</div><div class="line">    knn = get_knn(point_dist, <span class="number">3</span>)</div><div class="line">    get_class(knn, D)</div><div class="line">    class_x = get_class(knn, D)</div><div class="line">    print(p0, <span class="string">'所属的类别为：'</span>, class_x)</div><div class="line">    plt.legend()</div><div class="line">    plt.title(<span class="string">'raw knn'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run((<span class="number">0</span>, <span class="number">0.5</span>))</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/4.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/5.png" alt=""></p>
<h5 id="进一步的应用："><a href="#进一步的应用：" class="headerlink" title="进一步的应用："></a>进一步的应用：</h5><p>注意：这里有三个版本的实现，前两个只有在计算距离上有所不同，但是很慢[第二个快些也还是要10min+], 最后一个速度很快，也就1min左右，参考这里。</p>
<h6 id="1-代码way1–-gt-V1-0-大部分继承自上面的方法，速度极其慢"><a href="#1-代码way1–-gt-V1-0-大部分继承自上面的方法，速度极其慢" class="headerlink" title="(1)代码way1–&gt;V1.0[大部分继承自上面的方法，速度极其慢]"></a>(1)代码way1–&gt;V1.0[大部分继承自上面的方法，速度极其慢]</h6><h6 id="2-代码way2–-gt-V2-0-速度有所提升，但是依旧很慢"><a href="#2-代码way2–-gt-V2-0-速度有所提升，但是依旧很慢" class="headerlink" title="(2)代码way2–&gt;V2.0[速度有所提升，但是依旧很慢]"></a>(2)代码way2–&gt;V2.0[速度有所提升，但是依旧很慢]</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line"><span class="comment"># get data from file</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(filepath)</span>:</span></div><div class="line">    data = &#123;&#125;</div><div class="line">    files = os.listdir(os.getcwd()+filepath)</div><div class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</div><div class="line">        classx = file.split(<span class="string">"_"</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">with</span> open(os.getcwd()+filepath+<span class="string">'/'</span>+file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">            key = f.read().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">            data[key] = classx</div><div class="line"></div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="comment"># get training data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_training_data</span><span class="params">()</span>:</span></div><div class="line">    training_data = get_data(<span class="string">"/trainingDigits"</span>)</div><div class="line">    <span class="keyword">return</span> training_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># get test data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_data</span><span class="params">()</span>:</span></div><div class="line">    test_data = get_data(<span class="string">"/testDigits"</span>)</div><div class="line">    <span class="keyword">return</span> test_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S2--&gt; 算法实现</span></div><div class="line"></div><div class="line"><span class="comment"># way1 ---&gt; 速度极其慢</span></div><div class="line"><span class="string">'''</span></div><div class="line">def calc_dist(px, py):</div><div class="line">    px = np.array([float(i) for i in np.array(list(px))])</div><div class="line">    py = np.array([float(i) for i in np.array(list(py))])</div><div class="line"></div><div class="line">    return np.linalg.norm(px-py)</div><div class="line"></div><div class="line"># 按照与待测点距离的大小排序</div><div class="line">def get_rank(training_data, p0):</div><div class="line">    point_dist = &#123;&#125;</div><div class="line">    for px in training_data.keys():</div><div class="line">        point_dist[px] = calc_dist(px, p0)</div><div class="line">    point_dist = pd.Series(point_dist, index=point_dist.keys())</div><div class="line">    point_dist.sort_values(inplace=True)</div><div class="line"></div><div class="line">    return point_dist</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># way2--&gt; 速度有所提高，但也是很慢</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">def calc_dist(training_data, p0):</div><div class="line">    def str2array(p):</div><div class="line">        return np.array([float(i) for i in list(p)])</div><div class="line"></div><div class="line">    numSamples = len(training_data)</div><div class="line">    training_data_pro = [str2array(p) for p in list(training_data.keys())]</div><div class="line">    p0 = str2array(p0)</div><div class="line">    # step1:calculate Euclidean distance</div><div class="line">    # tile(A, reps):Constract an array by repeating A reps times</div><div class="line">    diff = np.matrix(np.tile(p0, (numSamples, 1))) - np.matrix(training_data_pro)</div><div class="line">    squreDiff = np.square(diff)</div><div class="line">    squreDist = np.sum(squreDiff, axis=1)  # sum if performed by row</div><div class="line">    distance = np.sqrt(squreDist)</div><div class="line"></div><div class="line">    distance = [distance[i, 0] for i in range(len(distance))]</div><div class="line">    point_dist = pd.Series(distance, index=training_data.keys())</div><div class="line">    point_dist.sort_values(inplace=True)</div><div class="line"></div><div class="line">    return point_dist</div><div class="line"></div><div class="line"># 按照与待测点距离的大小排序</div><div class="line">def get_rank(training_data, p0):</div><div class="line">    point_dist = calc_dist(training_data, p0)</div><div class="line">    return point_dist</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取最近的k个数据点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_knn</span><span class="params">(point_dist, k=<span class="number">1</span>)</span>:</span></div><div class="line">    knn = point_dist[:k].index</div><div class="line"></div><div class="line">    <span class="keyword">return</span> knn</div><div class="line"></div><div class="line"><span class="comment"># 找到待测点所属的类别</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class</span><span class="params">(knn, training_data)</span>:</span></div><div class="line">    class_all = [training_data[point] <span class="keyword">for</span> point <span class="keyword">in</span> knn]</div><div class="line">    <span class="comment"># print(class_all)</span></div><div class="line">    c = Counter(class_all)</div><div class="line">    <span class="comment"># 多数表决</span></div><div class="line">    classx = c.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> classx</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S3--&gt; 运行测试</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(p0, training_data)</span>:</span></div><div class="line">    point_dist = get_rank(training_data, p0)</div><div class="line">    knn = get_knn(point_dist, <span class="number">3</span>) class_x = get_class(knn, training_data)</div><div class="line">    print(p0, <span class="string">'所属的类别为：'</span>, class_x)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> class_x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    training_data = get_training_data()</div><div class="line">    test_data = get_test_data()</div><div class="line">    right = <span class="number">0</span></div><div class="line">    all = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> test_data.keys():</div><div class="line">        all += <span class="number">1</span></div><div class="line">        print(all)</div><div class="line">        classx = classify(point, training_data)</div><div class="line">        <span class="keyword">if</span> test_data[point] == classx:</div><div class="line">            right += <span class="number">1</span></div><div class="line">    print(<span class="string">"all--&gt;"</span>, all)</div><div class="line">    print(<span class="string">"right--&gt;"</span>, right)</div><div class="line">    print(<span class="string">'accuracy--&gt;'</span>, right/all)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    run()</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="V3-0速度大幅提高"><a href="#V3-0速度大幅提高" class="headerlink" title="V3.0速度大幅提高"></a>V3.0速度大幅提高</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># classify using KNN</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">KNNClassify</span><span class="params">(newInput, dataSet, labels, k)</span>:</span></div><div class="line">    numSamples = dataSet.shape[<span class="number">0</span>]  <span class="comment"># row number</span></div><div class="line">    <span class="comment"># step1:calculate Euclidean distance</span></div><div class="line">    <span class="comment"># tile(A, reps):Constract an array by repeating A reps times</span></div><div class="line">    diff = tile(newInput, (numSamples, <span class="number">1</span>)) - dataSet</div><div class="line">    squreDiff = diff ** <span class="number">2</span></div><div class="line">    squreDist = sum(squreDiff, axis=<span class="number">1</span>)  <span class="comment"># sum if performed by row</span></div><div class="line">    distance = squreDist ** <span class="number">0.5</span></div><div class="line"></div><div class="line">    <span class="comment"># step2:sort the distance</span></div><div class="line">    <span class="comment"># argsort() returns the indices that would sort an array in a ascending order</span></div><div class="line">    sortedDistIndices = argsort(distance)</div><div class="line"></div><div class="line">    classCount = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</div><div class="line">        <span class="comment"># choose the min k distance</span></div><div class="line">        voteLabel = labels[sortedDistIndices[i]]</div><div class="line"></div><div class="line">        <span class="comment"># step4:count the times labels occur</span></div><div class="line">        <span class="comment"># when the key voteLabel is not in dictionary classCount,</span></div><div class="line">        <span class="comment"># get() will return 0</span></div><div class="line">        classCount[voteLabel] = classCount.get(voteLabel, <span class="number">0</span>) + <span class="number">1</span></div><div class="line">    <span class="comment"># step5:the max vote class will return</span></div><div class="line">    maxCount = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> classCount.items():</div><div class="line">        <span class="keyword">if</span> v &gt; maxCount:</div><div class="line">            maxCount = v</div><div class="line">            maxIndex = k</div><div class="line"></div><div class="line">    <span class="keyword">return</span> maxIndex</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># convert image to vector</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vector</span><span class="params">(filename)</span>:</span></div><div class="line">    rows = <span class="number">32</span></div><div class="line">    cols = <span class="number">32</span></div><div class="line">    imgVector = zeros((<span class="number">1</span>, rows * cols))</div><div class="line">    fileIn = open(filename)</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(rows):</div><div class="line">        lineStr = fileIn.readline()</div><div class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(cols):</div><div class="line">            imgVector[<span class="number">0</span>, row * <span class="number">32</span> + col] = int(lineStr[col])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> imgVector</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># load dataSet</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">## step 1: Getting training set</span></div><div class="line">    print(<span class="string">"---Getting training set..."</span>)</div><div class="line">    dataSetDir = <span class="string">'/home/shen/PycharmProjects/MyPython/统计学习方法/KNN/digits/'</span></div><div class="line">    trainingFileList = os.listdir(dataSetDir + <span class="string">'trainingDigits'</span>)  <span class="comment"># load the training set</span></div><div class="line">    numSamples = len(trainingFileList)</div><div class="line"></div><div class="line">    train_x = zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    train_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = trainingFileList[i]</div><div class="line"></div><div class="line">        <span class="comment"># get train_x</span></div><div class="line">        train_x[i, :] = img2vector(dataSetDir + <span class="string">'trainingDigits/%s'</span> % filename)</div><div class="line"></div><div class="line">        <span class="comment"># get label from file name such as "1_18.txt"</span></div><div class="line">        label = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])  <span class="comment"># return 1</span></div><div class="line">        train_y.append(label)</div><div class="line"></div><div class="line">        <span class="comment">## step 2: Getting testing set</span></div><div class="line">    print(<span class="string">"---Getting testing set..."</span>)</div><div class="line">    testingFileList = os.listdir(dataSetDir + <span class="string">'testDigits'</span>)  <span class="comment"># load the testing set</span></div><div class="line">    numSamples = len(testingFileList)</div><div class="line">    test_x = zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    test_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = testingFileList[i]</div><div class="line"></div><div class="line">        <span class="comment"># get train_x</span></div><div class="line">        test_x[i, :] = img2vector(dataSetDir + <span class="string">'testDigits/%s'</span> % filename)</div><div class="line"></div><div class="line">        <span class="comment"># get label from file name such as "1_18.txt"</span></div><div class="line">        label = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])  <span class="comment"># return 1</span></div><div class="line">        test_y.append(label)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> train_x, train_y, test_x, test_y</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># test hand writing class</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testHandWritingClass</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">## step 1: load data</span></div><div class="line">    print(<span class="string">"step 1: load data..."</span>)</div><div class="line">    train_x, train_y, test_x, test_y = loadDataSet()</div><div class="line"></div><div class="line">    <span class="comment">## step 2: training...</span></div><div class="line">    print(<span class="string">"step 2: training..."</span>)</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="comment">## step 3: testing</span></div><div class="line">    print(<span class="string">"step 3: testing..."</span>)</div><div class="line">    numTestSamples = test_x.shape[<span class="number">0</span>]</div><div class="line">    matchCount = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTestSamples):</div><div class="line">        predict = KNNClassify(test_x[i], train_x, train_y, <span class="number">3</span>)</div><div class="line">        <span class="keyword">if</span> predict == test_y[i]:</div><div class="line">            matchCount += <span class="number">1</span></div><div class="line">    accuracy = float(matchCount) / numTestSamples</div><div class="line"></div><div class="line">    <span class="comment">## step 4: show the result</span></div><div class="line">    print(<span class="string">"step 4: show the result..."</span>)</div><div class="line">    print(<span class="string">'The classify accuracy is: %.2f%%'</span> % (accuracy * <span class="number">100</span>))</div><div class="line"></div><div class="line"></div><div class="line">testHandWritingClass()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/6.png" alt=""></p>
<h5 id="要改进学习的地方"><a href="#要改进学习的地方" class="headerlink" title="要改进学习的地方"></a>要改进学习的地方</h5><p>最后参考别人的代码快，感觉主要问题在numpy的矩阵运算上，这个之后要深入研究下，毕竟代码运行速度是极为重要的。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[决策树的简单实现]]></title>
      <url>/2017/03/02/%E5%86%B3%E7%AD%96%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>Coursera课程machine learning data analysis  week1Decision Trees</p>
<p>Python代码：[最后图片部分有些许改动]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier <span class="keyword">import</span> sklearn.metrics</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Data Engineering and Analysis</div><div class="line">"""</div><div class="line"><span class="comment">#Load the dataset</span></div><div class="line"></div><div class="line">AH_data = pd.read_csv(<span class="string">"tree_addhealth.csv"</span>)</div><div class="line"></div><div class="line">data_clean = AH_data.dropna()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 一些常用的命令，整体上描述数据</span></div><div class="line">print(<span class="string">'---------desc-------------'</span>)</div><div class="line"><span class="comment"># print(data_clean.info())</span></div><div class="line"><span class="comment"># print(data_clean.dtypes)</span></div><div class="line">print(data_clean.describe())</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Modeling and Prediction</div><div class="line">"""</div><div class="line"><span class="comment">#Split into training and testing sets</span></div><div class="line"><span class="comment"># 除去TREG1后的24个字段</span></div><div class="line">predictors = data_clean[[<span class="string">'BIO_SEX'</span>,<span class="string">'HISPANIC'</span>,<span class="string">'WHITE'</span>,<span class="string">'BLACK'</span>,<span class="string">'NAMERICAN'</span>,<span class="string">'ASIAN'</span>,</div><div class="line"><span class="string">'age'</span>,<span class="string">'ALCEVR1'</span>,<span class="string">'ALCPROBS1'</span>,<span class="string">'marever1'</span>,<span class="string">'cocever1'</span>,<span class="string">'inhever1'</span>,<span class="string">'cigavail'</span>,<span class="string">'DEP1'</span>,</div><div class="line"><span class="string">'ESTEEM1'</span>,<span class="string">'VIOL1'</span>,<span class="string">'PASSIST'</span>,<span class="string">'DEVIANT1'</span>,<span class="string">'SCHCONN1'</span>,<span class="string">'GPA1'</span>,<span class="string">'EXPEL1'</span>,<span class="string">'FAMCONCT'</span>,<span class="string">'PARACTV'</span>,</div><div class="line"><span class="string">'PARPRES'</span>]]</div><div class="line"></div><div class="line">targets = data_clean.TREG1</div><div class="line"><span class="comment"># 拆分为测试集和训练集</span></div><div class="line">pred_train, pred_test, tar_train, tar_test  =   train_test_split(predictors, targets, test_size=<span class="number">.4</span>)  <span class="comment"># 测试集占数据集的40%</span></div><div class="line"></div><div class="line"><span class="comment"># 查看拆分结果</span></div><div class="line"></div><div class="line">print(<span class="string">'---------shapes------------'</span>)</div><div class="line">print(pred_train.shape)</div><div class="line">print(pred_test.shape)</div><div class="line">print(tar_train.shape)</div><div class="line">print(tar_test.shape)</div><div class="line"></div><div class="line"><span class="comment">#Build model on training data</span></div><div class="line">classifier=DecisionTreeClassifier()</div><div class="line">classifier=classifier.fit(pred_train,tar_train)</div><div class="line"></div><div class="line">predictions=classifier.predict(pred_test)</div><div class="line"></div><div class="line">sklearn.metrics.confusion_matrix(tar_test,predictions)</div><div class="line">sklearn.metrics.accuracy_score(tar_test, predictions)</div><div class="line"></div><div class="line"><span class="comment">#Displaying the decision tree</span></div><div class="line"><span class="keyword">import</span> pydotplus</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"></div><div class="line">out = StringIO()</div><div class="line">tree.export_graphviz(classifier, out_file=out)</div><div class="line">graph=pydotplus.graph_from_dot_data(out.getvalue())</div><div class="line">data = graph.create_png()  <span class="comment"># 图片的二进制数据</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'tree.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(data)</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>遇到的问题：</p>
<blockquote>
<p>InvocationException: GraphViz’s executables not found</p>
</blockquote>
<p>解决：</p>
<blockquote>
<p>pip install graphviz</p>
</blockquote>
<p>这样虽说不报错了，但是图片还是无法显示，于是就做了变动，改为保存图片。<br>tree.png:</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/tree.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle——A Journey through Titanic[Python]]]></title>
      <url>/2017/03/02/Kaggle%E2%80%94%E2%80%94A-Journey-through-Titanic-Python/</url>
      <content type="html"><![CDATA[<p>Kaggle案例一——Titanic——Python分析与预测</p>
<blockquote>
<p>非原创，目前本站Kaggle案例均来自Kaggle官网发布的kernel，这里摘抄下来学习借鉴。</p>
</blockquote>
<h5 id="数据变量描述"><a href="#数据变量描述" class="headerlink" title="数据变量描述"></a>数据变量描述</h5><blockquote>
<p>VARIABLE DESCRIPTIONS:<br>survival        Survival<br>                (0 = No; 1 = Yes)<br>pclass          Passenger Class<br>                (1 = 1st; 2 = 2nd; 3 = 3rd)<br>name            Name<br>sex             Sex<br>age             Age<br>sibsp           Number of Siblings/Spouses Aboard<br>parch           Number of Parents/Children Aboard<br>ticket          Ticket Number<br>fare            Passenger Fare<br>cabin           Cabin<br>embarked        Port of Embarkation<br>                (C = Cherbourg; Q = Queenstown; S = Southampton)</p>
<p>SPECIAL NOTES:<br>Pclass is a proxy for socio-economic status (SES)<br> 1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower</p>
<p>Age is in Years; Fractional if Age less than One (1)<br> If the Age is Estimated, it is in the form xx.5</p>
<p>With respect to the family relation variables (i.e. sibsp and parch)<br>some relations were ignored.  The following are the definitions used<br>for sibsp and parch.</p>
<p>Sibling:  Brother, Sister, Stepbrother, or Stepsister of Passenger Aboard Titanic<br>Spouse:   Husband or Wife of Passenger Aboard Titanic (Mistresses and Fiances Ignored)<br>Parent:   Mother or Father of Passenger Aboard Titanic<br>Child:    Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard Titanic</p>
<p>Other family relatives excluded from this study include cousins,<br>nephews/nieces, aunts/uncles, and in-laws.  Some children travelled<br>only with a nanny, therefore parch=0 for them.  As well, some<br>travelled with very close friends or neighbors in a village, however,<br>the definitions do not support such relations.</p>
</blockquote>
<h5 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Imports</span></div><div class="line"></div><div class="line"><span class="comment"># pandas</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</div><div class="line"></div><div class="line"><span class="comment"># numpy, matplotlib, seaborn</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"><span class="comment"># 设置seaborn默认的绘图样式</span></div><div class="line">sns.set_style(<span class="string">'whitegrid'</span>)</div><div class="line"></div><div class="line"><span class="comment"># machine learning</span></div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC, LinearSVC</div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>关于sns.set_style(‘whitegrid’):<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/1.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># get titanic &amp; test csv files as a DataFrame</span></div><div class="line"><span class="comment"># 获取训练和待预测的数据，导入为DF</span></div><div class="line">titanic_df = pd.read_csv(<span class="string">"/home/shen/PycharmProjects/MyPython/Kaggle/Titanic/train.csv"</span>)</div><div class="line">test_df    = pd.read_csv(<span class="string">"/home/shen/PycharmProjects/MyPython/Kaggle/Titanic/test.csv"</span>)</div><div class="line"></div><div class="line"><span class="comment"># preview the data</span></div><div class="line"><span class="comment"># 预览数据</span></div><div class="line">titanic_df.head()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/2.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">titanic_df.info()</div><div class="line">print(<span class="string">"----------------------------"</span>)</div><div class="line">test_df.info()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/4.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># drop unnecessary columns, these columns won't be useful in analysis and prediction</span></div><div class="line"><span class="comment"># 去除一些无用的列，这种  关注数据的核心信息   在之后还能看到</span></div><div class="line"></div><div class="line">titanic_df = titanic_df.drop([<span class="string">'PassengerId'</span>,<span class="string">'Name'</span>,<span class="string">'Ticket'</span>], axis=<span class="number">1</span>)  <span class="comment"># axis=1,代表列</span></div><div class="line">test_df    = test_df.drop([<span class="string">'Name'</span>,<span class="string">'Ticket'</span>], axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># Embarked</span></div><div class="line"></div><div class="line"><span class="comment"># only in titanic_df, fill the two missing values with the most occurred value, which is "S".</span></div><div class="line"><span class="comment"># 少量非数值缺失值处理的一种方法--&gt;用出现最多的观测值填充</span></div><div class="line">titanic_df[<span class="string">"Embarked"</span>] = titanic_df[<span class="string">"Embarked"</span>].fillna(<span class="string">"S"</span>)</div><div class="line"></div><div class="line"><span class="comment"># plot</span></div><div class="line">sns.factorplot(<span class="string">'Embarked'</span>,<span class="string">'Survived'</span>, data=titanic_df,size=<span class="number">4</span>,aspect=<span class="number">3</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/5.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">fig, (axis1,axis2,axis3) = plt.subplots(<span class="number">1</span>,<span class="number">3</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Embarked',data=titanic_df,kind='count',order=['S','C','Q'],ax=axis1)</span></div><div class="line"><span class="comment"># sns.factorplot('Survived',hue="Embarked",data=titanic_df,kind='count',order=[1,0],ax=axis2)</span></div><div class="line">sns.countplot(x=<span class="string">'Embarked'</span>, data=titanic_df, ax=axis1)</div><div class="line">sns.countplot(x=<span class="string">'Survived'</span>, hue=<span class="string">"Embarked"</span>, data=titanic_df, order=[<span class="number">1</span>,<span class="number">0</span>], ax=axis2)</div><div class="line"></div><div class="line"><span class="comment"># group by embarked, and get the mean for survived passengers for each value in Embarked</span></div><div class="line">embark_perc = titanic_df[[<span class="string">"Embarked"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Embarked'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Embarked'</span>, y=<span class="string">'Survived'</span>, data=embark_perc,order=[<span class="string">'S'</span>,<span class="string">'C'</span>,<span class="string">'Q'</span>],ax=axis3)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/6.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Either to consider Embarked column in predictions,</span></div><div class="line"><span class="comment"># and remove "S" dummy variable, </span></div><div class="line"><span class="comment"># and leave "C" &amp; "Q", since they seem to have a good rate for Survival.</span></div><div class="line"><span class="comment"># 观察到"C", "Q"相比“S”有较高的生存率，所以我们删除S列</span></div><div class="line"></div><div class="line"><span class="comment"># OR, don't create dummy variables for Embarked column, just drop it, </span></div><div class="line"><span class="comment"># because logically, Embarked doesn't seem to be useful in prediction.</span></div><div class="line"><span class="comment"># 或者我们可以直接删除Embarked这一列，它对预测无太大影响</span></div><div class="line"></div><div class="line">embark_dummies_titanic  = pd.get_dummies(titanic_df[<span class="string">'Embarked'</span>])</div><div class="line">embark_dummies_titanic.drop([<span class="string">'S'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">embark_dummies_test  = pd.get_dummies(test_df[<span class="string">'Embarked'</span>])</div><div class="line">embark_dummies_test.drop([<span class="string">'S'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df = titanic_df.join(embark_dummies_titanic)</div><div class="line">test_df    = test_df.join(embark_dummies_test)</div><div class="line"></div><div class="line">titanic_df.drop([<span class="string">'Embarked'</span>], axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Embarked'</span>], axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># Fare</span></div><div class="line"></div><div class="line"><span class="comment"># only for test_df, since there is a missing "Fare" values</span></div><div class="line"><span class="comment"># 少量数值型缺失值的处理方法--&gt;中位数填充</span></div><div class="line">test_df[<span class="string">"Fare"</span>].fillna(test_df[<span class="string">"Fare"</span>].median(), inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># convert from float to int</span></div><div class="line"><span class="comment"># 数据类型的转换</span></div><div class="line">titanic_df[<span class="string">'Fare'</span>] = titanic_df[<span class="string">'Fare'</span>].astype(int)</div><div class="line">test_df[<span class="string">'Fare'</span>]    = test_df[<span class="string">'Fare'</span>].astype(int)</div><div class="line"></div><div class="line"><span class="comment"># get fare for survived &amp; didn't survive passengers</span></div><div class="line"><span class="comment"># 数据分类</span></div><div class="line">fare_not_survived = titanic_df[<span class="string">"Fare"</span>][titanic_df[<span class="string">"Survived"</span>] == <span class="number">0</span>]</div><div class="line">fare_survived     = titanic_df[<span class="string">"Fare"</span>][titanic_df[<span class="string">"Survived"</span>] == <span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># get average and std for fare of survived/not survived passengers</span></div><div class="line"><span class="comment"># 获取典型统计量，更好地描述和观察数据</span></div><div class="line">avgerage_fare = DataFrame([fare_not_survived.mean(), fare_survived.mean()])</div><div class="line">std_fare      = DataFrame([fare_not_survived.std(), fare_survived.std()])</div><div class="line"></div><div class="line"><span class="comment"># plot</span></div><div class="line">titanic_df[<span class="string">'Fare'</span>].plot(kind=<span class="string">'hist'</span>, figsize=(<span class="number">15</span>,<span class="number">3</span>),bins=<span class="number">100</span>, xlim=(<span class="number">0</span>,<span class="number">50</span>))</div><div class="line"></div><div class="line">avgerage_fare.index.names = std_fare.index.names = [<span class="string">"Survived"</span>]</div><div class="line">avgerage_fare.plot(yerr=std_fare,kind=<span class="string">'bar'</span>,legend=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/7.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/8.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Age </span></div><div class="line"></div><div class="line">fig, (axis1,axis2) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">4</span>))</div><div class="line">axis1.set_title(<span class="string">'Original Age values - Titanic'</span>)</div><div class="line">axis2.set_title(<span class="string">'New Age values - Titanic'</span>)</div><div class="line"></div><div class="line"><span class="comment"># axis3.set_title('Original Age values - Test')</span></div><div class="line"><span class="comment"># axis4.set_title('New Age values - Test')</span></div><div class="line"></div><div class="line"><span class="comment"># get average, std, and number of NaN values in titanic_df</span></div><div class="line"><span class="comment"># 训练集中年龄的统计量的获取</span></div><div class="line">average_age_titanic   = titanic_df[<span class="string">"Age"</span>].mean()</div><div class="line">std_age_titanic       = titanic_df[<span class="string">"Age"</span>].std()</div><div class="line">count_nan_age_titanic = titanic_df[<span class="string">"Age"</span>].isnull().sum()</div><div class="line"></div><div class="line"><span class="comment"># get average, std, and number of NaN values in test_df</span></div><div class="line"><span class="comment"># 测试集中年龄的统计量的获取</span></div><div class="line"></div><div class="line">average_age_test   = test_df[<span class="string">"Age"</span>].mean()</div><div class="line">std_age_test       = test_df[<span class="string">"Age"</span>].std()</div><div class="line">count_nan_age_test = test_df[<span class="string">"Age"</span>].isnull().sum()</div><div class="line"></div><div class="line"><span class="comment"># generate random numbers between (mean - std) &amp; (mean + std)</span></div><div class="line"><span class="comment"># 随机获取在均值的一倍标准差内的数据，用于填充大量的数值型缺失值</span></div><div class="line">rand_1 = np.random.randint(average_age_titanic - std_age_titanic, average_age_titanic + std_age_titanic, size = count_nan_age_titanic)</div><div class="line">rand_2 = np.random.randint(average_age_test - std_age_test, average_age_test + std_age_test, size = count_nan_age_test)</div><div class="line"></div><div class="line"><span class="comment"># plot original Age values</span></div><div class="line"><span class="comment"># <span class="doctag">NOTE:</span> drop all null values, and convert to int</span></div><div class="line">titanic_df[<span class="string">'Age'</span>].dropna().astype(int).hist(bins=<span class="number">70</span>, ax=axis1)</div><div class="line"><span class="comment"># test_df['Age'].dropna().astype(int).hist(bins=70, ax=axis1)</span></div><div class="line"></div><div class="line"><span class="comment"># fill NaN values in Age column with random values generated</span></div><div class="line"><span class="comment"># 经典的方法，通过布尔值过滤得到想要的“条件数据”</span></div><div class="line">titanic_df[<span class="string">"Age"</span>][np.isnan(titanic_df[<span class="string">"Age"</span>])] = rand_1</div><div class="line">test_df[<span class="string">"Age"</span>][np.isnan(test_df[<span class="string">"Age"</span>])] = rand_2</div><div class="line"></div><div class="line"><span class="comment"># convert from float to int</span></div><div class="line">titanic_df[<span class="string">'Age'</span>] = titanic_df[<span class="string">'Age'</span>].astype(int)</div><div class="line">test_df[<span class="string">'Age'</span>]    = test_df[<span class="string">'Age'</span>].astype(int)</div><div class="line"></div><div class="line"><span class="comment"># plot new Age Values</span></div><div class="line">titanic_df[<span class="string">'Age'</span>].hist(bins=<span class="number">70</span>, ax=axis2)</div><div class="line"><span class="comment"># test_df['Age'].hist(bins=70, ax=axis4)</span></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/9.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># .... continue with plot Age column</span></div><div class="line"></div><div class="line"><span class="comment"># peaks for survived/not survived passengers by their age</span></div><div class="line">facet = sns.FacetGrid(titanic_df, hue=<span class="string">"Survived"</span>,aspect=<span class="number">4</span>)  <span class="comment"># aspect=4 长宽比4:1</span></div><div class="line">facet.map(sns.kdeplot,<span class="string">'Age'</span>,shade= <span class="keyword">True</span>)</div><div class="line">facet.set(xlim=(<span class="number">0</span>, titanic_df[<span class="string">'Age'</span>].max()))</div><div class="line">facet.add_legend()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/10.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># average survived passengers by age</span></div><div class="line">fig, axis1 = plt.subplots(<span class="number">1</span>,<span class="number">1</span>,figsize=(<span class="number">18</span>,<span class="number">4</span>))</div><div class="line">average_age = titanic_df[[<span class="string">"Age"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Age'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Age'</span>, y=<span class="string">'Survived'</span>, data=average_age)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/11.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Cabin</span></div><div class="line"><span class="comment"># It has a lot of NaN values, so it won't cause a remarkable impact on prediction</span></div><div class="line"><span class="comment"># 这里也是要学习的地方，对于含有大量缺失值，并且对预测无太大影响时，可以直接将其移除</span></div><div class="line">titanic_df.drop(<span class="string">"Cabin"</span>,axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop(<span class="string">"Cabin"</span>,axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 学习的地方，化繁为简，找到关注的重点为是否有家人，而不是具体的父母兄弟等</span></div><div class="line">titanic_df[<span class="string">'Family'</span>] =  titanic_df[<span class="string">"Parch"</span>] + titanic_df[<span class="string">"SibSp"</span>]</div><div class="line">titanic_df[<span class="string">'Family'</span>].loc[titanic_df[<span class="string">'Family'</span>] &gt; <span class="number">0</span>] = <span class="number">1</span></div><div class="line">titanic_df[<span class="string">'Family'</span>].loc[titanic_df[<span class="string">'Family'</span>] == <span class="number">0</span>] = <span class="number">0</span></div><div class="line"><span class="comment"># 测试集和训练集作相同处理</span></div><div class="line">test_df[<span class="string">'Family'</span>] =  test_df[<span class="string">"Parch"</span>] + test_df[<span class="string">"SibSp"</span>]</div><div class="line">test_df[<span class="string">'Family'</span>].loc[test_df[<span class="string">'Family'</span>] &gt; <span class="number">0</span>] = <span class="number">1</span></div><div class="line">test_df[<span class="string">'Family'</span>].loc[test_df[<span class="string">'Family'</span>] == <span class="number">0</span>] = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># drop Parch &amp; SibSp</span></div><div class="line">titanic_df = titanic_df.drop([<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>], axis=<span class="number">1</span>)</div><div class="line">test_df    = test_df.drop([<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>], axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># plot</span></div><div class="line">fig, (axis1,axis2) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,sharex=<span class="keyword">True</span>,figsize=(<span class="number">10</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Family',data=titanic_df,kind='count',ax=axis1)</span></div><div class="line">sns.countplot(x=<span class="string">'Family'</span>, data=titanic_df, order=[<span class="number">1</span>,<span class="number">0</span>], ax=axis1)</div><div class="line"></div><div class="line"><span class="comment"># average of survived for those who had/didn't have any family member</span></div><div class="line">family_perc = titanic_df[[<span class="string">"Family"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Family'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Family'</span>, y=<span class="string">'Survived'</span>, data=family_perc, order=[<span class="number">1</span>,<span class="number">0</span>], ax=axis2)</div><div class="line"></div><div class="line">axis1.set_xticklabels([<span class="string">"With Family"</span>,<span class="string">"Alone"</span>], rotation=<span class="number">0</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/12.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Sex</span></div><div class="line"></div><div class="line"><span class="comment"># As we see, children(age &lt; ~16) on aboard seem to have a high chances for Survival.</span></div><div class="line"><span class="comment"># So, we can classify passengers as males, females, and child</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_person</span><span class="params">(passenger)</span>:</span></div><div class="line">    age,sex = passenger</div><div class="line">    <span class="keyword">return</span> <span class="string">'child'</span> <span class="keyword">if</span> age &lt; <span class="number">16</span> <span class="keyword">else</span> sex</div><div class="line"></div><div class="line">titanic_df[<span class="string">'Person'</span>] = titanic_df[[<span class="string">'Age'</span>,<span class="string">'Sex'</span>]].apply(get_person,axis=<span class="number">1</span>)</div><div class="line">test_df[<span class="string">'Person'</span>]    = test_df[[<span class="string">'Age'</span>,<span class="string">'Sex'</span>]].apply(get_person,axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># No need to use Sex column since we created Person column</span></div><div class="line">titanic_df.drop([<span class="string">'Sex'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Sex'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># create dummy variables for Person column, &amp; drop Male as it has the lowest average of survived passengers</span></div><div class="line">person_dummies_titanic  = pd.get_dummies(titanic_df[<span class="string">'Person'</span>])</div><div class="line">person_dummies_titanic.columns = [<span class="string">'Child'</span>,<span class="string">'Female'</span>,<span class="string">'Male'</span>]</div><div class="line">person_dummies_titanic.drop([<span class="string">'Male'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">person_dummies_test  = pd.get_dummies(test_df[<span class="string">'Person'</span>])</div><div class="line">person_dummies_test.columns = [<span class="string">'Child'</span>,<span class="string">'Female'</span>,<span class="string">'Male'</span>]</div><div class="line">person_dummies_test.drop([<span class="string">'Male'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df = titanic_df.join(person_dummies_titanic)</div><div class="line">test_df    = test_df.join(person_dummies_test)</div><div class="line"></div><div class="line">fig, (axis1,axis2) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Person',data=titanic_df,kind='count',ax=axis1)</span></div><div class="line">sns.countplot(x=<span class="string">'Person'</span>, data=titanic_df, ax=axis1)</div><div class="line"></div><div class="line"><span class="comment"># average of survived for each Person(male, female, or child)</span></div><div class="line">person_perc = titanic_df[[<span class="string">"Person"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Person'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Person'</span>, y=<span class="string">'Survived'</span>, data=person_perc, ax=axis2, order=[<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'child'</span>])</div><div class="line"></div><div class="line">titanic_df.drop([<span class="string">'Person'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Person'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/13.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Pclass</span></div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Pclass',data=titanic_df,kind='count',order=[1,2,3])</span></div><div class="line">sns.factorplot(<span class="string">'Pclass'</span>,<span class="string">'Survived'</span>,order=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], data=titanic_df,size=<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># create dummy variables for Pclass column, &amp; drop 3rd class as it has the lowest average of survived passengers</span></div><div class="line">pclass_dummies_titanic  = pd.get_dummies(titanic_df[<span class="string">'Pclass'</span>])</div><div class="line">pclass_dummies_titanic.columns = [<span class="string">'Class_1'</span>,<span class="string">'Class_2'</span>,<span class="string">'Class_3'</span>]</div><div class="line">pclass_dummies_titanic.drop([<span class="string">'Class_3'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">pclass_dummies_test  = pd.get_dummies(test_df[<span class="string">'Pclass'</span>])</div><div class="line">pclass_dummies_test.columns = [<span class="string">'Class_1'</span>,<span class="string">'Class_2'</span>,<span class="string">'Class_3'</span>]</div><div class="line">pclass_dummies_test.drop([<span class="string">'Class_3'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df.drop([<span class="string">'Pclass'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Pclass'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df = titanic_df.join(pclass_dummies_titanic)</div><div class="line">test_df    = test_df.join(pclass_dummies_test)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/14.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开始预测</span></div><div class="line">   <span class="comment"># define training and testing sets</span></div><div class="line"></div><div class="line">   X_train = titanic_df.drop(<span class="string">"Survived"</span>,axis=<span class="number">1</span>)</div><div class="line">   Y_train = titanic_df[<span class="string">"Survived"</span>]</div><div class="line">   X_test  = test_df.drop(<span class="string">"PassengerId"</span>,axis=<span class="number">1</span>).copy()</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Logistic Regression</span></div><div class="line"></div><div class="line">logreg = LogisticRegression()</div><div class="line">logreg.fit(X_train, Y_train)</div><div class="line">Y_pred = logreg.predict(X_test)</div><div class="line"></div><div class="line">logreg.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/15.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">svc = SVC()</div><div class="line">svc.fit(X_train, Y_train)</div><div class="line">Y_pred = svc.predict(X_test)</div><div class="line">svc.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/16.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Random Forests</span></div><div class="line"></div><div class="line">random_forest = RandomForestClassifier(n_estimators=<span class="number">100</span>)</div><div class="line"></div><div class="line">random_forest.fit(X_train, Y_train)</div><div class="line"></div><div class="line">Y_pred = random_forest.predict(X_test)</div><div class="line"></div><div class="line">random_forest.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/17.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">knn = KNeighborsClassifier(n_neighbors = <span class="number">3</span>)</div><div class="line"></div><div class="line">knn.fit(X_train, Y_train)</div><div class="line"></div><div class="line">Y_pred = knn.predict(X_test)</div><div class="line"></div><div class="line">knn.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/18.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Gaussian Naive Bayes</span></div><div class="line"></div><div class="line">gaussian = GaussianNB()</div><div class="line"></div><div class="line">gaussian.fit(X_train, Y_train)</div><div class="line"></div><div class="line">Y_pred = gaussian.predict(X_test)</div><div class="line"></div><div class="line">gaussian.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/19.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># get Correlation Coefficient for each feature using Logistic Regression</span></div><div class="line">coeff_df = DataFrame(titanic_df.columns.delete(<span class="number">0</span>))</div><div class="line">coeff_df.columns = [<span class="string">'Features'</span>]</div><div class="line">coeff_df[<span class="string">"Coefficient Estimate"</span>] = pd.Series(logreg.coef_[<span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="comment"># preview</span></div><div class="line">coeff_df</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/20.png" alt=""></p>
<h5 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h5><p>关于pd.get_dummies 使用</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/0.png" alt=""></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.kaggle.com/omarelgabry/titanic/a-journey-through-titanic" target="_blank" rel="external"><em>A journey through titanic</em></a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程池与线程池]]></title>
      <url>/2017/03/02/%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<p>一直不太明白进程与线程的具体实现，近日看到<a href="http://468636.kuaizhan.com/63/66/p4020482347ed56" target="_blank" rel="external">这篇文章</a>，算是有了进一步的了解。</p>
<h6 id="关于线程池："><a href="#关于线程池：" class="headerlink" title="关于线程池："></a>关于线程池：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</div><div class="line"></div><div class="line"><span class="comment"># 线程池</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_future_result</span><span class="params">(message)</span>:</span></div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> message</div><div class="line"></div><div class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">2</span>)  <span class="comment"># 创建一个最大可以容纳两个task的线程池</span></div><div class="line">future1 = pool.submit(return_future_result, (<span class="string">'hello'</span>))  <span class="comment"># 向线程池加一个task</span></div><div class="line">future2 = pool.submit(return_future_result, (<span class="string">'world'</span>))  <span class="comment"># 向线程池加一个task</span></div><div class="line">print(future1.done())  <span class="comment"># 判断task1是否结束[sleeping...故线程未完成]</span></div><div class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 主线程sleep 3s使得task2得以完成</span></div><div class="line">print(future2.done())  <span class="comment"># 判断task2是否结束</span></div><div class="line"><span class="comment"># 查看线程结果</span></div><div class="line">print(future1.result())</div><div class="line">print(future2.result())</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>False<br>True<br>hello<br>world</p>
</blockquote>
<p>可以看到当前程序(Pools.py)有一个进程，三个线程被开启：<br>UID PID PPID LWP C NLWP STIME TTY TIME CMD<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/1.png" alt=""></p>
<h6 id="关于进程池："><a href="#关于进程池：" class="headerlink" title="关于进程池："></a>关于进程池：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_future_result</span><span class="params">(message)</span>:</span></div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> message</div><div class="line"></div><div class="line">pool = ProcessPoolExecutor(max_workers=<span class="number">2</span>)  <span class="comment"># 创建一个最大可以容纳两个task的进程池</span></div><div class="line">future1 = pool.submit(return_future_result, (<span class="string">'hello'</span>))  <span class="comment"># 向进程池加一个task</span></div><div class="line">future2 = pool.submit(return_future_result, (<span class="string">'world'</span>))  <span class="comment"># 向进程池加一个task</span></div><div class="line">print(future1.done())  <span class="comment"># 判断task1是否结束</span></div><div class="line">time.sleep(<span class="number">3</span>)</div><div class="line">print(future2.done())  <span class="comment"># 判断task2是否结束</span></div><div class="line"><span class="comment"># 查看线程结果</span></div><div class="line">print(future1.result())</div><div class="line">print(future2.result())</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出；</p>
<blockquote>
<p>False<br>True<br>hello<br>world</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/2.png" alt=""></p>
<h6 id="关于任务的提交："><a href="#关于任务的提交：" class="headerlink" title="关于任务的提交："></a>关于任务的提交：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line">URLS = [<span class="string">'http://httpbin.org'</span>, <span class="string">' http://example.com/'</span>, <span class="string">'http://api.github.com/'</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">with</span> urllib.request.urlopen(url, timeout=<span class="number">60</span>) <span class="keyword">as</span> conn:</div><div class="line">        <span class="keyword">return</span> conn.read()</div><div class="line"></div><div class="line"><span class="comment"># 普通操作</span></div><div class="line"><span class="comment"># We can use a with statement t ensure threads are cleaned up promptly</span></div><div class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</div><div class="line">    <span class="comment"># Start the load operations and mark each future with its URL</span></div><div class="line">    future_to_url = &#123;executor.submit(load_url, url): url <span class="keyword">for</span> url <span class="keyword">in</span> URLS&#125;</div><div class="line">    print(future_to_url)  <span class="comment"># 打印当前任务状态</span></div><div class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(future_to_url):</div><div class="line">        url = future_to_url[future]</div><div class="line">        <span class="comment"># print(future_to_url)  # 打印当前任务状态</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            data = future.result()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line">            print(<span class="string">'%r generated an exception:%s'</span>%(url, exc))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'%r page is %d bytes'</span>%(url ,len(data)))</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/3.png" alt=""><br>这里我们通过submit提交了3个task，并且max_workers=3,所以在全部3个任务提交后，全是running状态， 如果max_workers大于3的话，同样都是running的。但是如果将max_workers设置的小于加入的任务数，那么</p>
<p>将会有任务进入pending状态。<br>如设置max_workers=2, 可以看到最后的任务为pending状态。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/4.png" alt=""></p>
<h6 id="Map的使用："><a href="#Map的使用：" class="headerlink" title="Map的使用："></a>Map的使用：</h6><p>[实现的任务和上面时一样的]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> concurrent.futures</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line">URLS = [<span class="string">'http://httpbin.org'</span>, <span class="string">' http://example.com/'</span>, <span class="string">'http://api.github.com/'</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">with</span> urllib.request.urlopen(url, timeout=<span class="number">60</span>) <span class="keyword">as</span> conn:</div><div class="line">        <span class="keyword">return</span> conn.read()</div><div class="line"></div><div class="line"><span class="comment"># Map</span></div><div class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</div><div class="line">    <span class="keyword">for</span> url, data <span class="keyword">in</span> zip(URLS, executor.map(load_url, URLS)):</div><div class="line">        print(<span class="string">'%r page os %d bytes'</span> % (url, len(data)))</div><div class="line"></div></pre></td></tr></table></figure></p>
<h6 id="wait-使用："><a href="#wait-使用：" class="headerlink" title="wait 使用："></a>wait 使用：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># wait</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait, as_completed</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_after_random_secs</span><span class="params">(num)</span>:</span></div><div class="line">    t = randint(<span class="number">1</span>, <span class="number">5</span>)</div><div class="line">    print(<span class="string">'I will sleep:'</span>, str(t), <span class="string">'s'</span>)</div><div class="line">    sleep(t)</div><div class="line">    <span class="keyword">return</span> <span class="string">'Return of &#123;&#125;'</span>.format(num)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    s = time.time()</div><div class="line">    pool = ThreadPoolExecutor(<span class="number">5</span>)</div><div class="line">    futures = []</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        futures.append(pool.submit(return_after_random_secs, (x)))</div><div class="line"></div><div class="line">    print(wait(futures))  <span class="comment"># 阻塞直到所有线程完成</span></div><div class="line">    <span class="comment"># print(wait(futures, timeout=None, return_when='FIRST_COMPLETED'))</span></div><div class="line">    e = time.time()</div><div class="line"></div><div class="line">    print(<span class="string">'total time--&gt;'</span>, e-s)</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/5.png" alt=""></p>
<p>可以看到，在子线程未完成时，程序一直被阻塞，最后所有的任务都完成时，程序结束运行。<br>如果将：</p>
<blockquote>
<p>print(wait(futures))</p>
</blockquote>
<p>改为：</p>
<blockquote>
<p>print(wait(futures, timeout=None, return_when=’FIRST_COMPLETED’))</p>
</blockquote>
<p>那么，在有一个线程完成时，程序就结束运行：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/6.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Selenium爬取QQ空间说说信息]]></title>
      <url>/2017/03/02/Selenium%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4%E8%AF%B4%E8%AF%B4%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>知乎上看到<a href="https://zhuanlan.zhihu.com/p/25006226" target="_blank" rel="external">这篇文章</a>，就拿来改进运行下。</p>
<p>可能是因为不太会用Selenium，page_source在这里并不能获取到动态加载后的网页数据，所以只能用自带的一系列的find_element. 但是也是出现无法完全抓取的问题，这里就直接放上源码了，有些乱，凑活看看先… </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 屏幕截图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pic</span><span class="params">(pic_name)</span>:</span></div><div class="line">    data = driver.get_screenshot_as_png()</div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">with</span> open(pic_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(data)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">savedata</span><span class="params">(qq, post_data)</span>:</span></div><div class="line">    <span class="comment"># try:</span></div><div class="line">    print(post_data)</div><div class="line">    sql = <span class="string">'INSERT INTO QQSpace(qq, postime, content, star, cmt)VALUES(%s,%s,%s,%s,%s)'</span></div><div class="line">    cursor.execute(sql, (qq, post_data[<span class="number">0</span>], post_data[<span class="number">1</span>], post_data[<span class="number">2</span>], post_data[<span class="number">3</span>]))</div><div class="line">    <span class="comment"># 提交事务</span></div><div class="line">    db.commit()</div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># except:</span></div><div class="line">    <span class="comment">#     print('Save fail...')</span></div><div class="line">    <span class="comment">#     pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">(qq)</span>:</span></div><div class="line">    print(<span class="string">'get data...'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        driver.switch_to.frame(<span class="string">'app_canvas_frame'</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    content = driver.find_elements_by_css_selector(<span class="string">'.content'</span>)  <span class="comment"># div.bd pre.content</span></div><div class="line">    stime = driver.find_elements_by_css_selector(<span class="string">'.c_tx.c_tx3.goDetail'</span>)  <span class="comment"># div.info span.c_tx3 a.c_tx.c_tx3.goDetail</span></div><div class="line">    ft = driver.find_elements_by_class_name(<span class="string">'ft'</span>)</div><div class="line">    print(len(content), len(stime), len(ft))</div><div class="line"></div><div class="line">    <span class="keyword">for</span> con, sti, ft_data <span class="keyword">in</span> zip(content, stime, ft):</div><div class="line">        <span class="comment"># print(ft_data)</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            ft_data = ft_data.text.replace(<span class="string">')'</span>, <span class="string">'('</span>).split(<span class="string">'('</span>)</div><div class="line">            <span class="keyword">if</span> <span class="string">'赞'</span> <span class="keyword">in</span> ft_data[<span class="number">0</span>]:</div><div class="line">                <span class="keyword">if</span> len(ft_data) == <span class="number">3</span>:</div><div class="line">                    star = ft_data[<span class="number">1</span>]</div><div class="line">                    cmt = <span class="keyword">None</span></div><div class="line">                <span class="keyword">elif</span> len(ft_data) == <span class="number">5</span>:</div><div class="line">                    star = ft_data[<span class="number">1</span>]</div><div class="line">                    cmt = ft_data[<span class="number">3</span>]</div><div class="line"></div><div class="line">                <span class="keyword">elif</span> len(ft_data) == <span class="number">7</span>:</div><div class="line">                    star = ft_data[<span class="number">1</span>]</div><div class="line">                    cmt = ft_data[<span class="number">3</span>]</div><div class="line"></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    star = <span class="keyword">None</span></div><div class="line">                    cmt = <span class="keyword">None</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                star = <span class="keyword">None</span></div><div class="line">                cmt = ft_data[<span class="number">1</span>]</div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            star = <span class="keyword">None</span></div><div class="line">            cmt = <span class="keyword">None</span></div><div class="line"></div><div class="line">        post_data = [sti.text, con.text, star, cmt]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            savedata(qq, post_data)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 登录QQ space</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shuoshuo</span><span class="params">(qq)</span>:</span></div><div class="line">    driver.get(<span class="string">'https://user.qzone.qq.com/&#123;&#125;/311'</span>.format(qq))</div><div class="line">    time.sleep(<span class="number">7</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># get_pic('pre_login.png')</span></div><div class="line">        driver.find_element_by_id(<span class="string">'login_div'</span>)</div><div class="line">        a = <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'can not find login_div'</span>)</div><div class="line">        a = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> a == <span class="keyword">True</span>:</div><div class="line">        print(<span class="string">'logining...'</span>)</div><div class="line">        driver.switch_to.frame(<span class="string">'login_frame'</span>)</div><div class="line">        driver.find_element_by_id(<span class="string">'switcher_plogin'</span>).click()</div><div class="line">        driver.find_element_by_id(<span class="string">'u'</span>).clear()  <span class="comment"># 选择用户名框</span></div><div class="line">        driver.find_element_by_id(<span class="string">'u'</span>).send_keys(<span class="string">'QQ号'</span>)</div><div class="line">        driver.find_element_by_id(<span class="string">'p'</span>).clear()</div><div class="line">        driver.find_element_by_id(<span class="string">'p'</span>).send_keys(<span class="string">'QQ密码'</span>)</div><div class="line">        driver.find_element_by_id(<span class="string">'login_button'</span>).click()</div><div class="line"></div><div class="line">        <span class="comment"># get_pic('aft_input.png')</span></div><div class="line">        print(<span class="string">'ok!'</span>)</div><div class="line"></div><div class="line">    driver.implicitly_wait(<span class="number">5</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        driver.find_element_by_id(<span class="string">'QM_OwnerInfo_Icon'</span>)</div><div class="line">        b = <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'can not find QM...'</span>)</div><div class="line">        b = <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> b == <span class="keyword">True</span>:</div><div class="line">        time.sleep(<span class="number">7</span>)</div><div class="line">        getdata(qq)</div><div class="line">        continue_grap = <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> continue_grap == <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                driver.find_element_by_link_text(<span class="string">'下一页'</span>).click()</div><div class="line">                <span class="comment"># print('sleeping...')</span></div><div class="line">                time.sleep(<span class="number">7</span>)</div><div class="line">                getdata(qq)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="comment"># 打开数据库，之后在具体调用后close</span></div><div class="line">    db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"数据库密码"</span>, <span class="string">"SpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = db.cursor()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># 使用selenium</span></div><div class="line">    dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">    dcap[<span class="string">"phantomjs.page.settings.userAgent"</span>] = (</div><div class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0"</span>)</div><div class="line">    driver = webdriver.PhantomJS(<span class="string">'/home/shen/Downloads/phantomjs-2.1.1-linux-x86_64/bin/phantomjs'</span>,</div><div class="line">                                 desired_capabilities=dcap)</div><div class="line">    driver.maximize_window()</div><div class="line"></div><div class="line">    get_shuoshuo(<span class="string">'要抓取的好友QQ号'</span>)</div><div class="line"></div><div class="line">    driver.close()</div><div class="line">    driver.quit()</div><div class="line"></div><div class="line">    db.close() </div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/Screenshot-from-2017-01-26-22-56-33.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
            <tag> Selenium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle——GUNS-DEATHS[Python]]]></title>
      <url>/2017/03/02/Kaggle%E2%80%94%E2%80%94GUNS-DEATHS-Python/</url>
      <content type="html"><![CDATA[<p>Kaggle案例二——Guns Deaths——Python分析</p>
<p>数据集的理解：</p>
<blockquote>
<p>Our data has almost 101,000 rows (gun death incidents) and 10 columns (categories).<br>Here’s an explanation of each column:<br>    this is an identifier column, which contains the row number. It’s common in CSV files to include a unique identifier for each row, but we can ignore it in this analysis.<br>    year: the year in which the fatality occurred.<br>    month: the month in which the fatality occurred.<br>    intent: the intent of the perpetrator of the crime. This can be Suicide, Accidental, NA, Homicide, or Undetermined.<br>    police: whether a police officer was involved with the shooting. Either 0 (false) or 1 (true).<br>    sex: the gender of the victim. Either M or F.<br>    age: the age of the victim.<br>    race: the race of the victim. Either Asian/Pacific Islander, Native American/Native Alaskan, Black, Hispanic, or White.<br>    hispanic: a code indicating the Hispanic origin of the victim.<br>    place: where the shooting occurred. Has several categories, which you’re encouraged to explore on your own.<br>    education: educational status of the victim. Can be one of the following:<br>        1: Less than High School<br>        2: Graduated from High School or equivalent<br>        3: Some College<br>        4: At least graduated from College<br>        5: Not available<br>It’s good practice to get to know our data set before begining to analyze. </p>
</blockquote>
<h6 id="导入数据，清洗并熟悉数据"><a href="#导入数据，清洗并熟悉数据" class="headerlink" title="导入数据，清洗并熟悉数据"></a>导入数据，清洗并熟悉数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">1. Importing, cleaning and getting familiar with the data</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># 导入数据，[为了可读性和易操作性]简单处理，预览数据</span></div><div class="line">guns = pd.read_csv(<span class="string">'guns.csv'</span>, index_col = <span class="number">0</span>)</div><div class="line">print(guns.shape)</div><div class="line">print(guns.head())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/1.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">guns.index.name = <span class="string">'Index'</span></div><div class="line"><span class="comment"># for readability and concistency - capitalizing column names</span></div><div class="line">guns.columns = map(str.capitalize, guns.columns)</div><div class="line">print(guns.head())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/2.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 总体观察数据</span></div><div class="line">print(guns.info())  <span class="comment"># 总体信息</span></div><div class="line">print(guns.dtypes)  <span class="comment"># 变量类型</span></div><div class="line"><span class="comment"># print(guns.describe)  # 数值型变量的一些分=分位数等信息</span></div><div class="line"></div><div class="line"><span class="comment"># 缺失值的处理[这里开始竟然忘了。。。]</span></div><div class="line">print(guns.notnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># In order to see the percentage of valid data:</span></div><div class="line">print(guns.notnull().sum() * <span class="number">100.0</span>/guns.shape[<span class="number">0</span>])</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/3.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Organizing the data by a column value: first by the year, then by month:</span></div><div class="line">guns.sort_values([<span class="string">'Year'</span>, <span class="string">'Month'</span>], inplace=<span class="keyword">True</span>)</div><div class="line">print(guns.head(<span class="number">10</span>))</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/4.png" alt=""></p>
<h6 id="探索并分析数据"><a href="#探索并分析数据" class="headerlink" title="探索并分析数据"></a>探索并分析数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">2. Exploring and analyzing the data [这里我们关注的时Intent]</div><div class="line">'''</div><div class="line">print(guns.Intent.value_counts(ascending=<span class="keyword">False</span>))</div><div class="line"><span class="comment"># Looking at the normalized values makes the picture clearer.</span></div><div class="line"><span class="comment"># Note: 'normalize=False' excludes the 'NaN's where here it includes them</span></div><div class="line">print(guns.Intent.value_counts(ascending=<span class="keyword">False</span>, dropna=<span class="keyword">False</span>, normalize=<span class="keyword">True</span>))</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/5.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/55.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 数值型变量的[分位数]描述</span></div><div class="line">cols = [<span class="string">'Education'</span>, <span class="string">'Age'</span>]</div><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</div><div class="line">    print(col, <span class="string">':'</span>)</div><div class="line">    print(guns[col][guns[col].notnull()].describe())</div><div class="line">    print(<span class="string">'-'</span>*<span class="number">20</span> + <span class="string">'\n'</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/6.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 更多分位数的数据</span></div><div class="line">percentiles = np.arange(<span class="number">0.1</span>, <span class="number">1.1</span>, <span class="number">0.1</span>)</div><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</div><div class="line">    print(col, <span class="string">':'</span>)</div><div class="line">    print(guns[col][guns[col].notnull()].describe(percentiles=percentiles))</div><div class="line">    print(<span class="string">'-'</span>*<span class="number">20</span>, <span class="string">'\n'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/7.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Education</span></div><div class="line"><span class="comment"># Age &lt; 16 数据[关于教育]的处理</span></div><div class="line">print(guns[guns[<span class="string">'Age'</span>] &lt; <span class="number">16</span>].shape)</div><div class="line">print(guns[guns[<span class="string">'Age'</span>] &lt; <span class="number">16</span>].head())</div><div class="line"></div><div class="line">index_temp = guns[(guns[<span class="string">'Age'</span>] &lt; <span class="number">16</span>) &amp; ((guns[<span class="string">'Education'</span>].isnull()) | (guns[<span class="string">'Education'</span>] == <span class="number">5.0</span>))].index</div><div class="line">guns.loc[index_temp, <span class="string">'Education'</span>] = <span class="number">1.0</span></div><div class="line">print(guns[guns.Education.isnull()].shape)</div><div class="line"></div><div class="line">index_temp = guns[guns.Age &lt; <span class="number">5</span>].index</div><div class="line">guns.loc[index_temp, <span class="string">'Education'</span>] = <span class="number">0.0</span></div><div class="line">print(guns[<span class="string">'Education'</span>][guns.Education.notnull()].describe())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/8.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Let's get rid of rows that has '5.0' (Not available) and NaN in the 'education' column:</span></div><div class="line"><span class="comment"># subset = can include a list of column names</span></div><div class="line">guns.dropna(inplace=<span class="keyword">True</span>)</div><div class="line">guns = guns[guns.Education != <span class="number">5.0</span>]</div><div class="line"></div><div class="line">print(guns.Education.value_counts())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/9.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> guns.columns:</div><div class="line">    <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'Age'</span>, <span class="string">''</span>]:</div><div class="line">        print(guns[col].unique())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/10.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 一些实用的处理技巧</span></div><div class="line"><span class="comment"># Year Month</span></div><div class="line"><span class="comment"># evaluating the percentage change between years</span></div><div class="line">n2012 = guns[<span class="number">2012</span> == guns[<span class="string">'Year'</span>]].shape[<span class="number">0</span>]</div><div class="line">(guns.Year.value_counts(sort=<span class="keyword">False</span>) - n2012) * <span class="number">100.</span>/ n2012    </div><div class="line"></div><div class="line"></div><div class="line">nexpected_month = guns.shape[<span class="number">0</span>]/<span class="number">12.</span></div><div class="line">(guns.Month.value_counts(sort=<span class="keyword">True</span>) - nexpected_month) * <span class="number">100.</span>/nexpected_month        </div><div class="line"></div><div class="line">guns.sort_values([<span class="string">'Year'</span>, <span class="string">'Month'</span>], inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/11.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 上面简单通过月份看死亡率不太严谨，接下来考虑闰年和特殊月份天数问题</span></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="comment"># The purpose of *10000 and the *100 are to convert 2012, 01, 01 into 20120101 for readability</span></div><div class="line">guns[<span class="string">'Date'</span>] = pd.to_datetime((guns.Year * <span class="number">10000</span> + guns.Month * <span class="number">100</span> + <span class="number">1</span>).apply(str),format=<span class="string">'%Y%m%d'</span>)</div><div class="line">guns.dtypes.tail(<span class="number">1</span>)</div><div class="line"><span class="comment"># 删除无用的变量，简化数据集[这里Date的引入与在Titanic上对于family的处理是一样的]</span></div><div class="line"><span class="keyword">del</span> guns[<span class="string">'Year'</span>]</div><div class="line"><span class="keyword">del</span> guns[<span class="string">'Month'</span>]</div><div class="line"></div><div class="line"><span class="keyword">import</span> calendar</div><div class="line">monthly_rates = pd.DataFrame(guns.groupby(<span class="string">'Date'</span>).size(), columns=[<span class="string">'Count'</span>])</div><div class="line">monthly_rates.index.to_datetime</div><div class="line">print(monthly_rates.index.dtype)</div><div class="line">print(monthly_rates.shape)</div><div class="line">monthly_rates.head()</div><div class="line"></div><div class="line"><span class="comment"># 计算新列 Days_per_month</span></div><div class="line">days_per_month = []</div><div class="line"><span class="keyword">for</span> val <span class="keyword">in</span> monthly_rates.index:</div><div class="line">    days_per_month.append(calendar.monthrange(val.year, val.month)[<span class="number">1</span>])</div><div class="line">monthly_rates[<span class="string">'Days_per_month'</span>] = days_per_month</div><div class="line">monthly_rates.head()</div><div class="line"></div><div class="line"><span class="comment"># 'Averahe_per_day' 代表各年各月份，平均每天死于gun的人数</span></div><div class="line">monthly_rates[<span class="string">'Average_per_day'</span>] = monthly_rates[<span class="string">'Count'</span>]*<span class="number">1.</span>/monthly_rates[<span class="string">'Days_per_month'</span>]</div><div class="line">print(monthly_rates.shape)</div><div class="line">monthly_rates.tail()</div><div class="line"></div><div class="line"><span class="comment"># 求三年的平均值</span></div><div class="line">month_rate_dict = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</div><div class="line">    bool_temp = monthly_rates.index.month == i</div><div class="line">    month_average = (sum(monthly_rates.loc[bool_temp, <span class="string">'Average_per_day'</span>]))/<span class="number">3.</span></div><div class="line">    month_rate_dict[i] = month_average</div><div class="line"></div><div class="line">avg_month_rate = pd.DataFrame.from_dict(list(month_rate_dict.items()))</div><div class="line">avg_month_rate.columns = [<span class="string">'Month'</span>, <span class="string">'Value'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># calculating the expected cases for each day [+1. becuase 2012 was a leap year]</span></div><div class="line">nexpected_day = guns.shape[<span class="number">0</span>]/(<span class="number">365</span>*<span class="number">3</span> + <span class="number">1.</span>)</div><div class="line"></div><div class="line">avg_month_rate[<span class="string">'Percent_change'</span>] = (avg_month_rate.Value - nexpected_day) * <span class="number">100.</span>/ nexpected_day</div><div class="line">print(avg_month_rate.sort(<span class="string">'Percent_change'</span>))</div><div class="line"></div><div class="line"><span class="comment"># Police</span></div><div class="line"><span class="comment"># 删除无用列[数据无有效的信息]</span></div><div class="line">print(<span class="number">100</span> * guns.Police.value_counts(normalize=<span class="keyword">True</span>))</div><div class="line"><span class="keyword">del</span> guns[<span class="string">'Police'</span>]</div><div class="line">print(guns.shape)</div><div class="line">print(guns.head())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/12.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Race</span></div><div class="line">print(guns.Race.value_counts(sort=<span class="keyword">True</span>, normalize=<span class="keyword">True</span>))</div><div class="line"><span class="comment"># Question: Which race appears the most in the df and which appears the least?</span></div><div class="line"><span class="string">'''</span></div><div class="line">这里的细节值得注意，我们不能因为看到White的case比如较多就认为死于gun的人当中White就最多，</div><div class="line">正如答案所言，在不知道总体人种比例时，我们不能妄下论断</div><div class="line">'''</div><div class="line"><span class="comment"># Answer: We can not conclude anything by those numbers unless we take in account the distribution of races in the US population.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 一些技巧</span></div><div class="line"><span class="comment"># About Sample</span></div><div class="line"><span class="comment"># a sample of about 10% of the data may look like this:</span></div><div class="line">sample_guns = guns.sample(n=<span class="number">10000</span>)</div><div class="line">sample_guns.head()</div><div class="line"></div><div class="line"><span class="comment"># How do you define a categorical columns/pd.Series? </span></div><div class="line"><span class="comment"># E.g please order guns['intent'] by this order: 'Homicide','Suicide','Accidental','Undetermined'</span></div><div class="line"></div><div class="line">list_ordered = [<span class="string">'Homicide'</span>,<span class="string">'Suicide'</span>,<span class="string">'Accidental'</span>,<span class="string">'Undetermined'</span>]</div><div class="line">guns[<span class="string">'Intent'</span>] = guns[<span class="string">'Intent'</span>].astype(<span class="string">'category'</span>)</div><div class="line">guns.Intent.cat.set_categories(list_ordered, inplace=<span class="keyword">True</span>)</div><div class="line">guns.sort_values([<span class="string">'Intent'</span>]).head()</div><div class="line"></div><div class="line"><span class="comment"># 这里Undeterminded对预测Intent无太大作用，删除</span></div><div class="line">guns = guns[guns.Intent != <span class="string">'Undetermined'</span>]</div><div class="line">guns.Intent.value_counts()</div><div class="line"></div><div class="line"><span class="comment"># removing last value in list ordered - which is 'Undetermined'</span></div><div class="line">list_ordered = list_ordered[:<span class="number">-1</span>]</div><div class="line">guns.Intent.cat.set_categories(list_ordered, inplace=<span class="keyword">True</span>)</div><div class="line">guns.Intent.value_counts()</div><div class="line"></div><div class="line"><span class="comment"># **Question:** Given a Series which contains strings, how do you find the length of each of the strings?</span></div><div class="line">guns.Race.str.len().unique()</div><div class="line"></div><div class="line"><span class="comment"># **Question:** For the same series, how do you know if any given entry contains a string segment. E.g: Which entries int the 'intent' column contain the segment 'cide'?</span></div><div class="line">guns.Intent.str.contains(<span class="string">'cide'</span>).sum()</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h6><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/13.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/14.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/15.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/16.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/17.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/18.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/19.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/20.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/21.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/22.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">3. Visualizing the data </div><div class="line">'''</div><div class="line"><span class="comment"># Line Charts / Time analysis</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line">sns.set(style=<span class="string">'white'</span>, color_codes=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2012</span></div><div class="line">plt.plot(monthly_rates.index[:<span class="number">12</span>], monthly_rates[<span class="string">'Count'</span>][:<span class="number">12</span>], </div><div class="line">         linestyle=<span class="string">'--'</span>, linewidth=<span class="number">3.</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># notice the y column in the previous plot begins at 2200; </span></div><div class="line"></div><div class="line"><span class="comment"># Let's look at the real picture from 0 </span></div><div class="line"></div><div class="line">plt.plot(monthly_rates.index[:<span class="number">12</span>], monthly_rates[<span class="string">'Count'</span>][:<span class="number">12</span>],</div><div class="line"></div><div class="line">        linestyle=<span class="string">'--'</span>, linewidth=<span class="number">3.</span>, alpha=<span class="number">0.6</span>)</div><div class="line"></div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=<span class="number">3500</span>)</div><div class="line"></div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line"></div><div class="line">plt.xlabel(<span class="string">'Month'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.ylabel(<span class="string">'Gun Deaths\ncount'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Monthly Gun Death Count in the US, 2012'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line">sns.despine()</div><div class="line"></div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># years 2012 - 2014</span></div><div class="line"></div><div class="line"><span class="comment"># Changing linestyle to a constant line = seeing intersections more clearly</span></div><div class="line"></div><div class="line">fig = plt.figure()</div><div class="line"></div><div class="line">plt.plot(monthly_rates.index.month[<span class="number">0</span>:<span class="number">12</span>], monthly_rates[<span class="string">'Count'</span>][<span class="number">0</span>:<span class="number">12</span>], label=<span class="string">'2012'</span>,</div><div class="line"></div><div class="line">        linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.8</span>)</div><div class="line"></div><div class="line">plt.plot(monthly_rates.index.month[<span class="number">12</span>:<span class="number">24</span>], monthly_rates[<span class="string">'Count'</span>][<span class="number">12</span>:<span class="number">24</span>], label=<span class="string">'2013'</span>,</div><div class="line"></div><div class="line">        linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.8</span>, color=<span class="string">'r'</span>)</div><div class="line"></div><div class="line">plt.plot(monthly_rates.index.month[<span class="number">24</span>:<span class="number">36</span>], monthly_rates[<span class="string">'Count'</span>][<span class="number">24</span>:<span class="number">36</span>], label=<span class="string">'2014'</span>,</div><div class="line"></div><div class="line">        linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.8</span>, color=<span class="string">'g'</span>)</div><div class="line"></div><div class="line">plt.xlim(xmin=<span class="number">1</span>, xmax=<span class="number">12</span>)</div><div class="line"></div><div class="line">plt.ylim(ymax=max(monthly_rates[<span class="string">'Count'</span>])+<span class="number">100</span>)</div><div class="line"></div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line"></div><div class="line">plt.xticks(np.arange(<span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>))</div><div class="line"></div><div class="line">plt.legend(loc=<span class="string">'upper left'</span>, frameon=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">plt.xlabel(<span class="string">'Month'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.ylabel(<span class="string">'Gun Death\nCount'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Monthly Gun Death Count in the US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line">sns.despine()</div><div class="line"></div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># From zero</span></div><div class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</div><div class="line"></div><div class="line">colors = [<span class="string">'b'</span>, <span class="string">'r'</span>, <span class="string">'g'</span>]</div><div class="line">labels = [<span class="string">'2012'</span>, <span class="string">'2013'</span>, <span class="string">'2014'</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(labels)):</div><div class="line">    start_index = i*<span class="number">12</span></div><div class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></div><div class="line">    subset = monthly_rates[start_index:end_index]</div><div class="line">    plt.plot(subset.index.month, subset[<span class="string">'Count'</span>], color=colors[i], label=labels[i],</div><div class="line">            linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.6</span>)</div><div class="line"></div><div class="line">plt.xlim(xmin=<span class="number">1</span>, xmax=<span class="number">12</span>)</div><div class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=max(monthly_rates[<span class="string">'Count'</span>])+<span class="number">100</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.xticks(np.arange(<span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>))</div><div class="line">plt.legend(loc=<span class="string">'center right'</span>, frameon=<span class="keyword">False</span>)</div><div class="line">plt.xlabel(<span class="string">'Month'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.ylabel(<span class="string">'Number of Gun Death Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.title(<span class="string">'Monthly Gun Death Count in the US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Bar plot</span></div><div class="line">intent_sex = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Sex'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Sex'</span>)</div><div class="line">ax = intent_sex.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, alpha=<span class="number">0.7</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.xticks(rotation=<span class="number">0</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax.legend(labels=[<span class="string">'Female'</span>, <span class="string">'Male'</span>], frameon=<span class="keyword">False</span>, loc=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Gender distribution\nGun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 一个不太好的图</span></div><div class="line">intent_edu = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Education'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Education'</span>)</div><div class="line"><span class="comment"># creating a range of 5 colors - from light to dark</span></div><div class="line">edu_legend_labels = [<span class="string">'Less than\nElementry school'</span>,<span class="string">'Less than \nHigh School'</span>, <span class="string">'Graduated from\nHigh School\nor equivalent'</span>, </div><div class="line">                 <span class="string">'Some College'</span>, <span class="string">'At least\ngraduated\nfrom College'</span>]</div><div class="line">colors = plt.cm.GnBu(np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>))</div><div class="line">ax = intent_edu.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, color=colors, width=<span class="number">0.5</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.xticks(rotation=<span class="number">0</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax.legend(edu_legend_labels, ncol=<span class="number">1</span>, frameon=<span class="keyword">False</span>, prop=&#123;<span class="string">'size'</span>:<span class="number">10</span>&#125;, loc=<span class="number">0</span>)</div><div class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=<span class="number">90000</span>)</div><div class="line">plt.title(<span class="string">'Education distribution\n in Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment"># 上图略显拥挤，我们用下面的水平图的进行改进</span></div><div class="line">intent_edu = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Education'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Education'</span>)</div><div class="line">ax = intent_edu.plot(kind=<span class="string">'barh'</span>, figsize=(<span class="number">15</span>,<span class="number">6</span>), stacked=<span class="keyword">True</span>, color=colors, alpha=<span class="number">0.6</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Count'</span>, fontsize=<span class="number">20</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Intent'</span>, fontsize=<span class="number">20</span>)</div><div class="line">ax.legend(edu_legend_labels, loc=<span class="number">0</span>,  prop=&#123;<span class="string">'size'</span>:<span class="number">12</span>&#125;, frameon=<span class="keyword">False</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>, xmax=<span class="number">80000</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Education distribution\nin Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">20</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># the percentage visual is more informative</span></div><div class="line">education = pd.crosstab(guns.Education, guns.Intent)</div><div class="line">education.div(education.sum(<span class="number">1</span>).astype(float), axis=<span class="number">0</span>).plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Intent Percentage by Education'</span>)</div><div class="line">plt.xlabel(<span class="string">'Education level'</span>)</div><div class="line">plt.ylabel(<span class="string">'Percentage'</span>)</div><div class="line">plt.legend(loc=<span class="string">'upper center'</span>, bbox_to_anchor=(<span class="number">1.1</span>,<span class="number">0.9</span>))</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Place</span></div><div class="line">intent_place = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Place'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Place'</span>)</div><div class="line"></div><div class="line">colors = plt.cm.GnBu(np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">20</span>))</div><div class="line"></div><div class="line">ax = intent_place.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>, color=colors, alpha=<span class="number">0.8</span>)</div><div class="line"></div><div class="line">ax.set_xlabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">ax.set_ylabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>, length=<span class="number">0</span>)</div><div class="line"></div><div class="line">ax.legend(loc=<span class="number">0</span>, ncol=<span class="number">2</span>, prop=&#123;<span class="string">'size'</span>:<span class="number">10</span>&#125;, frameon=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Location distribution\nin Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line">sns.despine()</div><div class="line"></div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 归类的思想</span></div><div class="line"><span class="comment">#These are too many categories and it's hard to arrive to conclusions</span></div><div class="line"><span class="comment"># let's merge 'street' with 'trade/service area' and the rest to 'Other'</span></div><div class="line">index_temp = guns[(guns[<span class="string">'Place'</span>] == <span class="string">'Trade/service area'</span>) | (guns.Place == <span class="string">'Industrial/construction'</span>)].index</div><div class="line">guns.loc[index_temp, <span class="string">'Place'</span>] = <span class="string">'Street'</span></div><div class="line">index_temp = guns[(guns[<span class="string">'Place'</span>] != <span class="string">'Street'</span>) &amp; (guns.Place != <span class="string">'Home'</span>)].index</div><div class="line">guns.loc[index_temp, <span class="string">'Place'</span>] = <span class="string">'Other'</span></div><div class="line"></div><div class="line">guns.Place.value_counts()</div><div class="line"></div><div class="line"><span class="comment"># Let's take another look:</span></div><div class="line">intent_place = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Place'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Place'</span>)</div><div class="line">colors = plt.cm.GnBu(np.linspace(<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>))</div><div class="line">ax = intent_place.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>, color=colors, alpha=<span class="number">0.6</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax.legend(loc=<span class="string">'upper right'</span>, prop=&#123;<span class="string">'size'</span>:<span class="number">10</span>&#125;, frameon=<span class="keyword">False</span>)</div><div class="line">plt.title(<span class="string">'Location distribution\nin Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># the percentage visual is more informative</span></div><div class="line">place_died = pd.crosstab(guns.Place, guns.Intent)</div><div class="line">place_died.div(place_died.sum(<span class="number">1</span>).astype(float), axis=<span class="number">0</span>).plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Intent Percentage by Place'</span>)</div><div class="line">plt.xlabel(<span class="string">'Place of death'</span>)</div><div class="line">plt.ylabel(<span class="string">'Percentage'</span>)</div><div class="line">plt.legend(loc=<span class="string">'upper center'</span>, bbox_to_anchor=(<span class="number">1.1</span>,<span class="number">0.9</span>))</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"><span class="comment"># barplot of gender grouped by intent </span></div><div class="line">pd.crosstab(guns.Sex, guns.Intent).plot(kind=<span class="string">'bar'</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Gender Distribution by Intent'</span>)</div><div class="line">plt.xlabel(<span class="string">'Gender'</span>)</div><div class="line">plt.ylabel(<span class="string">'Frequency'</span>)</div><div class="line">plt.legend(loc=<span class="number">0</span>)</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># barplot of education grouped by intent </span></div><div class="line">pd.crosstab(guns.Education, guns.Intent).plot(kind=<span class="string">'bar'</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Education Distribution by Intent'</span>)</div><div class="line">plt.xlabel(<span class="string">'Education'</span>)</div><div class="line">plt.ylabel(<span class="string">'Frequency'</span>)</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Histograms</span></div><div class="line"></div><div class="line">age_freq = guns.Age.value_counts()</div><div class="line">sorted_age_freq = age_freq.sort_index()</div><div class="line">sorted_age_freq.head()</div><div class="line">plt.hist(guns[<span class="string">'Age'</span>], range=(<span class="number">0</span>,<span class="number">107</span>), alpha=<span class="number">0.4</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.ylabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.title(<span class="string">'Age distribution'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>, left=<span class="keyword">True</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Sex and Intent</span></div><div class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">4</span>))</div><div class="line">ax1 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</div><div class="line">ax2 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line">suicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Suicide'</span>]</div><div class="line">homicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Homicide'</span>]</div><div class="line"></div><div class="line">ax1.hist(suicide.Age, <span class="number">20</span>, alpha=<span class="number">0.4</span>)</div><div class="line">ax1.set_title(<span class="string">'Suicide gun deaths\nAge Distribution'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">ax2.hist(homicide.Age, <span class="number">20</span>, alpha=<span class="number">0.4</span>)</div><div class="line">ax2.set_title(<span class="string">'Homicide gun deaths\nAge Distribution'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">ax1.set_xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax2.set_xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax1.set_ylabel(<span class="string">'Frequency'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax2.set_ylabel(<span class="string">'Frequency'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax1.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax2.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax1.set_xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">ax2.set_xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>, left=<span class="keyword">True</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Cross</span></div><div class="line">g = sns.FacetGrid(suicide, col=<span class="string">'Sex'</span>)  </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.05</span>))</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide, col=<span class="string">'Sex'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.05</span>), xlabel=<span class="string">'Age'</span>, ylabel=<span class="string">'Percentage'</span>, )</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Race and age</span></div><div class="line">g = sns.FacetGrid(suicide, col=<span class="string">'Race'</span>)  </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="keyword">None</span>))</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Race comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide, col=<span class="string">'Race'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="keyword">None</span>))</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Race comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># in order to get in in the same order for better comparison:</span></div><div class="line">race_ordered = [<span class="string">'Black'</span>, <span class="string">'White'</span>, <span class="string">'Hispanic'</span>, <span class="string">'Asian/Pacific Islander'</span>, <span class="string">'Native American/Native Alaskan'</span>]</div><div class="line">guns[<span class="string">'Race'</span>] = guns[<span class="string">'Race'</span>].astype(<span class="string">'category'</span>)</div><div class="line">guns.Race.cat.set_categories(race_ordered, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">suicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Suicide'</span>]</div><div class="line">homicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Homicide'</span>]</div><div class="line"></div><div class="line">g = sns.FacetGrid(suicide, col=<span class="string">'Race'</span>)  </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Race comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide, col=<span class="string">'Race'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Race comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># we can ignore education = 0 - since these are all very young ages</span></div><div class="line">g = sns.FacetGrid(suicide[suicide.Education &gt; <span class="number">0</span>], col=<span class="string">'Education'</span>)</div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Education comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide[homicide.Education &gt; <span class="number">0</span>], col=<span class="string">'Education'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Education comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># KDE-PLOT</span></div><div class="line"></div><div class="line"><span class="comment"># limit the x-axis</span></div><div class="line"><span class="comment"># Intent-Age</span></div><div class="line">sns.FacetGrid(guns, hue=<span class="string">'Intent'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>)</div><div class="line">plt.legend(loc=<span class="number">9</span>, frameon=<span class="keyword">False</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>)</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.ylabel(<span class="string">'Density'</span>, fontsize=<span class="number">14</span>)</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.title(<span class="string">'Age distribution\nHomicide vs. Suicide'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Sex-Age</span></div><div class="line">sns.FacetGrid(guns, hue=<span class="string">'Sex'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>).add_legend()</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Age distribution\nMale vs. Female'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Intent:Sex-Age</span></div><div class="line">sns.FacetGrid(suicide, hue=<span class="string">'Sex'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>).add_legend()</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.title(<span class="string">'Suicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.FacetGrid(homicide, hue=<span class="string">'Sex'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>).add_legend()</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Homicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Box plot</span></div><div class="line">fig, ax = plt.subplots()</div><div class="line">data_to_plot = [suicide.Age, homicide.Age]</div><div class="line">plt.xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">plt.boxplot(data_to_plot)</div><div class="line">plt.ylim(ymin=<span class="number">-1</span>, ymax=<span class="number">110</span>)</div><div class="line">plt.xticks([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">'Suicide'</span>, <span class="string">'Homicide'</span>], fontsize=<span class="number">14</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.ylabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.title(<span class="string">'Ages in Suicide vs. Homicide'</span>,</div><div class="line">          fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment">#sns.set(style='ticks')</span></div><div class="line">sns.boxplot(x=<span class="string">'Intent'</span>, y=<span class="string">'Age'</span>, hue=<span class="string">'Sex'</span>, data=guns, palette=<span class="string">'PRGn'</span>, width=<span class="number">0.6</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Violin-plot</span></div><div class="line">sns.violinplot(x=<span class="string">'Intent'</span>, y=<span class="string">'Age'</span>, hue=<span class="string">'Sex'</span>, split=<span class="keyword">True</span>, data=guns, size=<span class="number">4</span>, inner=<span class="string">'quart'</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[QQ空间数据分析报告]]></title>
      <url>/2017/03/02/QQ%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p> 之前呢，写了<a href="http://datahonor.com/2017/03/02/Selenium%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4%E8%AF%B4%E8%AF%B4%E4%BF%A1%E6%81%AF/#more">这个爬虫</a>，从QQ邮箱导出所有QQ联系人后，在本地电脑上放养几天，经过几次refuse，还是爬完了所有的好友的说说资料。数据量约60K+， 但是NA值较多。</p>
<h5 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h5><p>这里呢，简单作下分析。<br>第一步就是从MySQL中把数据以csv格式导出。</p>
<p>参考<a href="http://www.tech-recipes.com/rx/1475/save-mysql-query-results-into-a-text-or-csv-file/" target="_blank" rel="external">这里</a>。开始时，尝试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM QQSpace</div><div class="line">INTO OUTFILE &apos;/home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv&apos;</div><div class="line">FIELDS TERMINATED BY &apos;,&apos;</div><div class="line">ENCLOSED BY &apos;&quot;&apos;</div><div class="line">LINES TERMINATED BY &apos;\n&apos;</div></pre></td></tr></table></figure>
<p>出现权限问题：</p>
<blockquote>
<p>The MySQL server is running with the –secure-file-priv option so it cannot execute this statement</p>
</blockquote>
<p>参考<a href="http://stackoverflow.com/questions/32737478/how-should-i-tackle-secure-file-priv-in-mysql" target="_blank" rel="external">这里</a>解决：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ1.png" alt=""><br>之后先将文件导出到这个文件夹下，再复制到指定文件夹下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /var/lib/mysql-files/data.csv /home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv</div></pre></td></tr></table></figure><br>发现文件时锁定的，在给予权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 777 /home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv</div></pre></td></tr></table></figure></p>
<h5 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h5><p>至此，算是将数据从数据库导出，接下来开始用Python作分析</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 导入数据</span></div><div class="line">data = pd.read_csv(<span class="string">'/home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv'</span>, error_bad_lines=<span class="keyword">False</span>） <span class="comment"># drop bad lines</span></div><div class="line">data.columns = [<span class="string">'Qq'</span>, <span class="string">'Date'</span>, <span class="string">'Content'</span>, <span class="string">'Star'</span>, <span class="string">'Comment'</span>]</div><div class="line"><span class="comment"># 预览数据，检查有无编码等问题</span></div><div class="line">print(data.head())</div><div class="line">print(data.shape)</div><div class="line">print(data.dtypes)</div><div class="line"><span class="comment"># 因当中有过测试性的抓取，所以可能存在重复数据，这里先去重</span></div><div class="line">data = data.drop_duplicates()</div><div class="line"></div><div class="line"><span class="comment"># 查看缺失值</span></div><div class="line">print(data.isnull().sum())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ2.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ4.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ5.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 我们首先统一分析</span></div><div class="line">Date = data[<span class="string">'Date'</span>]</div><div class="line">Content = data[<span class="string">'Content'</span>]</div><div class="line">Star = data[<span class="string">'Star'</span>]</div><div class="line">Comment = data[<span class="string">'Comment'</span>]</div></pre></td></tr></table></figure>
<p>  日期的分析：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Date</span></div><div class="line">Date = pd.DataFrame(Date)</div><div class="line">print(Date.shape[<span class="number">0</span>])</div><div class="line">Date.isnull().sum()</div><div class="line">Date  = Date.dropna()</div><div class="line"><span class="comment"># 对日期的处理，定义统一格式的函数</span></div><div class="line"><span class="string">'''</span></div><div class="line">2016年09月09日</div><div class="line">2017年1月1日</div><div class="line">昨天18:03  这种格式一般为最近几天，数量较少，暂时忽略不去处理</div><div class="line">'''</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">datesplit</span><span class="params">(date)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        year = date.split(<span class="string">'年'</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line">        month = date.split(<span class="string">'年'</span>)[<span class="number">1</span>].split(<span class="string">'月'</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">if</span> ((int(month) &lt; <span class="number">10</span>) &amp; (<span class="string">'0'</span> <span class="keyword">not</span> <span class="keyword">in</span> month)):</div><div class="line">            month = <span class="string">'0'</span> + month</div><div class="line"></div><div class="line">        day = date.split(<span class="string">'年'</span>)[<span class="number">1</span>].split(<span class="string">'月'</span>)[<span class="number">1</span>].replace(<span class="string">'日'</span>, <span class="string">''</span>)</div><div class="line">        <span class="keyword">if</span> ((int(day) &lt; <span class="number">10</span>) &amp; (<span class="string">'0'</span> <span class="keyword">not</span> <span class="keyword">in</span> day)):</div><div class="line">            day = <span class="string">'0'</span> + day</div><div class="line">        sdate = int(int(year)*<span class="number">10000</span>+int(month)*<span class="number">100</span>+int(day))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="comment"># print(date)</span></div><div class="line">        <span class="keyword">return</span> [<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>]</div><div class="line">    <span class="keyword">return</span> [year, month, day, sdate]</div><div class="line"></div><div class="line"></div><div class="line">Date[<span class="string">'Year'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">0</span>])</div><div class="line">Date[<span class="string">'Month'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">1</span>])</div><div class="line">Date[<span class="string">'Day'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">2</span>])</div><div class="line">Date[<span class="string">'SDate'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">3</span>])</div><div class="line"></div><div class="line">Date = Date.dropna()  <span class="comment"># 去除废弃时间格式的数据</span></div><div class="line">Date[<span class="string">'SDate'</span>] = Date[<span class="string">'SDate'</span>].astype(int)</div><div class="line">print(Date.head())</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ6.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Date[<span class="string">'Date'</span>] = pd.to_datetime(Date[<span class="string">'SDate'</span>], format=<span class="string">'%Y%m%d'</span>)  <span class="comment"># 格式化为标准时间格式</span></div><div class="line"><span class="keyword">del</span> Date[<span class="string">'SDate'</span>] <span class="comment"># 删掉无用列</span></div><div class="line">print(Date.head())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ7.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Year,Month, Day</span></div><div class="line">sns.countplot(<span class="string">'Year'</span>, data=Date)</div><div class="line">plt.show()</div><div class="line"></div><div class="line">sns.countplot(<span class="string">'Month'</span>, data=Date)</div><div class="line">plt.show()</div><div class="line"></div><div class="line">sns.countplot(<span class="string">'Day'</span>, data=Date)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>从年份看，还是很平均的，因为2017时刚开始，数据本来就是很少的。至于2010前比较少，可能和大部分人喜欢删之前的说说有关.<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ8.png" alt=""></p>
<p>  月份上，7，8月比较高，猜测和之前在博客园写的超级课程表的分析时原因类似的，就是，7，8月为暑假，大家对学习关注较少，而游玩的较多，所以经常会发些旅游的动态。或是在家里闲得无聊，发说说也会比较多。</p>
<p>至于3,4,5月份数量较少[闰年二月天数少的影响在此可忽略]，就不太明白了，沉迷学习？ 🙂<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ9.png" alt=""><br>天数上看，大家还是“风雨无阻”的，31少也是必然的，毕竟1，3，5，7。。。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ10.png" alt=""></p>
<p>看了上面的图感觉都很平均的orz…<br>这里附上一张超级课程表分析时的一张图:<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ11.png" alt=""><br>与之比较，我们重新将月份整理为折线图：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 与超级课程表相比较</span></div><div class="line">plt.plot(Date.groupby(<span class="string">'Month'</span>).size(), linestyle=<span class="string">'-'</span>)</div><div class="line">plt.xlim(xmin=<span class="number">1</span>)</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Month'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ12.png" alt=""></p>
<p>貌似有点类似负相关的关系哦…<br>当我尝试进行年份[根据以上分析选取12-16年数据]比较时，发现了一个问题：没有出现预期的走势一致性.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 各个年份的比较[12-16]</span></div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].shape[<span class="number">0</span>], label=<span class="string">'2012'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].shape[<span class="number">0</span>], label=<span class="string">'2013'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].shape[<span class="number">0</span>], label=<span class="string">'2014'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].shape[<span class="number">0</span>], label=<span class="string">'2015'</span>) </div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].shape[<span class="number">0</span>], label=<span class="string">'2016'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ13.png" alt=""></p>
<p> 这张图有些乱，我们分开来做图，先做12-14年的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].shape[<span class="number">0</span>], label=<span class="string">'2012'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].shape[<span class="number">0</span>], label=<span class="string">'2013'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].shape[<span class="number">0</span>], label=<span class="string">'2014'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ14.png" alt=""><br>可以看到，12-14年走势基本上是一致的，但是14年出现较大的不同。<br>再作出14-16的图看下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].shape[<span class="number">0</span>], label=<span class="string">'2014'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].shape[<span class="number">0</span>], label=<span class="string">'2015'</span>) </div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].shape[<span class="number">0</span>], label=<span class="string">'2016'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ15.png" alt=""><br>看到变化更大了，15尚且出现较大的峰值，到了16年，竟然变得近似平稳了…16年似乎欠我们个峰值…仔细想下，这可能和微信的崛起有关。查了下<a href="http://mt.sohu.com/20150723/n417406422.shtml" target="_blank" rel="external">资料</a>，14年春晚使用微信红包后微信开始迅速崛起，并于15年强势和QQ抗衡，并且微信发展速度明显超越QQ。所以16年QQ空间欠我们的峰值，可能跑去了微信朋友圈orz…<br>继续分析，我们来看下，一年中哪些特别的峰值。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一年中的特特殊的日子</span></div><div class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">6</span>))</div><div class="line">plt.subplot(<span class="number">131</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]==<span class="string">'2012'</span>].groupby(<span class="string">'Date'</span>).size())</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line"></div><div class="line">plt.subplot(<span class="number">132</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]==<span class="string">'2013'</span>].groupby(<span class="string">'Date'</span>).size())</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line"></div><div class="line">plt.subplot(<span class="number">133</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]==<span class="string">'2014'</span>].groupby(<span class="string">'Date'</span>).size())</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line"></div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ16.png" alt=""></p>
<p>可以看到，2月初到中旬的情人节，暑假开始7月，开学季9月，国庆节10月都或多或少出现一些峰值[可能是爬虫漏爬的问题，这里不是特别明显]</p>
<p>接下来分析说说的文本内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态内容，文本分析</span></div><div class="line">Content = pd.DataFrame(Content.astype(str))</div><div class="line">Content.columns = [<span class="string">'content'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 说说长度</span></div><div class="line">Content[<span class="string">'length'</span>] = Content[<span class="string">'content'</span>].apply(len)</div><div class="line"><span class="comment"># 大体观察，看有无异常值</span></div><div class="line">plt.plot(Content[<span class="string">'length'</span>])</div><div class="line">plt.show()</div><div class="line"><span class="comment"># 发现一个异常值，去除异常值并填充</span></div><div class="line">Content[<span class="string">'length'</span>][Content[<span class="string">'length'</span>] &gt; <span class="number">1000</span>] = Content[<span class="string">'length'</span>].mean()</div><div class="line"><span class="comment"># 再次观察</span></div><div class="line">plt.plot(Content[<span class="string">'length'</span>])</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ17.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ18.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 上图仅仅是为了观察异常值，这里我们具体观察说说长度</span></div><div class="line"><span class="comment"># 取长度在4倍标准差之内的数据</span></div><div class="line">ctmean = Content[<span class="string">'length'</span>].mean()</div><div class="line">ctstd = Content[<span class="string">'length'</span>].std()</div><div class="line">foursigma = Content[(ctmean<span class="number">-4</span>*ctstd&lt;Content[<span class="string">'length'</span>]) &amp; (Content[<span class="string">'length'</span>]&lt;ctmean+<span class="number">4</span>*ctstd)]</div><div class="line">plt.hist(foursigma[<span class="string">'length'</span>])</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Length'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ19.png" alt=""></p>
<p>可以看到，大部分的说说都是不超过50字的…这才是典型的快餐文化嘛:-)</p>
<p>接着我们来做个简单的情感分析，通过调用Boson公司的API</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 之前没考虑到根据QQ号来分类，这里重新获取</span></div><div class="line">Content = data[[<span class="string">'Qq'</span>, <span class="string">'Content'</span>]]</div><div class="line">Content = Content.dropna()</div><div class="line"></div><div class="line"></div><div class="line">print(Content[<span class="string">'Qq'</span>].unique())</div><div class="line"><span class="comment"># 发现有些QQ号被误填为其他文字，用相邻[上一个]QQ号填充</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Content[<span class="string">'Qq'</span>]).index):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i]] = int(Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i]])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line"></div><div class="line">        Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i]] = int(Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i<span class="number">-1</span>]])</div><div class="line"></div><div class="line">print(Content[<span class="string">'Qq'</span>].unique())</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 情感分析</span></div><div class="line">emotion = &#123;&#125;</div><div class="line">nlp = BosonNLP(<span class="string">'你的密钥'</span>)   </div><div class="line"></div><div class="line">qq_cont = (Content.groupby(<span class="string">'Qq'</span>)[<span class="string">'Content'</span>])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(qq_cont)):</div><div class="line">    qq = list(Content.groupby(<span class="string">'Qq'</span>)[<span class="string">'Content'</span>])[i][<span class="number">0</span>]</div><div class="line">    contents = list(list(Content.groupby(<span class="string">'Qq'</span>)[<span class="string">'Content'</span>])[i][<span class="number">1</span>])</div><div class="line">    text = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> contents:</div><div class="line">        text += content</div><div class="line"></div><div class="line">    grade = nlp.sentiment(text)[<span class="number">0</span>]</div><div class="line">    emotion[str(qq)] = grade</div><div class="line">    print(grade)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 正面，负面情绪 </span></div><div class="line">positive = []</div><div class="line">negative = []</div><div class="line"><span class="keyword">for</span> e <span class="keyword">in</span> emotion.values():</div><div class="line">    positive.append(e[<span class="number">0</span>])</div><div class="line">    negative.append(e[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<p>简单的可视化：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">p1 = plt.subplot(<span class="number">121</span>)</div><div class="line">plt.hist(positive)</div><div class="line">p1.set_title(<span class="string">'Positive'</span>)</div><div class="line"></div><div class="line">p2 = plt.subplot(<span class="number">122</span>)</div><div class="line">plt.hist(negative)</div><div class="line">p2.set_title(<span class="string">'Negative'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ20.png" alt=""><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LogNorm</div><div class="line"></div><div class="line">plt.hist2d(positive, negative, norm=LogNorm())</div><div class="line">plt.xlabel(<span class="string">'Positive'</span>)</div><div class="line">plt.ylabel(<span class="string">'Negative'</span>)</div><div class="line">plt.title(<span class="string">'Emotion'</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">plt.colorbar()</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ21.png" alt=""></p>
<p>哈哈，还是开心看到大家都是非常乐观的:-)</p>
<p>继续，我们来提取下关键词。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 关键词提取</span></div><div class="line">WeightWord = &#123;&#125;</div><div class="line">KEYWORDS_URL = <span class="string">'http://api.bosonnlp.com/keywords/analysis'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> cont <span class="keyword">in</span> ContentDict.values():</div><div class="line">    text = cont</div><div class="line">    params = &#123;<span class="string">'top_k'</span>: <span class="number">5</span>&#125;</div><div class="line">    data = json.dumps(text)</div><div class="line">    headers = &#123;<span class="string">'X-Token'</span>: <span class="string">'你的密钥'</span>&#125;</div><div class="line">    print(<span class="string">'requesting...'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        resp = requests.post(KEYWORDS_URL, headers=headers, params=params, data=data.encode(<span class="string">'utf-8'</span>), timeout=<span class="number">5</span>)</div><div class="line">        print(resp.json())</div><div class="line">        <span class="keyword">for</span> weight, word <span class="keyword">in</span> resp.json():</div><div class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> WeightWord.keys():</div><div class="line">                WeightWord[word] = weight</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'Hit...'</span>)</div><div class="line">                WeightWord[word] += weight</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">        </div><div class="line"><span class="comment"># 关键词排序</span></div><div class="line">SortedValue = [v <span class="keyword">for</span> v <span class="keyword">in</span> sorted(WeightWord.values())]</div><div class="line">ValueWord = &#123;&#125;</div><div class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> WeightWord.items():</div><div class="line">    ValueWord[str(value)] = key</div><div class="line"></div><div class="line">SortedValue_top100 = SortedValue[<span class="number">-100</span>:][::<span class="number">-1</span>]</div><div class="line">SortedWord = [ValueWord[str(k)] <span class="keyword">for</span> k <span class="keyword">in</span> SortedValue_top100]</div><div class="line"></div></pre></td></tr></table></figure></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ22.png" alt=""></p>
<p>这是用Boson公司的API做的，我们接下来用结巴分词并用wordcloud做个词云看看吧:-)[参考<a href="https://www.oschina.net/code/snippet_2294527_56155" target="_blank" rel="external">这里</a>]</p>
<p>我这里用的Ubuntu16.04，没有中文字体，安装字体参考<a href="http://blog.csdn.net/up_com/article/details/51218458" target="_blank" rel="external">这里</a>。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 关键词词云</span></div><div class="line"><span class="keyword">import</span> jieba</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"></div><div class="line">mylist = list(ContentDict.values())   </div><div class="line"></div><div class="line">word_list = [<span class="string">" "</span>.join(jieba.cut(sentence)) <span class="keyword">for</span> sentence <span class="keyword">in</span> mylist]</div><div class="line">new_text = <span class="string">' '</span>.join(word_list)</div><div class="line"></div><div class="line"></div><div class="line">pic_path = <span class="string">'/home/shen/CLionProjects/MyCv/QQ.jpg'</span></div><div class="line">mang_mask = imread(pic_path)</div><div class="line"></div><div class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</div><div class="line">wordcloud = WordCloud(background_color=<span class="string">"white"</span>, font_path=<span class="string">'/home/shen/Downloads/font/msyh.ttc'</span>, mask=mang_mask).generate(new_text)</div><div class="line">plt.imshow(wordcloud)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>]<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ23.png" alt=""><br>嗯，这张图用了QQ图标做的mask,还是挺有意思的。<br><br>那么，我们接下来分析下说说关注的话题看看。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 说说文本分类</span></div><div class="line">CLASSIFY_URL = <span class="string">'http://api.bosonnlp.com/classify/analysis'</span></div><div class="line">TextClass = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(mylist)):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = json.dumps(mylist[i])</div><div class="line">        headers = &#123;<span class="string">'X-Token'</span>: <span class="string">'你的密钥'</span>&#125;</div><div class="line">        resp = requests.post(CLASSIFY_URL, headers=headers, data=data.encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">        print(resp.text[<span class="number">1</span>])</div><div class="line">        TextClass.append(int(resp.text[<span class="number">1</span>]))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">ClassCount = Counter(TextClass)</div><div class="line">print(ClassCount)</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ24.png" alt=""><br>Boson给定的参照表为：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ25.png" alt=""></p>
<p>我们简单做个可视化： ~<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dfclass = pd.DataFrame(TextClass)</div><div class="line">sns.countplot(<span class="number">0</span>, data=dfclass)</div><div class="line">plt.xticks((<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>), (<span class="string">'Physical'</span>, <span class="string">'Education'</span>, <span class="string">'Society'</span>, <span class="string">'Entertainment'</span>, <span class="string">'Domestic'</span>, <span class="string">'Technology'</span>, <span class="string">'Estate'</span>), rotation=<span class="number">70</span>)</div><div class="line">plt.xlabel(<span class="string">''</span>)</div><div class="line">plt.title(<span class="string">'Class'</span>, fontsize=<span class="number">16</span>)</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ26.png" alt=""></p>
<p>嗯，同学们和大佬们还是学习的比较多:-)<br>于我的好友来说，确实是关注教育，娱乐，科技多一点的，看来Boson的API还是挺好用的。<br>数据集里面还有点赞数和评论数，我们先从点赞数分析。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(Star.shape)</div><div class="line">print(Star.isnull().sum())</div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>(48822, )<br>51</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去除缺失值</span></div><div class="line">Star = pd.DataFrame(Star.dropna())</div><div class="line">Star.columns = Star[<span class="string">'star'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 去除Star里面的异常值</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Star[<span class="string">'star'</span>].index:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Star[<span class="string">'star'</span>].loc[i] = int(Star[<span class="string">'star'</span>].loc[i])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(Star[<span class="string">'star'</span>].loc[i])</div><div class="line">        Star[<span class="string">'star'</span>].loc[i] = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line">print(Star.isnull().sum())</div><div class="line">Star = pd.DataFrame(Star.dropna())</div><div class="line"></div><div class="line"><span class="comment"># 有些赞数是来自转发的，一般较多，我们这里将这种情况去除</span></div><div class="line">Star = Star[(Star[<span class="string">'star'</span>].apply(int) &lt; <span class="number">200</span>)]</div><div class="line">print(Star.shape)</div><div class="line"></div><div class="line"><span class="comment"># 作图</span></div><div class="line">plt.hist(list(Star[<span class="string">'star'</span>]), bins=<span class="number">20</span>)</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Star'</span>)</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ27.png" alt=""></p>
<p>相同地，接下来是评论数的分析：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 评论数分析[与点赞分析基本一致]</span></div><div class="line">print(Comment.shape)</div><div class="line">print(Comment.isnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># 去除缺失值</span></div><div class="line">Comment = pd.DataFrame(Comment.dropna())</div><div class="line">Comment.columns = [<span class="string">'Comment'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 去除Comment里面的异常值</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Comment[<span class="string">'Comment'</span>].index:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Comment[<span class="string">'Comment'</span>].loc[i] = int(Comment[<span class="string">'Comment'</span>].loc[i])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(Comment[<span class="string">'Comment'</span>].loc[i])</div><div class="line">        Comment[<span class="string">'Comment'</span>].loc[i] = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line">print(Comment.isnull().sum())</div><div class="line">Comment = pd.DataFrame(Comment.dropna())</div><div class="line"></div><div class="line"><span class="comment"># 有些评论是来自转发的，一般较多，我们这里将这种情况去除</span></div><div class="line">Comment = Comment[(Comment[<span class="string">'Comment'</span>].apply(int) &lt; <span class="number">100</span>)]</div><div class="line">print(Comment.shape)</div><div class="line"></div><div class="line"><span class="comment"># 作图</span></div><div class="line">plt.hist(list(Comment[<span class="string">'Comment'</span>]), bins=<span class="number">20</span>)</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Comment'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ28.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cpp Virtual members的使用]]></title>
      <url>/2017/03/02/Cpp-Virtual-members%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>C++类的学习–&gt;Virtual member的使用</p>
<p>先看一个例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> CPolygon&#123;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="keyword">int</span> width, heigth;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_values</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">    &#123;width=a; heigth=b;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> CRectangle: <span class="keyword">public</span> CPolygon&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> (width * heigth);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> CTriangle: <span class="keyword">public</span> CPolygon&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> (width * heigth / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    CRectangle rect;</div><div class="line">    CTriangle trgl;</div><div class="line">    CPolygon * ppoly1 = &amp;rect;</div><div class="line">    CPolygon * ppoly2 = &amp;trgl;</div><div class="line">    ppoly1 -&gt; set_values(<span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    ppoly2 -&gt; set_values(<span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; rect.area() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; trgl.area() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>20<br>10</p>
</blockquote>
<p> 这里，最后的rect.area() 与 trgl.area（） 必须用rect 与 trgl， 而不能用(*ppoly1)或是ppoly1-&gt;  。为什么呢，我们先试下，看看报错：</p>
<p>变动只有这两行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cout &lt;&lt; (*ppoly1).area() &lt;&lt; endl;</div><div class="line">cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; endl;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>报错如下：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/index.png" alt=""></p>
<p>报错写的很清楚了，两个指针ppoly1, ppoly2指向的基类是CPolygon, 而CPolygon类 has no member named ‘area’. 所以我们想，既然两个derived classes 都用到area, 如果能在基类里面定义就好了。但是可惜的是，两个darived class的area是不同的。</p>
<p>这时，就是Virtual member 上场的时候了。<br>先看下Virtual member的说明：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/x.png" alt=""></p>
<p>接下来看个上面改写的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class CPolygon&#123;</div><div class="line">protected:                // protected与private的区别就在于能否被其derived classes使用</div><div class="line">    int width, height;</div><div class="line">public:</div><div class="line">    void set_values (int a, int b)&#123;</div><div class="line">        width=a; height=b;</div><div class="line">    &#125;</div><div class="line">    virtual int area()</div><div class="line">    &#123; return (0);&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class CRectangle: public CPolygon&#123;</div><div class="line">public:</div><div class="line">    int area()&#123;</div><div class="line">        return (width * height);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class CTriangle: public CPolygon&#123;</div><div class="line">public:</div><div class="line">    int area()&#123;</div><div class="line">        return (width * height / 2);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    CRectangle rect;</div><div class="line">    CTriangle trgl;</div><div class="line">    CPolygon poly;</div><div class="line">    CPolygon * ppoly1 = &amp;rect;</div><div class="line">    CPolygon * ppoly2 = &amp;trgl;</div><div class="line">    CPolygon * ppoly3 = &amp;poly;</div><div class="line">    ppoly1-&gt;set_values(4, 5);</div><div class="line">    ppoly2-&gt;set_values(4, 5);</div><div class="line">    ppoly3-&gt;set_values(4, 5);</div><div class="line"></div><div class="line">    cout &lt;&lt; ppoly1-&gt;area() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; ppoly3-&gt;area() &lt;&lt; endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>20<br>10<br>0</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/virtual.png" alt=""></p>
<p>参考：<em>The C++ Language Tutorial</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python分析QQ群聊天记录]]></title>
      <url>/2017/03/02/Python%E5%88%86%E6%9E%90QQ%E7%BE%A4%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>之前，写了<a href="http://www.cnblogs.com/buzhizhitong/p/5701299.html" target="_blank" rel="external">这篇文章</a>，用python提取全部群成员的发言时间，并简单做了下分析。先补充一下，针对特定单个群成员（这里以  小小白   为例）消息记录的获取。代码比较简单，主要是正则表达式的书写。（附：聊天文件记录的导出请参考上面提到的文章）</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>这里有两个版本的，前面的比较简单，后面的一个实现了自动化提取做图。</p>
<h6 id="Version1-0"><a href="#Version1-0" class="headerlink" title="Version1.0"></a>Version1.0</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2016/9/14</span></div><div class="line"><span class="comment">#从QQ聊天数据导出特定人发言的日期时间和发言内容</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> xlsxwriter</div><div class="line"></div><div class="line"><span class="comment"># 小小白   这里代指你要获取数据的对象的昵称</span></div><div class="line"><span class="comment"># 方便起见，见数据导出的文件名也明明为此</span></div><div class="line">workbook = xlsxwriter.Workbook(<span class="string">'小小白.xlsx'</span>)</div><div class="line">worksheet = workbook.add_worksheet()</div><div class="line">worksheet.set_column(<span class="string">'A:A'</span>, <span class="number">5</span>)</div><div class="line">worksheet.set_column(<span class="string">'B:B'</span>, <span class="number">10</span>)</div><div class="line">worksheet.set_column(<span class="string">'C:C'</span>, <span class="number">200</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'高等数学.txt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">    s = f.read()</div><div class="line">    <span class="comment"># 正则，跨行匹配</span></div><div class="line">    pa = re.compile(<span class="string">r'^(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;) (\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) 小小白\(小小白的QQ号\)\n(.*?)\n$'</span>,re.DOTALL+re.MULTILINE)</div><div class="line">    ma = re.findall(pa,s)</div><div class="line">    <span class="comment"># print(len(ma))</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ma)):</div><div class="line">        <span class="comment"># print(ma[i][0])</span></div><div class="line">        date = ma[i][<span class="number">0</span>]</div><div class="line">        time = ma[i][<span class="number">1</span>]</div><div class="line">        word = ma[i][<span class="number">2</span>]</div><div class="line"></div><div class="line">        worksheet.write(int(i),<span class="number">0</span>,date)</div><div class="line">        worksheet.write(int(i),<span class="number">1</span>,time)</div><div class="line">        worksheet.write(int(i),<span class="number">2</span>,word)</div><div class="line"></div><div class="line">    workbook.close()</div><div class="line">    print(<span class="string">"处理完毕，快去看看文件夹下面新建的.xlsx文件吧"</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="Version2-0"><a href="#Version2-0" class="headerlink" title="Version2.0"></a>Version2.0</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 解决matplotlib显示中文的问题</span></div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line">mpl.rcParams[<span class="string">"font.sans-serif"</span>] = [<span class="string">"Microsoft YaHei"</span>]</div><div class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取24个时间段-----&gt;periods</span></div><div class="line"><span class="comment"># 用于之后时间的分段</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_periods</span><span class="params">()</span>:</span></div><div class="line">    periods = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">24</span>):</div><div class="line">        <span class="comment"># 这里的判断用于将类似的‘8’ 转化为 ‘08’ 便于和导出数据匹配</span></div><div class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</div><div class="line">            i = <span class="string">'0'</span>+str(i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i = str(i)</div><div class="line">        periods.append(i)</div><div class="line">    <span class="keyword">return</span> periods</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">对QQ群而言的时间提取</div><div class="line"></div><div class="line"># 获取聊天文件的“小时”数据</div><div class="line">def get_times(filename):</div><div class="line">    with open(filename, encoding='utf-8') as f:</div><div class="line">        data = f.read()</div><div class="line">        # 例如20:50:52，要匹配其中的20</div><div class="line">        pa = re.compile(r"(\d\d):\d\d:\d\d")</div><div class="line">        times = re.findall(pa, data)</div><div class="line"></div><div class="line">    return times</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对每一个时间段进行计数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classification</span><span class="params">(times,period)</span>:</span></div><div class="line">    num = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> times:</div><div class="line">        <span class="keyword">if</span> time == period:</div><div class="line">            num += <span class="number">1</span></div><div class="line">    period_time.append([period,num])</div><div class="line">    <span class="comment"># print(period, '---&gt;', num)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 作图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_time</span><span class="params">(period_time,name)</span>:</span></div><div class="line">    time = []</div><div class="line">    num  = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> period_time:</div><div class="line">        time.append(i[<span class="number">0</span>])</div><div class="line">        num.append(i[<span class="number">1</span>])</div><div class="line">    time = time[<span class="number">6</span>:<span class="number">24</span>]+time[<span class="number">0</span>:<span class="number">6</span>]</div><div class="line">    num = num[<span class="number">6</span>:<span class="number">24</span>]+num[<span class="number">0</span>:<span class="number">6</span>]</div><div class="line">    <span class="comment"># print(time,'\n',num)</span></div><div class="line">    labels = time</div><div class="line">    x = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">24</span>)]</div><div class="line">    plt.plot(num, <span class="string">'g'</span>)</div><div class="line">    num_max = max(num)</div><div class="line">    plt.xticks(x,labels)</div><div class="line">    plt.axis([<span class="number">00</span>, <span class="number">24</span>, <span class="number">0</span>, num_max*(<span class="number">1.2</span>)])</div><div class="line">    plt.grid(<span class="keyword">True</span>)</div><div class="line">    plt.title(name)</div><div class="line">    plt.ylabel(<span class="string">'发言量'</span>)</div><div class="line">    plt.xlabel(<span class="string">'时间'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_person_data</span><span class="params">(filename,name,qqnumber)</span>:</span></div><div class="line">    person_data = &#123;<span class="string">'date'</span>:[],<span class="string">'time'</span>:[],<span class="string">'word'</span>:[]&#125;</div><div class="line">    <span class="keyword">with</span> open(filename,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">        s = f.read()</div><div class="line">        <span class="comment"># 正则，跨行匹配</span></div><div class="line">        pa = re.compile(<span class="string">r'^(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;) (\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) '</span>+name+<span class="string">r'\('</span>+qqnumber+<span class="string">'\)\n(.*?)\n$'</span>,re.DOTALL+re.MULTILINE)</div><div class="line">        ma = re.findall(pa,s)</div><div class="line">        <span class="comment"># print(len(ma))</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ma)):</div><div class="line">            <span class="comment"># print(ma[i][0])</span></div><div class="line">            date = ma[i][<span class="number">0</span>]</div><div class="line">            time = ma[i][<span class="number">1</span>]</div><div class="line">            word = ma[i][<span class="number">2</span>]</div><div class="line">            person_data[<span class="string">'date'</span>].append(date)</div><div class="line">            person_data[<span class="string">'time'</span>].append(time[<span class="number">0</span>:<span class="number">2</span>])</div><div class="line">            person_data[<span class="string">'word'</span>].append(word)</div><div class="line">    <span class="keyword">return</span> person_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    filename = input(<span class="string">'请输入聊天记录文件名：'</span>)</div><div class="line">    name = input(<span class="string">'准备提取个人信息就绪，请输入要提取人的群名片：'</span>)</div><div class="line">    qqnumber = input(<span class="string">'请输入要提取人的QQ号：'</span>)</div><div class="line">    period_time = []</div><div class="line">    person_data = get_person_data(filename,name,qqnumber)</div><div class="line">    times = person_data[<span class="string">'time'</span>]</div><div class="line"></div><div class="line">    periods = get_periods()</div><div class="line">    <span class="keyword">for</span> period <span class="keyword">in</span> periods:</div><div class="line">        classification(times,period)</div><div class="line">    plot_time(period_time,name)</div><div class="line">    <span class="comment"># print(person_data['word'])</span></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://images2015.cnblogs.com/blog/980075/201610/980075-20161018105033451-390495188.png" alt=""></p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><blockquote>
<p>关于Windows下，matplotlib中文显示的问题，参考我之前的<a href="http://www.cnblogs.com/buzhizhitong/p/5759304.html" target="_blank" rel="external">这篇文章</a>。<br>至于Ubuntu下，还未去处理，之后有时间补充。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python实现支持向量机(SVM)]]></title>
      <url>/2017/03/02/Python%E5%AE%9E%E7%8E%B0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-SVM/</url>
      <content type="html"><![CDATA[<p>之前学SVM做的笔记，这里整理下。</p>
<h5 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h5><p>这里先空下，等之后整理补充上来。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>代码大部分来自<a href="https://gist.github.com/mblondel/586753" target="_blank" rel="external">Github</a>，当中有自己写的一些注释。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> linalg</div><div class="line"><span class="keyword">import</span> cvxopt</div><div class="line"><span class="keyword">import</span> cvxopt.solvers</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_kernel</span><span class="params">(x1, x2)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.dot(x1, x2)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">polynomial_kernel</span><span class="params">(x, y, p=<span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> + np.dot(x, y)) ** p</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_kernel</span><span class="params">(x, y, sigma=<span class="number">5.0</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.exp(-linalg.norm(x-y)**<span class="number">2</span> / (<span class="number">2</span> * (sigma ** <span class="number">2</span>)))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SVM</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kernel=linear_kernel, C=None)</span>:</span></div><div class="line">        self.kernel = kernel</div><div class="line">        self.C = C</div><div class="line">        <span class="keyword">if</span> self.C <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: self.C = float(self.C)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span></div><div class="line">        n_samples, n_features = X.shape</div><div class="line"></div><div class="line">        <span class="comment"># Gram matrix</span></div><div class="line">        K = np.zeros((n_samples, n_samples))</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n_samples):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n_samples):</div><div class="line">                K[i,j] = self.kernel(X[i], X[j])</div><div class="line"></div><div class="line">        P = cvxopt.matrix(np.outer(y,y) * K)</div><div class="line">        q = cvxopt.matrix(np.ones(n_samples) * <span class="number">-1</span>)</div><div class="line">        A = cvxopt.matrix(y, (<span class="number">1</span>,n_samples))</div><div class="line">        b = cvxopt.matrix(<span class="number">0.0</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.C <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            G = cvxopt.matrix(np.diag(np.ones(n_samples) * <span class="number">-1</span>))</div><div class="line">            h = cvxopt.matrix(np.zeros(n_samples))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            tmp1 = np.diag(np.ones(n_samples) * <span class="number">-1</span>)</div><div class="line">            tmp2 = np.identity(n_samples)</div><div class="line">            G = cvxopt.matrix(np.vstack((tmp1, tmp2)))</div><div class="line">            tmp1 = np.zeros(n_samples)</div><div class="line">            tmp2 = np.ones(n_samples) * self.C</div><div class="line">            h = cvxopt.matrix(np.hstack((tmp1, tmp2)))</div><div class="line"></div><div class="line">        <span class="comment"># solve QP problem</span></div><div class="line">        solution = cvxopt.solvers.qp(P, q, G, h, A, b)</div><div class="line"></div><div class="line">        <span class="comment"># Lagrange multipliers</span></div><div class="line">        a = np.ravel(solution[<span class="string">'x'</span>])</div><div class="line"></div><div class="line">        <span class="comment"># Support vectors have non zero lagrange multipliers</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        这里a&gt;1e-5就将其视为非零</div><div class="line">        '''</div><div class="line">        sv = a &gt; <span class="number">1e-5</span></div><div class="line">        ind = np.arange(len(a))[sv]</div><div class="line">        self.a = a[sv]</div><div class="line">        self.sv = X[sv]</div><div class="line">        self.sv_y = y[sv]</div><div class="line">        print(<span class="string">"%d support vectors out of %d points"</span> % (len(self.a), n_samples))</div><div class="line"></div><div class="line">        <span class="comment"># Intercept</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        这里相当于对所有的支持向量求得的b取平均值</div><div class="line">        '''</div><div class="line">        self.b = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(len(self.a)):</div><div class="line">            self.b += self.sv_y[n]</div><div class="line">            self.b -= np.sum(self.a * self.sv_y * K[ind[n],sv])</div><div class="line">        self.b /= len(self.a)</div><div class="line"></div><div class="line">        <span class="comment"># Weight vector</span></div><div class="line">        <span class="keyword">if</span> self.kernel == linear_kernel:</div><div class="line">            self.w = np.zeros(n_features)</div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(len(self.a)):</div><div class="line">                <span class="comment"># linear_kernel相当于在原空间，故计算w不用映射到feature space</span></div><div class="line">                self.w += self.a[n] * self.sv_y[n] * self.sv[n]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.w = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">project</span><span class="params">(self, X)</span>:</span></div><div class="line">        <span class="comment"># w有值，即kernel function 是 linear_kernel，直接计算即可</span></div><div class="line">        <span class="keyword">if</span> self.w <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> np.dot(X, self.w) + self.b</div><div class="line">        <span class="comment"># w is None --&gt; 不是linear_kernel,w要重新计算</span></div><div class="line">        <span class="comment"># 这里没有去计算新的w（非线性情况不用计算w）,直接用kernel matrix计算预测结果</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            y_predict = np.zeros(len(X))</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</div><div class="line">                s = <span class="number">0</span></div><div class="line">                <span class="keyword">for</span> a, sv_y, sv <span class="keyword">in</span> zip(self.a, self.sv_y, self.sv):</div><div class="line">                    s += a * sv_y * self.kernel(X[i], sv)</div><div class="line">                y_predict[i] = s</div><div class="line">            <span class="keyword">return</span> y_predict + self.b</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></div><div class="line">        <span class="keyword">return</span> np.sign(self.project(X))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> pylab <span class="keyword">as</span> pl</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_lin_separable_data</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># generate training data in the 2-d case</span></div><div class="line">        mean1 = np.array([<span class="number">0</span>, <span class="number">2</span>])</div><div class="line">        mean2 = np.array([<span class="number">2</span>, <span class="number">0</span>])</div><div class="line">        cov = np.array([[<span class="number">0.8</span>, <span class="number">0.6</span>], [<span class="number">0.6</span>, <span class="number">0.8</span>]])</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">100</span>)</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">100</span>)</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_non_lin_separable_data</span><span class="params">()</span>:</span></div><div class="line">        mean1 = [<span class="number">-1</span>, <span class="number">2</span>]</div><div class="line">        mean2 = [<span class="number">1</span>, <span class="number">-1</span>]</div><div class="line">        mean3 = [<span class="number">4</span>, <span class="number">-4</span>]</div><div class="line">        mean4 = [<span class="number">-4</span>, <span class="number">4</span>]</div><div class="line">        cov = [[<span class="number">1.0</span>,<span class="number">0.8</span>], [<span class="number">0.8</span>, <span class="number">1.0</span>]]</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">50</span>)</div><div class="line">        X1 = np.vstack((X1, np.random.multivariate_normal(mean3, cov, <span class="number">50</span>)))</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">50</span>)</div><div class="line">        X2 = np.vstack((X2, np.random.multivariate_normal(mean4, cov, <span class="number">50</span>)))</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_lin_separable_overlap_data</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># generate training data in the 2-d case</span></div><div class="line">        mean1 = np.array([<span class="number">0</span>, <span class="number">2</span>])</div><div class="line">        mean2 = np.array([<span class="number">2</span>, <span class="number">0</span>])</div><div class="line">        cov = np.array([[<span class="number">1.5</span>, <span class="number">1.0</span>], [<span class="number">1.0</span>, <span class="number">1.5</span>]])</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">100</span>)</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">100</span>)</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_train</span><span class="params">(X1, y1, X2, y2)</span>:</span></div><div class="line">        X1_train = X1[:<span class="number">90</span>]</div><div class="line">        y1_train = y1[:<span class="number">90</span>]</div><div class="line">        X2_train = X2[:<span class="number">90</span>]</div><div class="line">        y2_train = y2[:<span class="number">90</span>]</div><div class="line">        X_train = np.vstack((X1_train, X2_train))</div><div class="line">        y_train = np.hstack((y1_train, y2_train))</div><div class="line">        <span class="keyword">return</span> X_train, y_train</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_test</span><span class="params">(X1, y1, X2, y2)</span>:</span></div><div class="line">        X1_test = X1[<span class="number">90</span>:]</div><div class="line">        y1_test = y1[<span class="number">90</span>:]</div><div class="line">        X2_test = X2[<span class="number">90</span>:]</div><div class="line">        y2_test = y2[<span class="number">90</span>:]</div><div class="line">        X_test = np.vstack((X1_test, X2_test))</div><div class="line">        y_test = np.hstack((y1_test, y2_test))</div><div class="line">        <span class="keyword">return</span> X_test, y_test</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># 仅仅在Linears使用此函数作图，即w存在时</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_margin</span><span class="params">(X1_train, X2_train, clf)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, w, b, c=<span class="number">0</span>)</span>:</span></div><div class="line">            <span class="comment"># given x, return y such that [x,y] in on the line</span></div><div class="line">            <span class="comment"># w.x + b = c</span></div><div class="line">            <span class="keyword">return</span> (-w[<span class="number">0</span>] * x - b + c) / w[<span class="number">1</span>]</div><div class="line"></div><div class="line">        pl.plot(X1_train[:,<span class="number">0</span>], X1_train[:,<span class="number">1</span>], <span class="string">"ro"</span>)</div><div class="line">        pl.plot(X2_train[:,<span class="number">0</span>], X2_train[:,<span class="number">1</span>], <span class="string">"bo"</span>)</div><div class="line">        pl.scatter(clf.sv[:,<span class="number">0</span>], clf.sv[:,<span class="number">1</span>], s=<span class="number">100</span>, c=<span class="string">"g"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = 0</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = 1</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b, <span class="number">1</span>)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b, <span class="number">1</span>)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k--"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = -1</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b, <span class="number">-1</span>)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b, <span class="number">-1</span>)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k--"</span>)</div><div class="line"></div><div class="line">        pl.axis(<span class="string">"tight"</span>)</div><div class="line">        pl.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_contour</span><span class="params">(X1_train, X2_train, clf)</span>:</span></div><div class="line">        <span class="comment"># 作training sample数据点的图</span></div><div class="line">        pl.plot(X1_train[:,<span class="number">0</span>], X1_train[:,<span class="number">1</span>], <span class="string">"ro"</span>)</div><div class="line">        pl.plot(X2_train[:,<span class="number">0</span>], X2_train[:,<span class="number">1</span>], <span class="string">"bo"</span>)</div><div class="line">        <span class="comment"># 做support vectors 的图</span></div><div class="line">        pl.scatter(clf.sv[:,<span class="number">0</span>], clf.sv[:,<span class="number">1</span>], s=<span class="number">100</span>, c=<span class="string">"g"</span>)</div><div class="line"></div><div class="line">        X1, X2 = np.meshgrid(np.linspace(<span class="number">-6</span>,<span class="number">6</span>,<span class="number">50</span>), np.linspace(<span class="number">-6</span>,<span class="number">6</span>,<span class="number">50</span>))</div><div class="line">        X = np.array([[x1, x2] <span class="keyword">for</span> x1, x2 <span class="keyword">in</span> zip(np.ravel(X1), np.ravel(X2))])</div><div class="line">        Z = clf.project(X).reshape(X1.shape)</div><div class="line">        <span class="comment"># pl.contour做等值线图</span></div><div class="line">        pl.contour(X1, X2, Z, [<span class="number">0.0</span>], colors=<span class="string">'k'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line">        pl.contour(X1, X2, Z + <span class="number">1</span>, [<span class="number">0.0</span>], colors=<span class="string">'grey'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line">        pl.contour(X1, X2, Z - <span class="number">1</span>, [<span class="number">0.0</span>], colors=<span class="string">'grey'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line"></div><div class="line">        pl.axis(<span class="string">"tight"</span>)</div><div class="line">        pl.show()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_linear</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_lin_separable_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM()</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_margin(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_non_linear</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_non_lin_separable_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM(gaussian_kernel)</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_contour(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_soft</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_lin_separable_overlap_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM(C=<span class="number">0.1</span>)</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_contour(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line"></div><div class="line">test_soft()</div></pre></td></tr></table></figure></p>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/f2.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-03-02%2008-40-03.png" alt=""></p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>关于用cvxopt求解QP问题的使用，可参考<a href="https://uqer.io/community/share/55c9a55df9f06c91f818c675" target="_blank" rel="external">优矿</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[K-means clustering]]></title>
      <url>/2017/02/27/K-means-clustering/</url>
      <content type="html"><![CDATA[<p>K-means clustering的Python实现<br>交流群不相识的朋友突然问我怎么手写K-means…于是腾出时间简单写下。</p>
<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><blockquote>
<p>k-平均算法源于信号处理中的一种向量量化方法，现在则更多地作为一种聚类分析方法流行于数据挖掘领域。k-平均聚类的目的是：把 n {\displaystyle n} n个点（可以是样本的一次观察或一个实例）划分到k个聚类中，使得每个点都属于离他最近的均值（此即聚类中心）对应的聚类，以之作为聚类的标准。这个问题将归结为一个把数据空间划分为Voronoi cells的问题。[wiki]</p>
</blockquote>
<h5 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h5><p>关于算法的步骤也是参考的<a href="https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95#.E7.AE.97.E6.B3.95.E6.8F.8F.E8.BF.B0" target="_blank" rel="external">WIKI</a>，原理比较简单，不再重复叙述。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-27%2022-21-23.png" alt=""></p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>这里的实现有几个需要改进的地方，这里放在前面指出。</p>
<ul>
<li>[ ] 采用了循环，而不是向量化，矩阵化的运算</li>
<li>[ ] 收敛的判断，并没有按照分类是否恒定不变来判断收敛与否，而是以，所有质点新一次迭代前后空间距离的微小变化[自定义阀值]作为收敛的标准。[这里纯属个人想法，不知道是否有原则的错误0.0]<blockquote>
<p>2017.03.01补充<br>今天再次搜索K-means算法，看到<a href="http://wiki.swarma.net/index.php?title=K-means%E8%81%9A%E7%B1%BB&amp;variant=zh" target="_blank" rel="external">集智百科</a>的关于次算法的介绍。恰好正是按照这种方法来判断算法的收敛。<br>叙述是这样的<br><img src="http://olricxi00.bkt.clouddn.com/Screenshot%20from%202017-03-01%2012-59-38.png" alt=""><br>可以看到下面算法收敛的判断准则就是质心的微小变化。[所以目前看来这样还是靠谱的0.0]<br>但是呢，有些不太同意简介的开头：<br>++ “K-means算法是很典型的基于距离的聚类算法，采用距离作为相似性的评价指标，即认为两个对象的距离越近，其相似度就越大。该算法认为簇是由距离靠近的对象组成的，因此把得到紧凑且独立的簇作为最终目标。”++<br>这里还是参考WIK的说法：<br>++“分配(Assignment)：将每个观测分配到聚类中，使得组内平方和（WCSS）达到最小。因为这一平方和就是平方后的欧氏距离，所以很直观地把观测分配到离它最近得均值点即可 [8] 。（数学上，这意味依照由这些均值点生成的Voronoi图来划分上述观测）。”++</p>
</blockquote>
</li>
</ul>
<p>这里测试的data来自于那位朋友的题目，比较简单，见代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 获取数据</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">()</span>:</span></div><div class="line">    x = np.array([[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)])</div><div class="line">    y = np.array([[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">51</span>, <span class="number">151</span>)])</div><div class="line">    data = np.hstack((x, y))</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="comment"># 获取两点间的距离</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdis</span><span class="params">(px, py)</span>:</span></div><div class="line">    dims = len(px)</div><div class="line">    <span class="comment"># dist = np.sqrt(((px[0]-py[0])**2)+(px[1]-py[1])**2)</span></div><div class="line">    dist = np.sqrt(np.sum(((px[i] - py[i]) ** <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(dims)))</div><div class="line">    <span class="keyword">return</span> dist</div><div class="line"></div><div class="line"><span class="comment"># 用于首次随机获取质点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrandmeans</span><span class="params">(data, n)</span>:</span></div><div class="line">    means = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        x0 = random.choice(data)</div><div class="line">        means.append(x0)</div><div class="line">    print(<span class="string">'Random: '</span>, means)</div><div class="line">    <span class="keyword">return</span> means</div><div class="line"></div><div class="line"><span class="comment"># 递归，重复计算所属类别，至收敛</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getclass</span><span class="params">(data, means)</span>:</span></div><div class="line">    classx = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(means)):</div><div class="line">        classx[str(k)] = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">        p0 = data[i]</div><div class="line">        dists = []</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(means)):</div><div class="line">            dist = getdis(p0, means[k])</div><div class="line">            dists.append(dist)</div><div class="line">        maxdist = max(dists)</div><div class="line">        class_p0 = [i <span class="keyword">for</span> i, j <span class="keyword">in</span> enumerate(dists) <span class="keyword">if</span> j==maxdist ][<span class="number">0</span>]</div><div class="line">        classx[str(class_p0)].append(p0)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># print(means)</span></div><div class="line">    newmeans = getnewmeans(classx)</div><div class="line">    <span class="comment"># 这里我们并未按照所属类别是否收敛，而后所得质心各维度的距离是否足够小</span></div><div class="line">    dists_of_means = getdis(np.sort(means, <span class="number">0</span>),  np.sort(newmeans, <span class="number">0</span>))</div><div class="line">    print(<span class="string">'alculating...'</span>)</div><div class="line">    <span class="keyword">if</span> sum(dists_of_means &gt; <span class="number">0.001</span>) == <span class="number">0</span>:</div><div class="line">        print(<span class="string">'complete!'</span>)</div><div class="line">        print(<span class="string">'求得的最优质点为: '</span>, means)</div><div class="line">        print(<span class="string">'各维度的距离为: '</span>, dists_of_means)</div><div class="line">        print(<span class="string">'最终聚类结果为: '</span>, classx)</div><div class="line">        <span class="keyword">return</span> classx</div><div class="line"></div><div class="line">    newclassx = getclass(data, newmeans)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newclassx</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getnewmeans</span><span class="params">(classx)</span>:</span></div><div class="line">    classes = list(classx.keys())</div><div class="line">    means = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(classx))]</div><div class="line">    <span class="keyword">for</span> class0 <span class="keyword">in</span> classes:</div><div class="line">        <span class="keyword">if</span> len(classx[class0]) != <span class="number">0</span>:</div><div class="line">            points = np.vstack(classx[class0])</div><div class="line">            x = np.mean(points[:, <span class="number">0</span>])</div><div class="line">            y = np.mean(points[:, <span class="number">1</span>])</div><div class="line">            means[int(class0)] = np.array([x, y])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'WARNING: 极大可能存在一个多余的质点!'</span>)</div><div class="line">            means[int(class0)] = np.array([<span class="number">0</span>, <span class="number">0</span>])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> means</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotdata</span><span class="params">(classx)</span>:</span></div><div class="line">    plt.figure()</div><div class="line">    classes = classx.keys()</div><div class="line">    color = [<span class="string">'ro'</span>, <span class="string">'bo'</span>]</div><div class="line">    <span class="keyword">for</span> class0 <span class="keyword">in</span> range(len(classes)):</div><div class="line">        points = np.vstack(classx[str(class0)])</div><div class="line">        <span class="comment"># print(points)</span></div><div class="line">        plt.plot(points[:, <span class="number">0</span>], points[:, <span class="number">1</span>], color[class0])</div><div class="line">        <span class="comment"># print('=========================')</span></div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    data = getdata()</div><div class="line">    <span class="comment">#print(data)</span></div><div class="line">    dist = getdis(data[<span class="number">0</span>], data[<span class="number">1</span>])</div><div class="line">    <span class="comment">#print(dist)</span></div><div class="line">    means = getrandmeans(data, <span class="number">2</span>)</div><div class="line">    <span class="comment">#print(means)</span></div><div class="line"></div><div class="line">    <span class="comment"># print(classx)</span></div><div class="line">    classx = getclass(data, means)</div><div class="line">    plotdata(classx)</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Random:  [array([ 85, 135]), array([ 92, 142])]<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>complete!<br>求得的最优质点为:  [array([  75.5,  125.5]), array([ 25.5,  75.5])]<br>各维度的距离为:  [ 0.  0.]<br>最终聚类结果为:  {‘1’: [array([ 51, 101]), array([ 52, 102]), array([ 53, 103]), array([ 54, 104]),array([ 55, 105]), … , array([46, 96]), array([47, 97]), array([48, 98]), array([49, 99]), array([ 50, 100])]}</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-03-03%2001-38-15.png" alt=""></p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>关于上面的实现，开始时发现，每次运行作出来的图竟然不一样…调试发现时递归那里的问题。<br>就是关于return的问题，这里内部的return只是起到终止递归的作用，返回的是外面的return。抽象出来，类似下面这种<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-27%2022-39-10.png" alt=""></p>
<p>后面有时间会再针对上面的问题进行改进。</p>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><a href="https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95#.E7.AE.97.E6.B3.95.E6.8F.8F.E8.BF.B0" target="_blank" rel="external">WIKI</a><br><a href="http://stackoverflow.com/questions/3989016/how-to-find-all-positions-of-the-maximum-value-in-a-list" target="_blank" rel="external">StackOverflow</a><br><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html" target="_blank" rel="external">CodingLabs</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Print time!]]></title>
      <url>/2017/02/26/Print-time/</url>
      <content type="html"><![CDATA[<h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p>关于Cpp知识点的结合练习。</p>
<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>本次练习涉及的知识点</p>
<blockquote>
<p>vector的几种打印方式<br>将函数作为参数传入其他函数<br>精确[毫秒及微秒]时间的计量</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 几种打印vector的方法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.size(); i++)&#123;</div><div class="line"><span class="comment">//        cout&lt;&lt; i;</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; v[i]&lt;&lt;<span class="string">"  "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = v.begin(); iter != v.end(); ++iter)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *iter&lt;&lt; <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector3</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">auto</span> itr = v.begin();</div><div class="line">    <span class="keyword">while</span>( itr != v.end())&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *(itr++) &lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将函数作为参数传入</span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*pf)</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 精确时间的计量</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">taketime</span><span class="params">(pf f, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">struct</span> timeval start, end;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> mtime, seconds, useconds;</div><div class="line"></div><div class="line">    gettimeofday(&amp;start, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Elapsed time: %ld milliseconds\n"</span>, mtime);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</div><div class="line">        f(v);</div><div class="line">    gettimeofday(&amp;end, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    seconds  = end.tv_sec  - start.tv_sec;</div><div class="line">    useconds = end.tv_usec - start.tv_usec;</div><div class="line"></div><div class="line">    mtime = ((seconds) * <span class="number">1000</span> + useconds/<span class="number">1000.0</span>) + <span class="number">0.5</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>&lt;&lt; mtime;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; daysInMonth = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</div><div class="line">    taketime(printvector1, daysInMonth);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h5><p><em>Data Structures and AlgorithmAnalysis in C++</em>[p84]</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Practice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bubble Sort]]></title>
      <url>/2017/02/25/Bubble-Sort/</url>
      <content type="html"><![CDATA[<h5 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h5><p>关于，冒泡排序的原理及其实现。<br>关于原理：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2016-53-55.png" alt=""></p>
<blockquote>
<p>有序序列中每一对相邻元素都是顺序的；反之，所有相邻元素均顺序的序列<br>也必然整体有序。</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 原理： 有序序列中每一对相邻元素都是顺序的；反之，所有相邻元素均顺序的序列</span></div><div class="line"><span class="comment">// 也必然整体有序。</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubblesort1A</span><span class="params">( <span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> sorted = <span class="literal">false</span>;  <span class="comment">// 整体排序标志，首先假定尚未进行排序</span></div><div class="line">    <span class="keyword">while</span>(!sorted)&#123;  <span class="comment">//在尚未确认已经全局排序之前，逐趟进行扫描交换</span></div><div class="line">        sorted = <span class="literal">true</span>;  <span class="comment">// 假定已经排序</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt; n; i++ )&#123;</div><div class="line">            <span class="keyword">if</span> (A[i - <span class="number">1</span>] &gt; A[i])&#123; <span class="comment">// 一旦A[i-1]与A[i]逆序，则</span></div><div class="line">                swap( A[i<span class="number">-1</span>], A[i]); <span class="comment">// 交换之</span></div><div class="line">                sorted = <span class="literal">false</span>;<span class="comment">// 因整体排序不能保证，需要清除排序标志</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    n--;  <span class="comment">// 至此末位元素必然就位， 故可以缩短排序序列的有效长度。</span></div><div class="line">&#125;<span class="comment">// 借助布尔值标志位sorted, 可以及时提前退出，而不至于总是忙里地做n-1次扫描</span></div><div class="line"></div><div class="line"><span class="comment">// 构造打印数组的函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; a[i]&lt;&lt; <span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=<span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> a[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">    printvector(a, n);</div><div class="line">    bubblesort1A(a, n);</div><div class="line">    printvector(a, n);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2017-27-54.png" alt=""></p>
<p>参考：TsinghuaX: 30240184.1x Data Structures and Algorithm Design Part I 数据结构与算法设计(上) </p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[About Hexo]]></title>
      <url>/2017/02/25/About-Hexo/</url>
      <content type="html"><![CDATA[<h6 id="自动开启编辑器"><a href="#自动开启编辑器" class="headerlink" title="自动开启编辑器"></a>自动开启编辑器</h6><p>为Hexo 3增加新功能： hexo new “title” 后自动使用指定编辑器打开新建的md文件.<br>System: Ubuntu16.04 64bit<br>Editor: Haroopad</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</div><div class="line"></div><div class="line"><span class="comment">// Hexo 3</span></div><div class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  spawn(<span class="string">'haroopad'</span>, [data.path]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h6 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h6><p>之前的系统崩了，将完整的hexo文件备份，重装系统，将文件拷到电脑，安装nvm,配置node,记得版本不要最新的，官方推荐稳定版本即可。配置git,npm, 再hexo文件重新安装hexo，只进行一次安装命令即可[也就是不用hexo init这些初始化和配置的命令]</p>
<h6 id="更换评论系统"><a href="#更换评论系统" class="headerlink" title="更换评论系统"></a>更换评论系统</h6><p>多说要崩，换Disqus, 但是要FQ才能加载出来，。对技术爱好者来说FQ是基本技能，所以还是选择了它。</p>
<h6 id="文末增加版权信息"><a href="#文末增加版权信息" class="headerlink" title="文末增加版权信息"></a>文末增加版权信息</h6><p>参考<a href="http://www.vitah.net/posts/20f300cc/" target="_blank" rel="external">这里</a></p>
<h6 id="页脚居中"><a href="#页脚居中" class="headerlink" title="页脚居中"></a>页脚居中</h6><p>参考<a href="http://www.wuxubj.cn/2016/07/footer-beautify-of-nexT/" target="_blank" rel="external">这里</a></p>
<h6 id="动画特效"><a href="#动画特效" class="headerlink" title="动画特效"></a>动画特效</h6><p>关闭了canvas_nest， 留下了小心心 :-)</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle: Human Resources Analytics]]></title>
      <url>/2017/02/25/Kaggle-Human-Resources-Analytics/</url>
      <content type="html"><![CDATA[<h5 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h5><p>这是新年定下的目标之一 —— Kaggle案例的学习<br>这里，数据即来自<a href="https://www.kaggle.com/ludobenistant/hr-analytics" target="_blank" rel="external">Human Resources Analytics</a>， 参考<a href="https://www.kaggle.com/nirajvermafcb/d/ludobenistant/hr-analytics/principal-component-analysis-explained" target="_blank" rel="external">这里</a>学习数据的分析.</p>
<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>这个kernel里面呢，大部分还是比较常规的EDA，可视化和简单算法的应用，但是也有要学习的地方，这里在代码里面都有声明。</p>
<blockquote>
<p>[学习heatmap使用]<br>[学习plt.barh使用]<br>[学习如下reindex的步骤]<br>[学习iloc使用]<br>[学习使用sklearn进行标准化]<br>[掌握手动计算协方差]<br>[学习使用Numpy简单的线性代数的运算]<br>[学习使用sklearn做PCA]</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">Created on Sat Feb 25 07:48:50 2017</div><div class="line"></div><div class="line">@author: shen</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="comment"># 人力资源——离职分析</span></div><div class="line"><span class="comment"># 采用PCA</span></div><div class="line"><span class="comment"># 参考https://www.kaggle.com/nirajvermafcb/d/ludobenistant/hr-analytics/principal-component-analysis-explained</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># linear algebra</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># data rocessing</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 导入数据</span></div><div class="line"><span class="comment"># https://www.kaggle.com/nirajvermafcb/d/ludobenistant/hr-analytics/principal-component-analysis-explained</span></div><div class="line">df = pd.read_csv(<span class="string">'/home/shen/PycharmProjects/MyPython/Kaggle/human resources/data.csv'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 了解数据</span></div><div class="line"><span class="string">'''</span></div><div class="line">df.columns.tolist() fetches all the columns and </div><div class="line">then convert it into list type.This step is just </div><div class="line">to check out all the column names in our data.Columns </div><div class="line">are also called as features of our datasets.</div><div class="line">'''</div><div class="line">columns_names = df.columns.tolist()</div><div class="line"></div><div class="line">print(df.shape)</div><div class="line">print(df.head())</div><div class="line"></div><div class="line"><span class="comment"># 数值型变量的协方差矩阵</span></div><div class="line">print(df.corr())</div><div class="line"></div><div class="line"><span class="comment"># [学习heatmap使用]</span></div><div class="line"><span class="comment"># 协方差矩阵的可视化</span></div><div class="line">correlation = df.corr()</div><div class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</div><div class="line">sns.heatmap(correlation, vmax=<span class="number">1</span>, square=<span class="keyword">True</span>, annot=<span class="keyword">True</span>, cmap=<span class="string">'cubehelix'</span>)</div><div class="line">plt.title(<span class="string">'Correlation between diffrent features'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 职位</span></div><div class="line">print(df[<span class="string">'sales'</span>].unique())</div><div class="line"></div><div class="line">groupby_sales = df.groupby(<span class="string">'sales'</span>).mean()</div><div class="line"></div><div class="line">IT=groupby_sales[<span class="string">'satisfaction_level'</span>].IT</div><div class="line">RandD=groupby_sales[<span class="string">'satisfaction_level'</span>].RandD</div><div class="line">accounting=groupby_sales[<span class="string">'satisfaction_level'</span>].accounting</div><div class="line">hr=groupby_sales[<span class="string">'satisfaction_level'</span>].hr</div><div class="line">management=groupby_sales[<span class="string">'satisfaction_level'</span>].management</div><div class="line">marketing=groupby_sales[<span class="string">'satisfaction_level'</span>].marketing</div><div class="line">product_mng=groupby_sales[<span class="string">'satisfaction_level'</span>].product_mng</div><div class="line">sales=groupby_sales[<span class="string">'satisfaction_level'</span>].sales</div><div class="line">support=groupby_sales[<span class="string">'satisfaction_level'</span>].support</div><div class="line">technical=groupby_sales[<span class="string">'satisfaction_level'</span>].technical</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># [学习plt.barh使用]</span></div><div class="line">department_name = df[<span class="string">'sales'</span>].unique()</div><div class="line">department=(sales, accounting, hr, technical, support, management,</div><div class="line">       IT, product_mng, marketing, RandD)</div><div class="line"></div><div class="line">y_pos = np.arange(len(department))</div><div class="line">x = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.1</span>)</div><div class="line"></div><div class="line">plt.barh(y_pos, department, align=<span class="string">'center'</span>, alpha=<span class="number">0.8</span>)</div><div class="line">plt.yticks(y_pos, department_name)</div><div class="line">plt.xlabel(<span class="string">'Satisfaction level'</span>)</div><div class="line">plt.title(<span class="string">'Mean Satisfaction Level of each department'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># PCA</span></div><div class="line"><span class="comment"># 去除非数值型的变量(feature)</span></div><div class="line">print(df.dtypes)</div><div class="line">df_drop = df.drop(labels=[<span class="string">'sales'</span>, <span class="string">'salary'</span>], axis=<span class="number">1</span>)</div><div class="line">print(df_drop.dtypes)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># [学习如下reindex的步骤]</span></div><div class="line"><span class="string">'''</span></div><div class="line">Here we are converting columns of the dataframe to list </div><div class="line">so it would be easier for us to reshuffle the columns.</div><div class="line">We are going to use cols.insert method</div><div class="line">'''</div><div class="line">cols = df_drop.columns.tolist()</div><div class="line">cols.insert(<span class="number">0</span>, cols.pop(cols.index(<span class="string">'left'</span>)))</div><div class="line"></div><div class="line">df_drop = df_drop.reindex(columns= cols)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># [学习iloc使用]</span></div><div class="line"><span class="comment"># 索引分离数据</span></div><div class="line">X = df_drop.iloc[:, <span class="number">1</span>:<span class="number">8</span>].values</div><div class="line">y = df_drop.iloc[:, <span class="number">0</span>].values</div><div class="line"></div><div class="line">print(np.shape(X))</div><div class="line">print(np.shape(y))</div><div class="line"></div><div class="line"><span class="comment"># [学习使用sklearn进行标准化]</span></div><div class="line"><span class="comment"># 数据的标准化</span></div><div class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</div><div class="line">X_std = StandardScaler().fit_transform(X)</div><div class="line"></div><div class="line"><span class="comment"># [掌握手动计算协方差]</span></div><div class="line"><span class="comment"># 计算协方差矩阵</span></div><div class="line">mean_vec = np.mean(X_std, axis=<span class="number">0</span>)</div><div class="line">cov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[<span class="number">0</span>] - <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># another way --&gt; np.cov</span></div><div class="line">print(<span class="string">'NumPy covariance matrix: \n%s'</span> %np.cov(X_std.T))</div><div class="line"></div><div class="line"></div><div class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</div><div class="line">sns.heatmap(cov_mat, vmax=<span class="number">1</span>, square=<span class="keyword">True</span>,annot=<span class="keyword">True</span>,cmap=<span class="string">'cubehelix'</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Correlation between different features'</span>)</div><div class="line"></div><div class="line"><span class="comment"># [学习使用Numpy简单的线性代数的运算]</span></div><div class="line"><span class="comment"># 计算特征值与特征向量</span></div><div class="line">eig_vals, eig_vecs = np.linalg.eig(cov_mat)</div><div class="line"></div><div class="line">print(<span class="string">'Eigenvectors \n%s'</span> %eig_vecs)</div><div class="line">print(<span class="string">'\nEigenvalues \n%s'</span> %eig_vals)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Make a list of (eigenvalue, eigenvector) tuples</span></div><div class="line">eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(eig_vals))]</div><div class="line"></div><div class="line"><span class="comment"># Sort the (eigenvalue, eigenvector) tuples from high to low</span></div><div class="line">eig_pairs.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># Visually confirm that the list is correctly sorted by decreasing eigenvalues</span></div><div class="line">print(<span class="string">'Eigenvalues in descending order:'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> eig_pairs:</div><div class="line">    print(i[<span class="number">0</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Explained Variance</span></div><div class="line">tot = sum(eig_vals)</div><div class="line">var_exp = [(i / tot)*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> sorted(eig_vals, reverse=<span class="keyword">True</span>)]</div><div class="line"></div><div class="line"><span class="keyword">with</span> plt.style.context(<span class="string">'ggplot'</span>):</div><div class="line">    plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line">    plt.bar(range(<span class="number">7</span>), var_exp, alpha=<span class="number">0.5</span>, align=<span class="string">'center'</span>,</div><div class="line">            label=<span class="string">'individual explained variance'</span>)</div><div class="line">    plt.ylabel(<span class="string">'Explained variance ratio'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Principal components'</span>)</div><div class="line">    plt.legend(loc=<span class="string">'best'</span>)</div><div class="line">    plt.tight_layout()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Projection matrix</span></div><div class="line"><span class="comment"># [假设前两个主成分占Explain Variance 的90%]选取前两个变量，构成Projection matrix</span></div><div class="line">matrix_w = np.hstack((eig_pairs[<span class="number">0</span>][<span class="number">1</span>].reshape(<span class="number">7</span>,<span class="number">1</span>), </div><div class="line">                      eig_pairs[<span class="number">1</span>][<span class="number">1</span>].reshape(<span class="number">7</span>,<span class="number">1</span>)</div><div class="line">                    ))</div><div class="line">print(<span class="string">'Matrix W:\n'</span>, matrix_w)</div><div class="line"></div><div class="line"><span class="comment"># Projection Onto the New Feature Space</span></div><div class="line">Y = X_std.dot(matrix_w)</div><div class="line"></div><div class="line"><span class="comment"># [学习使用sklearn做PCA]</span></div><div class="line"><span class="comment"># PCA in scikit-learn</span></div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</div><div class="line">pca = PCA().fit(X_std)</div><div class="line">plt.plot(np.cumsum(pca.explained_variance_ratio_))</div><div class="line">plt.xlim(<span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>)</div><div class="line">plt.xlabel(<span class="string">'Number of components'</span>)</div><div class="line">plt.ylabel(<span class="string">'Cumulativa explained variance'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA </div><div class="line">sklearn_pca = PCA(n_components=<span class="number">6</span>)</div><div class="line">Y_sklearn = sklearn_pca.fit_transform(X_std)</div><div class="line"></div><div class="line">print(Y_sklearn.shape)</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>补充下sns.heatmap的使用</p>
<blockquote>
<p>heatmap(data, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt=’.2g’, annot_kws=None, linewidths=0, linecolor=’white’, cbar=True, cbar_kws=None, cbar_ax=None, square=False, ax=None, xticklabels=True, yticklabels=True, mask=None, **kwargs)</p>
<p>Plot rectangular data as a color-encoded matrix.</p>
<p>This function tries to infer a good colormap to use from the data, but<br>this is not guaranteed to work, so take care to make sure the kind of<br>colormap (sequential or diverging) and its limits are appropriate.</p>
<p>This is an Axes-level function and will draw the heatmap into the<br>currently-active Axes if none is provided to the <code>ax</code> argument.  Part of<br>this Axes space will be taken and used to plot a colormap, unless <code>cbar</code><br>is False or a separate Axes is provided to <code>cbar_ax</code>.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">flights = sns.load_dataset(<span class="string">"flights"</span>)</div><div class="line">flights = flights.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>)</div><div class="line">ax = sns.heatmap(flights, linewidth=<span class="number">.5</span>)</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2010-22-47.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">flights = sns.load_dataset(<span class="string">"flights"</span>)</div><div class="line">flights = flights.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>)</div><div class="line">ax = sns.heatmap(flights, center=flights.loc[<span class="string">"January"</span>, <span class="number">1955</span>])</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2010-26-23.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV [Pyramid and Canny]]]></title>
      <url>/2017/02/23/OpenCV-Pyramid-and-Canny/</url>
      <content type="html"><![CDATA[<p>关于<a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/pyramids/pyramids.html" target="_blank" rel="external">图像金字塔</a>与边缘检测的结合。<br>我们知道，cv::pyrDown会损失图像的信息，其后再使用cv::pyrUP进行放大，会变得“模糊”。但是在用于边缘检测时，损失部分细节，可以获得更简洁的轮廓图。<br>测试代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>	<span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span>	<span class="title">main</span><span class="params">(	<span class="keyword">int</span>	argc,	<span class="keyword">char</span>**	argv	)</span>	</span>&#123;</div><div class="line">    cv::Mat	img_rgb,	img_gry,	img_cny;</div><div class="line">    cv::namedWindow(	<span class="string">"Example	Gray"</span>,		cv::WINDOW_AUTOSIZE	);</div><div class="line">    cv::namedWindow(	<span class="string">"Example	Canny"</span>,	cv::WINDOW_AUTOSIZE	);</div><div class="line">    cv::namedWindow(	<span class="string">"Example	Canny  DU"</span>,	cv::WINDOW_AUTOSIZE	);</div><div class="line"></div><div class="line">    img_rgb	=	cv::imread(	argv[<span class="number">1</span>]	);				cv::cvtColor(	img_rgb,	img_gry,	cv::COLOR_BGR2GRAY);</div><div class="line">    cv::imshow(	<span class="string">"Example	Gray"</span>,	img_gry	);</div><div class="line">    cv::Canny(	img_gry,	img_cny,	<span class="number">10</span>,	<span class="number">100</span>,	<span class="number">3</span>,	<span class="literal">true</span>	);</div><div class="line">    cv::imshow(	<span class="string">"Example	Canny"</span>,	img_cny	);</div><div class="line"></div><div class="line">     (img_gry, img_gry);</div><div class="line">    cv::pyrUp(img_gry, img_gry);</div><div class="line">    cv::Canny(	img_gry,	img_cny,	<span class="number">10</span>,	<span class="number">100</span>,	<span class="number">3</span>,	<span class="literal">true</span>	);</div><div class="line">    cv::imshow(	<span class="string">"Example	Canny  DU"</span>,	img_cny	);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出图像：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/canny.png" alt="canny"></p>
<p>参考： <strong>Learning    OpenCV    3: Computer    Vision    in    C++    with    the    OpenCV    Library</strong> [p68]</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV Wait!]]></title>
      <url>/2017/02/22/OpenCV-Play-Video/</url>
      <content type="html"><![CDATA[<p>环境： CLion Ubuntu16.04 OPenCV3.2.0</p>
<p>学习OpenCV基础时，在读取视频文件时发现一个问题。<br>按照这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>	<span class="meta-string">"opencv2/highgui/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>	<span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>	<span class="title">main</span><span class="params">(	<span class="keyword">int</span>	argc,	<span class="keyword">char</span>**	argv	)</span>	</span>&#123;</div><div class="line">    cv::namedWindow(	<span class="string">"Example3"</span>,	cv::WINDOW_AUTOSIZE	);</div><div class="line">    cv::VideoCapture	cap;</div><div class="line">    <span class="comment">//cap.open(	std::string(argv[1])	);</span></div><div class="line">    cap.open(<span class="string">"/home/shen/CLionProjects/MyCv/data/summaryVid.ogv"</span>);</div><div class="line">    cv::Mat	frame;</div><div class="line">    <span class="keyword">for</span>(;;)	&#123;</div><div class="line">        cap	&gt;&gt;	frame;</div><div class="line">        <span class="keyword">if</span>(	frame.empty() )	<span class="keyword">break</span>;					<span class="comment">//	Ran	out	of	film</span></div><div class="line">        cv::imshow(	<span class="string">"Example3"</span>,	frame	);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(	cvWaitKey(<span class="number">33</span>) &gt;= <span class="number">0</span> )	<span class="keyword">break</span>;</div><div class="line">        <span class="comment">//if(	cv::waitKey(33) &gt;= 0 )	break;</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>	<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>代码最后，第一个if可以播放完整视频，而第二个却只显示一帧画面。调试发现，cvWaitKey(33)在不按键时返回的是-1， cv::waitKey(33)返回的是255<br>那么，问题来了，这两个函数不一样吗？查了查，没查到区别。。。<br>经<a href="http://www.liusong.me/" target="_blank" rel="external">废帝童鞋</a>帮助，发现是个<a href="https://github.com/opencv/opencv/pull/7866" target="_blank" rel="external">bug</a>…<br>酸爽的夜晚，继续前行…</p>
<p>参考： <strong>Learning    OpenCV    3: Computer    Vision    in    C++    with    the    OpenCV    Library</strong> [p58]</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
