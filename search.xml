<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[寒假小记]]></title>
      <url>/2018/03/03/%E5%AF%92%E5%81%87%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>四十天的寒假马上就要过去了，原计划是要读四本书：《堂吉诃德》，<em>Data Structure Using C</em>, <em>Linear Algebra Done Right</em>和<em>Programming In Haskell</em>。</p>
<p><em>Data Structure Using C</em></p>
<blockquote>
<p>各种数据结构都讲的比较详细，后面的搜索和排序算法也写的挺好的。不过书上的代码有时候会有Bug…前面几章的习题基本过了一遍，后面没太有时间了，就把书上的代码都跑了一遍。笔记用Zim做的，放在<a href="https://github.com/shenxiangzhuang/DataStructureUsingC" target="_blank" rel="external">Github</a></p>
</blockquote>
<p><em>Linear Algebra Done Right</em></p>
<blockquote>
<p>一直听说这书比较好，所以拿来看下，大约花了二十多天才看完。书从Vector Space（而不是从行列式…）开始构建整个Linear Algebra的框架，全新的视角，收益良多。大部分证明可以看懂，不过自己写还是不太行…</p>
</blockquote>
<p><em>Programming In Haskell</em></p>
<blockquote>
<p>这本放到最后看的，没有时间了，所以返校前只看到了Chap8。本来想赶着看完，不过感觉看得太急没什么好处…就暂时搁置了。之后估计也没太多时间学Haskell了，差不多要等考研之后了。</p>
</blockquote>
<p>《堂吉诃德》</p>
<blockquote>
<p>虽然是讽刺骑士的小说，但是书上有很多值得深思的故事（尤其是那些和主人公无太大关系，很明显插入的故事）。另外，在这本书找到了很多答案——生活的答案。骑士！骑士！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CW&Regular expression]]></title>
      <url>/2018/02/24/CW-Regualr-expression/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>前几天终于撸完了那么C的数据结构…所以来刷下CodeWars，感觉一个3kyu的题目挺有意思，<a href="https://www.codewars.com/kata/calculator/train/python" target="_blank" rel="external">传送门</a>。就是评估一个四则运算的表达式，给出结果。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>这里首选的是用正则表达式，好久没写过都手生了…查了下文档和一些资料，发现用<code>re.sub</code>就能解决了，所以代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">symIn</span><span class="params">(self, string)</span>:</span></div><div class="line">		<span class="keyword">if</span> re.findall(<span class="string">r'\+|-|\*|\/'</span>, string) == []:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">		<span class="keyword">if</span> string[<span class="number">0</span>] == <span class="string">'-'</span> <span class="keyword">and</span> <span class="string">' '</span> <span class="keyword">not</span> <span class="keyword">in</span> string:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self, string)</span>:</span></div><div class="line">		<span class="comment"># print(string)</span></div><div class="line">		<span class="keyword">while</span> self.symIn(string):</div><div class="line">			<span class="comment"># *</span></div><div class="line">			<span class="function"><span class="keyword">def</span> <span class="title">_mul</span><span class="params">(matched)</span>:</span></div><div class="line">				num = float(matched.group(<span class="string">'num1'</span>)) * float(matched.group(<span class="string">'num2'</span>))</div><div class="line">				<span class="keyword">return</span> str(num)</div><div class="line">			string = re.sub(<span class="string">r'(?P&lt;num1&gt;[-\d.]+) \* (?P&lt;num2&gt;[-\d.]+)'</span>, repl=_mul, string=string,count=<span class="number">1</span>)</div><div class="line"></div><div class="line">			<span class="comment"># /</span></div><div class="line">			<span class="function"><span class="keyword">def</span> <span class="title">_div</span><span class="params">(matched)</span>:</span></div><div class="line">				num = float(matched.group(<span class="string">'num1'</span>)) / float(matched.group(<span class="string">'num2'</span>))</div><div class="line">				<span class="keyword">return</span> str(num)</div><div class="line">			string = re.sub(<span class="string">r'(?P&lt;num1&gt;[-\d.]+) \/ (?P&lt;num2&gt;[-\d.]+)'</span>, repl=_div, string=string,count=<span class="number">1</span>)</div><div class="line"></div><div class="line">			<span class="comment"># +</span></div><div class="line">			<span class="function"><span class="keyword">def</span> <span class="title">_add</span><span class="params">(matched)</span>:</span></div><div class="line">				num = float(matched.group(<span class="string">'num1'</span>)) + float(matched.group(<span class="string">'num2'</span>))</div><div class="line">				<span class="keyword">return</span> str(num)</div><div class="line">			string = re.sub(<span class="string">r'(?P&lt;num1&gt;[-\d.]+) \+ (?P&lt;num2&gt;[-\d.]+)'</span>, repl=_add, string=string,count=<span class="number">1</span>)</div><div class="line"></div><div class="line">			<span class="comment"># -</span></div><div class="line">			<span class="function"><span class="keyword">def</span> <span class="title">_sub</span><span class="params">(matched)</span>:</span></div><div class="line">				num = float(matched.group(<span class="string">'num1'</span>)) - float(matched.group(<span class="string">'num2'</span>))</div><div class="line">				<span class="keyword">return</span> str(num)</div><div class="line">			string = re.sub(<span class="string">r'(?P&lt;num1&gt;[-\d.]+) - (?P&lt;num2&gt;[-\d.]+)'</span>, repl=_sub, string=string,count=<span class="number">1</span>)</div><div class="line"></div><div class="line">		<span class="keyword">return</span> float(string)</div><div class="line"></div></pre></td></tr></table></figure>
<p>感觉思路还是比较清晰的。嗯，然后提交后看大佬们的操作,发现了竟然有用eval的…另外，之后还打算做个NLP的东西，之前一定要再重新过一遍正则 :(</p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="external">Python Doc</a><br><a href="https://www.crifan.com/python_re_sub_detailed_introduction/" target="_blank" rel="external">Blog</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> CodeWas </tag>
            
            <tag> Regular expression </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell&The Caesar Cipher]]></title>
      <url>/2018/02/07/Haskell-The-Caesar-Cipher/</url>
      <content type="html"><![CDATA[<h4 id="Overvier"><a href="#Overvier" class="headerlink" title="Overvier"></a>Overvier</h4><p>例子来自<em>Programming in Haskell</em>(很好的一本书，简要明了)， 主要是将list comprehension。仅仅短短几十行代码…充分体现了FP的concise…</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">module</span> FirstScript <span class="keyword">where</span></div><div class="line">  <span class="keyword">import</span> Test.QuickCheck</div><div class="line">  <span class="keyword">import</span> Test.HUnit</div><div class="line">  <span class="keyword">import</span> Data.Char</div><div class="line"></div><div class="line">  let2int :: <span class="type">Char</span> -&gt; <span class="type">Int</span></div><div class="line">  let2int c  = ord c - ord 'a'</div><div class="line">  int2let :: <span class="type">Int</span> -&gt; <span class="type">Char</span></div><div class="line">  int2let n = chr(ord 'a' + n)</div><div class="line"></div><div class="line">  shift :: <span class="type">Int</span> -&gt; <span class="type">Char</span> -&gt; <span class="type">Char</span></div><div class="line">  shift n c | isLower c = int2let((let2int c + n) `mod` <span class="number">26</span>)</div><div class="line">			| otherwise = c</div><div class="line"></div><div class="line">  encode :: <span class="type">Int</span> -&gt; <span class="type">String</span> -&gt; <span class="type">String</span></div><div class="line">  encode n xs = [shift n x | x &lt;- xs]</div><div class="line"></div><div class="line">  percent :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span> -&gt; <span class="type">Float</span></div><div class="line">  percent n m = (fromInteger n / fromInteger m)*<span class="number">100</span></div><div class="line"></div><div class="line">  count :: <span class="type">Char</span> -&gt; <span class="type">String</span> -&gt; <span class="type">Integer</span></div><div class="line">  count c string = sum[ <span class="number">1</span> | x &lt;- string, c == x ]</div><div class="line"></div><div class="line">  lowers :: <span class="type">String</span> -&gt; <span class="type">Integer</span></div><div class="line">  lowers xs = sum[ <span class="number">1</span> | x &lt;- xs, isLower x ]</div><div class="line"></div><div class="line">  freqs :: <span class="type">String</span> -&gt; [<span class="type">Float</span>]</div><div class="line">  freqs xs = [percent (count x xs) n | x &lt;- ['a'..'z']]</div><div class="line">		  <span class="keyword">where</span> n = lowers xs</div><div class="line">  table :: [<span class="type">Float</span> ]</div><div class="line">  table = [<span class="number">8.2</span>, <span class="number">1.5</span>, <span class="number">2.8</span>, <span class="number">4.3</span>, <span class="number">12.7</span>, <span class="number">2.2</span>, <span class="number">2.0</span>, <span class="number">6.1</span>, <span class="number">7.0</span>, <span class="number">0.2</span>, <span class="number">0.8</span>, <span class="number">4.0</span>, <span class="number">2.4</span>,</div><div class="line">		<span class="number">6.7</span>, <span class="number">7.5</span>, <span class="number">1.9</span>, <span class="number">0.1</span>, <span class="number">6.0</span>, <span class="number">6.3</span>, <span class="number">9.1</span>, <span class="number">2.8</span>, <span class="number">1.0</span>, <span class="number">2.4</span>, <span class="number">0.2</span>, <span class="number">2.0</span>, <span class="number">0.1</span>]</div><div class="line"></div><div class="line">  chisqr :: [<span class="type">Float</span>] -&gt; [<span class="type">Float</span>] -&gt; <span class="type">Float</span></div><div class="line">  chisqr os es = sum[ (o-e)^<span class="number">2</span> | (o, e) &lt;- zip os es]</div><div class="line"></div><div class="line">  rotate :: <span class="type">Int</span> -&gt; [a] -&gt; [a]</div><div class="line">  rotate n xs = drop n xs ++ take n xs</div><div class="line"></div><div class="line">  positions :: <span class="type">Eq</span> a =&gt; a -&gt; [a] -&gt; [<span class="type">Int</span>]</div><div class="line">  positions x xs = [ i | (x', i) &lt;- zip xs [<span class="number">0.</span>.n<span class="number">-1</span>], x' == x] <span class="keyword">where</span></div><div class="line">			n = length xs</div><div class="line"></div><div class="line">  crack :: <span class="type">String</span> -&gt; <span class="type">String</span></div><div class="line">  crack xs = encode (-factor) xs <span class="keyword">where</span></div><div class="line">			factor = head (positions (minimum chitab) chitab)</div><div class="line">			chitab = [chisqr (rotate n table') table | n &lt;- [<span class="number">0.</span><span class="number">.25</span>]]</div><div class="line">			table' = freqs xs</div><div class="line"></div><div class="line"><span class="comment">-- test data</span></div><div class="line"><span class="comment">-- crack (encode 3 "Haskell is fun and I love it!")</span></div><div class="line"><span class="comment">-- crack (encode 3 "Haskell is fun!")</span></div><div class="line"><span class="comment">-- crack (encode 3 "haskell is fun!")</span></div><div class="line"></div></pre></td></tr></table></figure>
<blockquote>
<p>ps:一开始看到用卡方值还一阵惊讶，我可能不是一个合格的玩统计的人…其实从前面开始讲词频的时候就该想到和分布有关，然后由于一般性，首先应该想到正态分布，进而就是”集成正态分布“的卡方分布了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Haskell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git命令积累]]></title>
      <url>/2018/02/06/Git%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>记录一些常用的Git命令。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Adding-an-existing-project-to-GitHub"><a href="#Adding-an-existing-project-to-GitHub" class="headerlink" title="Adding an existing project to GitHub"></a>Adding an existing project to GitHub</h5><p>将本地文件同步到Github，参考<a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Atom使用]]></title>
      <url>/2018/01/28/Atom%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>关于Atom使用的一些记录。</p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><code>Ctrl+，</code>打开setting.</p>
<p><code>Ctrl+Shift+B</code>，使用Script插件运行程序</p>
<h4 id="字体大小调整"><a href="#字体大小调整" class="headerlink" title="字体大小调整"></a>字体大小调整</h4><p>一般Editor的字体的调整，直接去Setting-&gt;Editor改就行了。至于插件的字体调整，如果插件本身无法设置，可以去stylesheet设置。可以Edit-&gt;Stylesheet或者Setting-&gt;Theme-&gt;stylesheet。</p>
<p>比如设置Script运行程序后的输出字体大小为16px，只需要在文件最后加上：</p>
<blockquote>
<p>.script-view .line {<br>  font-size: 16px;<br>}</p>
</blockquote>
<p>参考<a href="https://discuss.atom.io/t/change-font-size-in-console-when-using-script-package/19656/3" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Atom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Julia in Ubuntu]]></title>
      <url>/2018/01/28/Julia-in-Ubuntu/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>补上Jupyter三大将最后一个——Julia，目前每台有时间学了，先把环境搭建好。首先很简单的步骤安装好Julia，之后设置Jupyter上的kernel。最后是一些Atom里面的配置。</p>
<h4 id="Julia-installation"><a href="#Julia-installation" class="headerlink" title="Julia installation"></a>Julia installation</h4><p>Julia的安装及其简单，只需要到<a href="https://julialang.org/downloads/platform.html" target="_blank" rel="external">官网</a>下载安装文件，之后一个软链接就可以了。之后在终端直接输入<code>julia</code>即可进入交互式界面！</p>
<h4 id="Julia-kernel"><a href="#Julia-kernel" class="headerlink" title="Julia kernel"></a>Julia kernel</h4><p>同样的，让Jupyter notebook支持Julia也是及其简单。在交互式界面直接输入<code>Pkg.add(&quot;IJulia&quot;)</code>同样是一行的事。之后在终端输入<code>jupyter notebook</code>，浏览器上就可以看到新添加的Julia的kernel了。</p>
<h4 id="Julia-in-Atom"><a href="#Julia-in-Atom" class="headerlink" title="Julia in Atom"></a>Julia in Atom</h4><p>发现Atom一个叫<a href="https://atom.io/packages/hydrogen#plugins-for-hydrogen" target="_blank" rel="external">hydrogen</a>的插件，很好地支持Jupyter的一套kernel，正在测试中。其提供了集成各种kernel的<a href="https://nteract.gitbooks.io/hydrogen/docs/Installation.html" target="_blank" rel="external">文档</a></p>
]]></content>
      
        <categories>
            
            <category> Julia </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Julia </tag>
            
            <tag> Jupyter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dangling pointer and Lifetime]]></title>
      <url>/2018/01/24/Dangling-pointer-and-Lifetime/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>在CW刷C的题，一道7ku的题目写了快100行…（虽然完成率只有1%）,然后还出错了…折腾下改好了。回头发现原来是写了Dangling pointer.</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>将原问题抽象成下面的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">readData</span><span class="params">(<span class="keyword">char</span> s[<span class="number">10</span>])</span></span>&#123;</div><div class="line">	fgets(s, <span class="number">10</span>, <span class="built_in">stdin</span>);</div><div class="line">	<span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">	<span class="keyword">return</span> readData(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> *pch = foo();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s"</span>, pch);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>这里的main函数中的pch就是dangling pointer了，因为在foo函数执行完之后，s的内存就被释放掉了，此时pch指向的内存中保存的数据是undefined的。所以（可能由于内存未刷新的原因），多次执行这个程序，有时也会正常打印，但是大部分时候是不行的。</p>
<p>这就涉及到了变量的lifetime的问题（参考<a href="https://blog.feabhas.com/2010/09/scope-and-lifetime-of-variables-in-c/" target="_blank" rel="external">这里</a>），如上，s是属于最常见的automatic objects,所以其内存会随着函数执行的结束而释放。解决办法有两种，就是使用其他两种变量(static&amp;dynamic)来替换这里作为automatic的s。</p>
<h5 id="static"><a href="#static" class="headerlink" title="static"></a>static</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">readData</span><span class="params">(<span class="keyword">char</span> s[<span class="number">10</span>])</span></span>&#123;</div><div class="line">	fgets(s, <span class="number">10</span>, <span class="built_in">stdin</span>);</div><div class="line">	<span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">	<span class="keyword">return</span> readData(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> *pch = foo();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s"</span>, pch);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>只需要将原来foo函数中的<code>char s[10]</code>改为<code>static char s[10]</code>即可。这种方法虽然简单，但是有个缺点，就是这里分配的内存应为确定的，这里是10。所以不太方便。</p>
<h5 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">readData</span><span class="params">(<span class="keyword">char</span> s[<span class="number">10</span>])</span></span>&#123;</div><div class="line">	fgets(s, <span class="number">10</span>, <span class="built_in">stdin</span>);</div><div class="line">	<span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> *s;</div><div class="line">	s = <span class="built_in">malloc</span>(<span class="number">10</span>);</div><div class="line">	<span class="keyword">return</span> readData(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> *pch = foo();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s"</span>, pch);</div><div class="line">	<span class="built_in">free</span>(pch);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>这里改动也是不多的，只是用了<code>malloc</code>和<code>free</code>来动态地分配和释放内存。</p>
<p>其实，严格来说，dynamic也是属于automatic的，只不过有些不同：</p>
<blockquote>
<p>Strictly speaking (according to the C standard) dynamically allocated objects are also called automatics. However, it is important to differentiate between this type of object and automatics for two reasons:</p>
<p>The memory is allocated from a different memory area (the heap not the stack)</p>
<p>The lifetime is under the control of the programmer rather than the C run-time system.</p>
</blockquote>
<p>第二条是我们想要利用的属性，也就是可控的lifetime.</p>
]]></content>
      
        <categories>
            
            <category> C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[list comprehension in Haskell]]></title>
      <url>/2018/01/17/list-comprehension-in-Haskell/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>以建立简易的图书馆数据库为例，学习Haskell的list comprehension以及其他的关于QuickCheck，pattern match的一些内容。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">-- 图书馆数据库模型</span></div><div class="line"><span class="keyword">module</span> Library <span class="keyword">where</span></div><div class="line">  <span class="keyword">import</span> Test.QuickCheck</div><div class="line">  <span class="keyword">import</span> Data.List</div><div class="line"></div><div class="line">  <span class="comment">--在对问题建立模型时，首先考虑对象的类型</span></div><div class="line">  <span class="class"><span class="keyword">type</span> <span class="type">Person</span>  = <span class="type">String</span></span></div><div class="line">  <span class="class"><span class="keyword">type</span> <span class="type">Book</span>     = <span class="type">String</span></span></div><div class="line">  <span class="class"><span class="keyword">type</span> <span class="type">Database</span> = [(<span class="type">Person</span>, <span class="type">Book</span>)]</span></div><div class="line"></div><div class="line">  exampleBase :: <span class="type">Database</span></div><div class="line">  exampleBase =</div><div class="line">	[(<span class="string">"Alice"</span>, <span class="string">"Tintin"</span>), (<span class="string">"Anna"</span>, <span class="string">"Little Women"</span>),</div><div class="line">	 (<span class="string">"Alice"</span>, <span class="string">"Asterix"</span>), (<span class="string">"Roty"</span>, <span class="string">"Tintin"</span>)]</div><div class="line"></div><div class="line">  <span class="comment">-- 数据库上的函数</span></div><div class="line"></div><div class="line">  <span class="comment">-- 查询函数(lookup)</span></div><div class="line">  <span class="comment">-- 读者-&gt;图书</span></div><div class="line">  books      ::<span class="type">Database</span> -&gt; <span class="type">Person</span> -&gt; [<span class="type">Book</span>]</div><div class="line">  books dBase findPerson = [book | (person, book) &lt;- dBase, person == findPerson]</div><div class="line">  <span class="comment">-- 图书-&gt;读者</span></div><div class="line">  borrowers  ::<span class="type">Database</span> -&gt; <span class="type">Book</span> -&gt; [<span class="type">Person</span>]</div><div class="line">  borrowers dBase findBook = [person | (person, book) &lt;- dBase, book == findBook]</div><div class="line">  <span class="comment">-- 图书是否借出</span></div><div class="line">  borrowed   ::<span class="type">Database</span> -&gt; <span class="type">Book</span> -&gt; <span class="type">Bool</span></div><div class="line">  borrowed dBase findBook = findBook `elem` [book | (_, book) &lt;- dBase]</div><div class="line">  <span class="comment">-- 读者借书数目</span></div><div class="line">  numBorrowed::<span class="type">Database</span> -&gt; <span class="type">Person</span> -&gt; <span class="type">Int</span></div><div class="line">  numBorrowed dBase findPerson = length (books dBase findPerson)</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">-- 更新函数(update)</span></div><div class="line">  makeLoan  ::<span class="type">Database</span> -&gt; <span class="type">Person</span> -&gt; <span class="type">Book</span> -&gt;<span class="type">Database</span></div><div class="line">  makeLoan dBase findPerson findBook = dBase ++ [(findPerson, findBook)]</div><div class="line"></div><div class="line">  returnLoan::<span class="type">Database</span> -&gt; <span class="type">Person</span> -&gt; <span class="type">Book</span> -&gt; <span class="type">Database</span></div><div class="line">  returnLoan dBase findPerson findBook = [pair | pair &lt;- dBase, pair /= (findPerson, findBook)]</div><div class="line"></div><div class="line">  <span class="comment">-- Show Database</span></div><div class="line">  showDatabase::<span class="type">Database</span> -&gt; <span class="type">IO</span>()</div><div class="line">  showDatabase dBase =</div><div class="line">	putStrLn $ intercalate <span class="string">"\n"</span> [person++<span class="string">":"</span>++book | (person, book) &lt;- dBase]</div><div class="line"></div><div class="line">  <span class="comment">-- QuickCheck测试</span></div><div class="line">  <span class="comment">-- 如果将书借给读者person,然后查询借给读者person的书，那么book应该在列表中出现</span></div><div class="line">  prop_db1::<span class="type">Database</span> -&gt; <span class="type">Person</span> -&gt; <span class="type">Book</span> -&gt; <span class="type">Bool</span></div><div class="line">  prop_db1 dBase person book =</div><div class="line">	book `elem` loanedAfterLoan <span class="keyword">where</span></div><div class="line">	  afterLoan = makeLoan dBase person book</div><div class="line">	  loanedAfterLoan = books afterLoan person</div><div class="line"></div><div class="line">  <span class="comment">-- 如果读者将peson借的书book还回，然后查询读者person借阅的图书，那么book不应该在列表中</span></div><div class="line">  prop_db2::<span class="type">Database</span> -&gt; <span class="type">Person</span> -&gt; <span class="type">Book</span> -&gt; <span class="type">Bool</span></div><div class="line">  prop_db2 dBase person book =</div><div class="line">	  book `notElem` loanedAfterReturn <span class="keyword">where</span></div><div class="line">	  afterReturn = returnLoan dBase person book</div><div class="line">	  loanedAfterReturn = books afterReturn person</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="…"><a href="#…" class="headerlink" title="…"></a>…</h4><p>学haskell有一段时间了，感觉还是挺不错的。了解了很多新的东西（虽然现在还有很多理解不了）。感觉就elegant来言，haskell是不输Python的。目前了解到的typeclass感觉很强大（比OOP里面的多态继承要更加简洁），看了wiki，它也是首次出现在haskell里面的。其他是之前看到haskell不仅可以test,而且可以proof…test用的QuickCheck，感觉很好用,proof还没有看到。另外感觉haskell群的各位大佬都比较热心，经常是原理+demo的给讲解很基础的东西。慢慢学吧…</p>
]]></content>
      
        <categories>
            
            <category> Haskell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matrix in C]]></title>
      <url>/2018/01/08/Matrix-in-C/</url>
      <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>最近在看<em>Data Stuctures Using C</em>，在做Arrays的作业时涉及到 pass 2D array (matrix) in a function的问题，这里作下总结，参考<a href="https://stackoverflow.com/questions/3911400/how-to-pass-2d-array-matrix-in-a-function-in-c" target="_blank" rel="external">这里</a>.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>这里要实现在函数中传递二维数组有三种方法。</p>
<h4 id="Use-an-array-of-arrays"><a href="#Use-an-array-of-arrays" class="headerlink" title="Use an array of arrays"></a>Use an array of arrays</h4><p>相对来说，这种方法是最容易实现的，也是最好理解。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 18-1-8.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix[nrow][ncol])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix[nrow][ncol])</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix1[nrow][ncol], <span class="keyword">int</span> matrix2[nrow][ncol],</span></span></div><div class="line">			   <span class="keyword">int</span> matrix3[nrow][ncol]);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulMatrix</span><span class="params">(<span class="keyword">int</span> nrow1, <span class="keyword">int</span> ncol1, <span class="keyword">int</span> nrow2, <span class="keyword">int</span> ncol2,</span></span></div><div class="line">				<span class="keyword">int</span> matrix1[nrow1][ncol1], <span class="keyword">int</span> matrix2[nrow2][ncol2], <span class="keyword">int</span> matrix3[nrow1][ncol2]);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix[nrow][ncol], <span class="keyword">int</span> matrix3[ncol][nrow])</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// test data</span></div><div class="line"><span class="comment">// 1 3 5 7 9 1 2 3 4</span></div><div class="line"><span class="comment">// 2 4 6 8 0 1 2 3 4</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> nrow, ncol;</div><div class="line">	nrow = <span class="number">3</span>;</div><div class="line">	ncol = <span class="number">3</span>;</div><div class="line">	<span class="keyword">int</span> matrix1[nrow][ncol];</div><div class="line">	<span class="keyword">int</span> matrix2[nrow][ncol];</div><div class="line">	<span class="keyword">int</span> matrix3[nrow][ncol];</div><div class="line"></div><div class="line">	readMatrix(nrow, ncol, matrix1);</div><div class="line">	showMatrix(nrow, ncol, matrix1);</div><div class="line"></div><div class="line">	readMatrix(nrow, ncol, matrix2);</div><div class="line">	showMatrix(nrow, ncol, matrix2);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"m1 + m2 = "</span>);</div><div class="line">	addMatrix(nrow, ncol, matrix1, matrix2, matrix3);</div><div class="line">	showMatrix(nrow, ncol, matrix3);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"m1 X m2 = "</span>);</div><div class="line">	mulMatrix(nrow, ncol, nrow, ncol, matrix1, matrix2, matrix3);</div><div class="line">	showMatrix(nrow, ncol, matrix3);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"transform matrix: "</span>);</div><div class="line">	transMatrix(nrow, ncol, matrix1, matrix3);</div><div class="line">	showMatrix(ncol, nrow, matrix3);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix[nrow][ncol])</span></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Enter matrix data: "</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;matrix[i][j]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix[nrow][ncol])</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%4d "</span>, matrix[i][j]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix1[nrow][ncol], <span class="keyword">int</span> matrix2[nrow][ncol],</span></span></div><div class="line">			   <span class="keyword">int</span> matrix3[nrow][ncol])&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			matrix3[i][j] = matrix1[i][j] + matrix2[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulMatrix</span><span class="params">(<span class="keyword">int</span> nrow1, <span class="keyword">int</span> ncol1, <span class="keyword">int</span> nrow2, <span class="keyword">int</span> ncol2,</span></span></div><div class="line">			   <span class="keyword">int</span> matrix1[nrow1][ncol1], <span class="keyword">int</span> matrix2[nrow2][ncol2], <span class="keyword">int</span> matrix3[nrow1][ncol2])&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow1; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol2; ++j) &#123;</div><div class="line">			matrix3[i][j] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; nrow1; ++k) &#123;</div><div class="line">				matrix3[i][j] += matrix1[i][k] * matrix2[k][j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transMatrix</span><span class="params">(<span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol, <span class="keyword">int</span> matrix[nrow][ncol], <span class="keyword">int</span> matrix3[ncol][nrow])</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			matrix3[j][i] = matrix[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出</p>
<pre><code>Enter matrix data: 1 3 5 7 9 1 2 3 4

   1    3    5 
   7    9    1 
   2    3    4 
Enter matrix data: 2 4 6 8 0 1 2 3 4

   2    4    6 
   8    0    1 
   2    3    4 
m1 + m2 = 
   3    7   11 
  15    9    2 
   4    6    8 
m1 X m2 = 
  36   19   29 
  88   31   55 
  36   20   31 
transform matrix: 
   1    7    2 
   3    9    3 
   5    1    4 
</code></pre><h4 id="Use-an-array-of-pointers-to-arrays"><a href="#Use-an-array-of-pointers-to-arrays" class="headerlink" title="Use an array of pointers to arrays"></a>Use an array of pointers to arrays</h4><p>用二重指针实现二维数组也是差不多的，只不过当中涉及动态分配内存的问题。而这里又涉及到多次分配和释放内存的问题，所以定义了分配和释放内存的函数，然后就变成了三重指针，感觉可读性不如上面的好…</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateMemory</span><span class="params">(<span class="keyword">int</span> ***pmatrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeMemory</span><span class="params">(<span class="keyword">int</span> ***pmatrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readMatrix</span><span class="params">(<span class="keyword">int</span> **matrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMatrix</span><span class="params">(<span class="keyword">int</span> **matrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addMatrix</span><span class="params">(<span class="keyword">int</span> **matrix1, <span class="keyword">int</span> **matrix2, <span class="keyword">int</span> **matrix3, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulMatrix</span><span class="params">(<span class="keyword">int</span> **matrix1, <span class="keyword">int</span> **matrix2, <span class="keyword">int</span> **matrix3,</span></span></div><div class="line">			   <span class="keyword">int</span> nrow1, <span class="keyword">int</span> ncol1, <span class="keyword">int</span> nrow2, <span class="keyword">int</span> ncol2);</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transMatrix</span><span class="params">(<span class="keyword">int</span> **matrix, <span class="keyword">int</span> **matrix3, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// test data</span></div><div class="line"><span class="comment">// 1 3 5 7 9 1 2 3 4</span></div><div class="line"><span class="comment">// 2 4 6 8 0 1 2 3 4</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> nrow = <span class="number">3</span>;</div><div class="line">	<span class="keyword">int</span> ncol = <span class="number">3</span>;</div><div class="line">	<span class="keyword">int</span> **matrix1;</div><div class="line">	<span class="keyword">int</span> **matrix2;</div><div class="line">	<span class="keyword">int</span> **matrix3;</div><div class="line">	allocateMemory(&amp;matrix1, nrow, ncol);</div><div class="line">	allocateMemory(&amp;matrix2, nrow, ncol);</div><div class="line">	allocateMemory(&amp;matrix3, nrow, ncol);</div><div class="line"></div><div class="line">	readMatrix(matrix1, nrow, ncol);</div><div class="line">	showMatrix(matrix1, nrow, ncol);</div><div class="line">	readMatrix(matrix2, nrow, ncol);</div><div class="line">	showMatrix(matrix2, nrow, ncol);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"m1 + m2 = "</span>);</div><div class="line">	addMatrix(matrix1, matrix2, matrix3, nrow, ncol);</div><div class="line">	showMatrix(matrix3, nrow, ncol);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"m1 X m2 = "</span>);</div><div class="line">	mulMatrix(matrix1, matrix2, matrix3, nrow, ncol, nrow, ncol);</div><div class="line">	showMatrix(matrix3, nrow, ncol);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"transform matrix = "</span>);</div><div class="line">	transMatrix(matrix1, matrix3, nrow, ncol);</div><div class="line">	showMatrix(matrix3, ncol, nrow);</div><div class="line"></div><div class="line">	freeMemory(&amp;matrix1, nrow, ncol);</div><div class="line">	freeMemory(&amp;matrix2, nrow, ncol);</div><div class="line">	freeMemory(&amp;matrix3, nrow, ncol);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateMemory</span><span class="params">(<span class="keyword">int</span> ***pmatrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>&#123;</div><div class="line">	*pmatrix = <span class="built_in">malloc</span>(nrow * <span class="keyword">sizeof</span> * *pmatrix);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		(*pmatrix)[i] = <span class="built_in">malloc</span>(ncol * <span class="keyword">sizeof</span> * (*pmatrix)[i]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeMemory</span><span class="params">(<span class="keyword">int</span> ***pmatrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nrow; ++j) &#123;</div><div class="line">		<span class="built_in">free</span>((*pmatrix)[j]);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">free</span>(*pmatrix);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readMatrix</span><span class="params">(<span class="keyword">int</span> **matrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Enter matrix data: "</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, *(matrix+i)+j);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMatrix</span><span class="params">(<span class="keyword">int</span> **matrix, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%3d "</span>, *(*(matrix + i) + j));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addMatrix</span><span class="params">(<span class="keyword">int</span> **matrix1, <span class="keyword">int</span> **matrix2, <span class="keyword">int</span>**matrix3,</span></span></div><div class="line">			   <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			matrix3[i][j] = matrix1[i][j]+matrix2[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulMatrix</span><span class="params">(<span class="keyword">int</span> **matrix1, <span class="keyword">int</span> **matrix2, <span class="keyword">int</span> **matrix3,</span></span></div><div class="line">			   <span class="keyword">int</span> nrow1, <span class="keyword">int</span> ncol1, <span class="keyword">int</span> nrow2, <span class="keyword">int</span> ncol2)&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow1; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol2; ++j) &#123;</div><div class="line">			matrix3[i][j] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; ncol1; ++k) &#123;</div><div class="line">				matrix3[i][j] += matrix1[i][k] * matrix2[k][j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transMatrix</span><span class="params">(<span class="keyword">int</span> **matrix, <span class="keyword">int</span> **matrix3, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			matrix3[j][i] = matrix[i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>Enter matrix data: 1 3 5 7 9 1 2 3 4

  1   3   5 
  7   9   1 
  2   3   4 
Enter matrix data: 2 4 6 8 0 1 2 3 4

  2   4   6 
  8   0   1 
  2   3   4 
m1 + m2 = 
  3   7  11 
 15   9   2 
  4   6   8 
m1 X m2 = 
 36  19  29 
 88  31  55 
 36  20  31 
transform matrix = 
  1   7   2 
  3   9   3 
  5   1   4 
</code></pre><h4 id="Use-a-1-dimensional-array-and-fixup-the-indices"><a href="#Use-a-1-dimensional-array-and-fixup-the-indices" class="headerlink" title="Use a 1-dimensional array and fixup the indices"></a>Use a 1-dimensional array and fixup the indices</h4><p>一开始还没有看到这种方法的特别之处，但是看前面两种方法就能看出。第一种是用的静态的数组，第二种是动态的数组，而且这两种方法，也只能对应选择静态和动态。而第三种却是两者都可以——<em>This can be used with both statically allocated (fixed-size) and dynamically allocated arrays</em>, 而本质上<em>C considers a two-dimensional array as an array of one-dimensional arrays</em>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readMatrix</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMatrix</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addMatrix</span><span class="params">(<span class="keyword">int</span> *array1, <span class="keyword">int</span> *array2, <span class="keyword">int</span> *array3, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulMatrix</span><span class="params">(<span class="keyword">int</span> *array1, <span class="keyword">int</span> *array2, <span class="keyword">int</span> *array3,</span></span></div><div class="line">			   <span class="keyword">int</span> nrow1, <span class="keyword">int</span> ncol1, <span class="keyword">int</span> nrow2, <span class="keyword">int</span> ncol2);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transMatrix</span><span class="params">(<span class="keyword">int</span> *array1, <span class="keyword">int</span> *array3, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// test data</span></div><div class="line"><span class="comment">// 1 3 5 7 9 1 2 3 4</span></div><div class="line"><span class="comment">// 2 4 6 8 0 1 2 3 4</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> nrow, ncol;</div><div class="line">	nrow = <span class="number">3</span>;</div><div class="line">	ncol = <span class="number">3</span>;</div><div class="line">	<span class="keyword">int</span> *array1;</div><div class="line">	<span class="keyword">int</span> *array2;</div><div class="line">	<span class="keyword">int</span> *array3;</div><div class="line">	<span class="comment">// get memory</span></div><div class="line">	array1 = <span class="built_in">malloc</span>(nrow * ncol * <span class="keyword">sizeof</span> *array1);</div><div class="line">	array2 = <span class="built_in">malloc</span>(nrow * ncol * <span class="keyword">sizeof</span> *array2);</div><div class="line">	array3 = <span class="built_in">malloc</span>(nrow * ncol * <span class="keyword">sizeof</span> *array3);</div><div class="line"></div><div class="line">	readMatrix(array1, nrow, ncol);</div><div class="line">	showMatrix(array1, nrow, ncol);</div><div class="line">	readMatrix(array2, nrow, ncol);</div><div class="line">	showMatrix(array2, nrow, ncol);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\nm1+m2: \n"</span>);</div><div class="line">	addMatrix(array1, array2, array3, nrow, ncol);</div><div class="line">	showMatrix(array3, nrow, ncol);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\nm1xm2: \n"</span>);</div><div class="line">	mulMatrix(array1, array2, array3, nrow, ncol, nrow, ncol);</div><div class="line">	showMatrix(array3, nrow, ncol);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\ntrans m1: \n"</span>);</div><div class="line">	transMatrix(array1, array3, nrow, ncol);</div><div class="line">	showMatrix(array3, ncol, nrow);</div><div class="line"></div><div class="line">	<span class="comment">// free memory</span></div><div class="line">	<span class="built_in">free</span>(array1);</div><div class="line">	<span class="built_in">free</span>(array2);</div><div class="line">	<span class="built_in">free</span>(array3);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readMatrix</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span> </span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Enter Matrix data: "</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">array</span>[i * ncol + j]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMatrix</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%3d"</span>, <span class="built_in">array</span>[i * ncol + j]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addMatrix</span><span class="params">(<span class="keyword">int</span> *array1, <span class="keyword">int</span> *array2, <span class="keyword">int</span> *array3, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			array3[i * ncol + j] = array1[i * ncol + j] + array2[i * ncol + j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulMatrix</span><span class="params">(<span class="keyword">int</span> *array1, <span class="keyword">int</span> *array2, <span class="keyword">int</span> *array3,</span></span></div><div class="line">			   <span class="keyword">int</span> nrow1, <span class="keyword">int</span> ncol1, <span class="keyword">int</span> nrow2, <span class="keyword">int</span> ncol2) &#123;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow1; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol2; ++j) &#123;</div><div class="line">			array3[i * ncol2 + j] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; ncol1; ++k) &#123;</div><div class="line">				array3[i * ncol2 + j] += array1[i * ncol1 + k] * array2[k * ncol2 + j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transMatrix</span><span class="params">(<span class="keyword">int</span> *array1, <span class="keyword">int</span> *array3, <span class="keyword">int</span> nrow, <span class="keyword">int</span> ncol)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nrow; ++i) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ncol; ++j) &#123;</div><div class="line">			array3[j * nrow + i] = array1[i * ncol + j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>Enter Matrix data: 1 3 5 7 9 1 2 3 4

  1  3  5
  7  9  1
  2  3  4
Enter Matrix data: 2 4 6 8 0 1 2 3 4

  2  4  6
  8  0  1
  2  3  4

m1+m2: 

  3  7 11
 15  9  2
  4  6  8

m1xm2: 

 36 19 29
 88 31 55
 36 20 31

trans m1: 

  1  7  2
  3  9  3
  5  1  4
</code></pre>]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[非它，是你]]></title>
      <url>/2018/01/05/%E9%9D%9E%E5%AE%83%EF%BC%8C%E6%98%AF%E4%BD%A0/</url>
      <content type="html"><![CDATA[<p>  大部分时候，我们连自己是谁都是说不清楚的，更遑论说清楚其他的东西了。</p>
<p>  早先看过一本书，书名为《遇见未知的自己》，算不得什么好书（有点类似心灵鸡汤那种，不推荐看）。但是里面讨论了一个有趣的问题，值得我们好好思考下——我是谁？看到这个问题，我们首先想到的答案大概就是自己的名字——我是xxx。显然这不是答案——如果有人和你一样叫xxx，那么你们岂不是成了一个人？同样的，用我们的职业，地址，身份等几乎所有的东西都不能作为这个问题的答案。一个看似荒谬，但也许有一定道理的答案就是——非它，我就是我。此中意味，值得我们去细细思量。</p>
<p>  关于是谁的问题，也可以用弗洛伊德的想法来尝试解答。依弗所言，完整的人格有三部分组成——本我，自我和超我，而其中自我是人格的执行者。虽说自我在执行上占据主导，而本质上还是三者共存的局面，而他们之间也存在着其他千丝万缕的关系。所以，与其说不知道自己是谁，不如说不知道那个才是自己。</p>
<p>  以上，我们必须要认识到一点，那就是，我们有很多事情是难以说清楚的。其实，就像上面讨论的问题一样，我们遇到的大部分的问题都是围绕两个字来的——选择，这也是这篇文章想要讨论的东西。</p>
<p>  说人生是路真是个很好的比喻。路不总是平的，所以我们要翻山越岭；路不总是直的，所以我们在岔路口总要作出选择。考虑最简单的情况，即使每次只是在两者中选择一个，在10次选择后，也会有1024种不同的情况，在50次选择后就会有1125899906842624种情况，在100次选择后就有1267650600228229401496703205376种情况。所以，每一次的选择都显得至关重要。而随之而来的一个关键的问题就是如何作出选择。</p>
<p>  大多数的时候，当我们面临选择的时候，一般是两者之间难以权衡时作出选择（很好决定的事情就与选择无关了…），从概率上讲，选择其种任何一种情况的概率是均等的，为1/2。所以，在刚刚作出选择后，我们总是没有绝对的把握说自己作出了绝对正确的选择，这点毋庸置疑。不过，在经过一段时间后，我们一般能从事情的发展中获得一定的反馈，从而明白自己做的决定是否是正确的，这也是显而易见的。但是，最重要的一点却容易被忽略——我们总是在做了太多错误的选择之后才找到何为正确。这样不对，这样也不对，这样或许可以，还是不行，也许这样，就是这样。为什么说这点是最重要的呢？因为每一次的选择都是有代价的，到达正确之前的错误选择越多，代价也随之上升。而在这漫长的选择过程中，毫无疑问，很多代价都是逐渐增加的，越来越刻骨铭心，越来越无法承受……因为，在这个过程中，可以出现的，可以消亡的东西，有太多太多。</p>
<p>  每一个选择都会造就不同的自己，不同的人生。另，不要忽略一点，我们在作出选择的同时，所有人也在作出自己的选择，大环境也会随之变化，这种变化的情况，毫无疑问也是指数级的。以上，我们必须认识到，大部分时候，我们必须作出选择，在到达正确之前，代价与之伴随。</p>
<p>  关于选择，有太多的故事。在《飘》里面，女主到达自己正确的选择花了多少年？又经历了多少事呢？又是谁，”昨夜西风凋碧树，独上高楼，望尽天涯路“， ”衣带渐宽终不悔，为伊消得人憔悴“， ”众里寻他千百度，蓦然回首，那人却在灯火阑珊处“。一般而言，到达正确，要经历的事情太多太多。</p>
<p>  然而，或许存在另外一种可能。假如去挑一件首饰，好比一件玉镯。相比精挑细选，仔细排除不想要的，有没有这种可能呢？不仔细对比玉镯的材质，外观，工艺和款式等，直接选中那个，一眼看上就可以，然后戴上去也刚刚好的呢？</p>
<p>  一直认为是存在这种可能的。不是”非它，是你“，而是”就是你“。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小小白搬砖记——2017]]></title>
      <url>/2017/12/30/%E5%B0%8F%E5%B0%8F%E7%99%BD%E6%90%AC%E7%A0%96%E8%AE%B0%E2%80%94%E2%80%942017/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>  小小白是在群里用的昵称，嗯，与肤色无关。2017年依旧很快，这里记录下今年搬砖的情况。</p>
<h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><p>  <strong>数分</strong>。16年下半年（大二上）开始学的，一学期看了大概六章，基本看不懂，课后题也做不出…台大的公开课配合着看也是力不从心。后17年上半年（大二下）在万门上看公开课，依然跟不上，遂止。目前打算大四下用华东师范大学那本系统学了。</p>
<p>  <strong>微积分</strong>。看的是 <em>Calculus With Analytic Geometry</em>,暑假提前来学校大概一个月，除了曲面积分那里看得比较快，其他内容是撸完了的，习题未作，打算重读的时候做下。</p>
<p>  <strong>线性代数</strong>。看了点<em>Practical Linear Algebra</em>，当闲书看的，目前不打算去深入学。</p>
<p>  <strong>数理统计</strong>。开非参的课，开始有点懵，查数理统计资料。看的厦大程细玉的《数理统计》，写的很好。目前还剩两章多一点没看完，考完试打算先撸完这本。同时看了<em>Statistical Inference</em>的前三章，一开始是没有做题的，后发现往后看不懂…于是开始刷课后题，大概一个小时搞清楚一道题，尚可。受益匪浅，打算18年看完。</p>
<p>  <strong>概率论</strong>。<em>Statistical Inference</em>前几章也是概率论的内容，基本上是很充分了。不过偶然拿到了清华教概率论的教材和Reference Books。所以又买了本<em>Elementary Probability Theory</em>来看，只看了第一章，难度尚可，打算寒假撸完。</p>
<h4 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h4><p>  <strong>Cpp</strong>。上半年还是玩的CV，看了不少书，感觉<em>OpenCV 3 Computer Vision Application Programming Cookbook - Third Edition</em>算是很好的入门书，也在博客上整理了这本书的笔记。另外<em>OpenCv By Example</em>也还可以，以例子为主导，挺好玩的。最后，总算达到预想的检测行人的目标，虽然用的是已经被业界摒弃的Hog+SVM…由于多种原因，大三课多，老爷机跑不动NN，DL理论未学等，暂时放下CV。买了本<em>Discovering Modern C++</em>,感觉难度还行，不过目前Cpp玩的不熟悉（CV用到的Cpp的东西比较少…)，打算慢慢看这本。</p>
<p>  <strong>C</strong>。打算正式开始系统学习C，从数据结构入手，用的<em>Data Structure Using C</em>。只看了一百多页，寒假撸完。</p>
<p>  <strong>Python</strong>。写了几个爬虫，并进行了简单的数据分析。看了几本可视化的书，基本都是PACKT的。大致看了一遍《统计学习方法》，Python实现了前几章的几个简单的算法。<em>Machine Learning In Action</em>看到了SVM那里，前几章都写的很精彩。</p>
<p>  <strong>Octave/Matlab</strong>。在Coursera撸完了Andrew Ng的ML课程，用的Octave做作业。话说这个课程还是挺好的，最后成绩也还行，没钱买证书2333。</p>
<p>  <strong>R</strong>。为了做作业，撸了几章<em>R in Action</em>…其他非参数统计，EDA，统计预测和决策的作业也都是用R来做的…嗯，写作业方便的很呢。</p>
<p>  <strong>Haskell</strong>。接触没多久，很吸引人的一门语言，当然也难的很…知道用它可以证明定理的时候，瞬间给跪orz…</p>
<h4 id="文史"><a href="#文史" class="headerlink" title="文史"></a>文史</h4><p>  今年还是重读了一些书的。《穆斯林的葬礼》、《热爱生命》、《旷世的忧伤》。<br>  新看的书也很多不错的。王小波全集（其中最喜欢《寻找无双》、《爱你就像爱生命》），《第二十二条军规》(好看!)、《海狼》、《数学之美》。看了点《史记》，三皇五帝也是萌的不行啊:-)</p>
<h4 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h4><p>  立志锻炼，以求跑半马，然而最多只跑到12KM，开学之后就很少去跑步了…跟同学学游泳，去了一次大致弄懂了流程，然后一直学了快2个小时几乎没休息，游泳肩了,后，溜了溜了…<br>  做了两件别人看来似乎不可能的事。有一件，自认无望，然后基本成了。另一件，自认很稳，然而差得远…<br>  2018你好，很高兴认识你~</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cmake使用]]></title>
      <url>/2017/12/18/Cmake%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>一直使用的Clion写C&amp;Cpp，编译都是用cmake文件来，这里记录下使用过程中遇到的问题及解决方法。</p>
<h4 id="链接math-h库"><a href="#链接math-h库" class="headerlink" title="链接math.h库"></a>链接math.h库</h4><p>若是<code>.c</code>源文件包含了<code>math</code>库，那么我们在命令行用<code>gcc</code>编译的时候可以使用<code>-lm</code>来实现，如下：</p>
<blockquote>
<p>gcc fib.c -lm -o fibo</p>
</blockquote>
<p>参考<a href="https://stackoverflow.com/questions/8671366/undefined-reference-to-pow-and-floor" target="_blank" rel="external">stackoverflow</a></p>
<blockquote>
<p>ps:在Linux下cc与gcc是等价的，cc原是Unix下的c compiler,gcc是其在Linux下的替代。参考<a href="http://www.cnblogs.com/zhouyinhui/archive/2010/02/01/1661078.html" target="_blank" rel="external">这里</a></p>
</blockquote>
<p>而在Clion中就需要修改<code>CMakeLists.txt</code>文件,最后加上：</p>
<blockquote>
<p>target_link_libraries(NAME m)</p>
</blockquote>
<p>参考<a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206607085-CLion-Enabling-math-h-for-C-projects" target="_blank" rel="external">intellij-support</a></p>
]]></content>
      
        <categories>
            
            <category> C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C </tag>
            
            <tag> Cmake </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell in Ubuntu]]></title>
      <url>/2017/11/12/Haskell-in-Ubuntu/</url>
      <content type="html"><![CDATA[<h3 id="基础集成开发环境搭建"><a href="#基础集成开发环境搭建" class="headerlink" title="基础集成开发环境搭建"></a>基础集成开发环境搭建</h3><p>在Ubuntu下配置集成Haskell集成开发环境。首先是按照官网教程，一条命令直接安装了haskell plateform、之后尝试配置一个和leksah关联的IDE，一直出错，所以就换成Atom来配置了。直接apm安装一些插件后，必须添加一个运行脚本的插件才可以直接在Atom编译并运行haskell。测试发现，Atom没有办法交互式地输入数据到程序，所以暂时安装了一个可以调用终端的插件代替。配置过后，发现Atom还挺好看~</p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="将GHCi的终端提示符永久替换为λ"><a href="#将GHCi的终端提示符永久替换为λ" class="headerlink" title="将GHCi的终端提示符永久替换为λ"></a>将GHCi的终端提示符永久替换为λ</h4><p>直接新建<code>~/.ghci</code>文件，并写入：</p>
<blockquote>
<p>:set prompt “\ESC[1;34m%s\n\ESC[0;34mλ&gt; \ESC[m”</p>
</blockquote>
<p>这样进入GHCi（不会成功显示λ）将会有如下提示：</p>
<blockquote>
<p>GHCi, version 7.10.3: <a href="http://www.haskell.org/ghc/" target="_blank" rel="external">http://www.haskell.org/ghc/</a>  :? for help<br><em>*</em> WARNING: /home/shensir/.ghci is writable by someone else, IGNORING!<br>Suggested fix: execute ‘chmod go-w /home/shensir/.ghci’</p>
</blockquote>
<p>按照提示执行下面的命令即可修复：</p>
<blockquote>
<p>chmod go-w /home/shensir/.ghci</p>
</blockquote>
<p>这样每次回车都会产生两行，第一行是所在module,第二行是一个λ。好看且方便~</p>
<p>参考<a href="https://coderwall.com/p/13h9bw/colored-ghci-prompt-with-and-modules-on-separate-lines" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> Haskell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Haskell </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nonparametric Statistics in R]]></title>
      <url>/2017/11/02/Nonparametric-Statistics-in-R/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>关于非参数统计，感觉还是比较实用的。这里记录下在R中的对应实现。本来打算自己把全部的方法总结下，但是看到了<a href="https://rpubs.com/xuefliang/153258" target="_blank" rel="external">这个</a>，有前辈已经总结的比较好了。所以这里只是在此基础上进行一些更加详细的补充。</p>
<p>参考的书也是我们的教科书，中国统计出版社《非参数统计》，吴喜之，赵博娟两位老师写的。非常佩服作者基本全是自己实现全部的方法，虽说注释不太友好…偶尔有些错误。此外打算参考<em>Applied Nonparametric Statistical Methods</em>和<a href="https://onlinecourses.science.psu.edu/stat464/node/2" target="_blank" rel="external">PSU的课程</a>一起学习.</p>
<h3 id="教科书代码"><a href="#教科书代码" class="headerlink" title="教科书代码"></a>教科书代码</h3>]]></content>
      
        <categories>
            
            <category> R </category>
            
        </categories>
        
        
        <tags>
            
            <tag> R </tag>
            
            <tag> Nonparametric Statistics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Rank, Stem-Leaf in R]]></title>
      <url>/2017/11/01/Rank-Stem-Leaf-in-R/</url>
      <content type="html"><![CDATA[<iframe src="http://nbviewer.jupyter.org/github/shenxiangzhuang/EDA-Course-WIth-R/blob/master/Chap1_rank_stem.ipynb" width="700" height="700"></iframe>
]]></content>
      
        <categories>
            
            <category> R </category>
            
        </categories>
        
        
        <tags>
            
            <tag> R </tag>
            
            <tag> EDA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Docker!]]></title>
      <url>/2017/10/24/Hello-Docker/</url>
      <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>一直不清楚Docker怎么玩，只知道很强…打算学习下怎么用。</p>
<p>关于版本：</p>
<blockquote>
<p>Docker CE is the simple classical OSS Docker Engine.</p>
<p>Docker EE is Docker CE with certification on some systems and support by Docker Inc.</p>
<p>Docker CS (Commercially Supported) is kind of the old bundle version of Docker EE for versions &lt;= 1.13.</p>
</blockquote>
<p>这里装的是CE.</p>
<h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><p>基本上按照官网教程来的。</p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p>先是<a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/" target="_blank" rel="external">Get Docker CE for Ubuntu</a>, 选用的是<code>Install using the repository</code>。一切正常。</p>
<blockquote>
<p>之后尝试<code>docker run -it ubuntu bash</code>，然后就进去了一个环境，但是怎么也无法退出…参考<a href="https://forums.docker.com/t/container-stops-upon-exit-from-the-terminal/1267/2" target="_blank" rel="external">这里</a>,使用<code>CTRL+p CTRL+q</code>退出到了原来的环境。</p>
</blockquote>
<h4 id="Post-installation-steps-for-Linux"><a href="#Post-installation-steps-for-Linux" class="headerlink" title="Post-installation steps for Linux"></a>Post-installation steps for Linux</h4><p>参考<a href="https://docs.docker.com/engine/installation/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="external">这里</a>,只是设置了非root的权限，其他的暂时没去管。</p>
<h4 id="Build-and-run-your-first-app"><a href="#Build-and-run-your-first-app" class="headerlink" title="Build and run your first app"></a>Build and run your first app</h4><p>参考<a href="https://docs.docker.com/get-started/" target="_blank" rel="external">这里</a>进行下一步的操作。</p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[R In Jupyter]]></title>
      <url>/2017/10/24/R-In-Jupyter/</url>
      <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>最近写R，包括作笔记都是习惯在RStudio用RMD写，之后发布到rpubs，然后到博客这里做个简单介绍，附上链接…感觉略麻烦，想着之前发现可以在hexo直接显示Jupyter Notebook，用Python做过测试，感觉还不错。所以想着用Jupyter Notebook来写R。</p>
<blockquote>
<p>ps:现在才知道Jupyter–&gt;Julia+Python+R</p>
</blockquote>
<h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>直接参考<a href="https://github.com/IRkernel/IRkernel" target="_blank" rel="external">Github地址</a>进行安装，在R中运行：</p>
<blockquote>
<p>install.packages(‘devtools’)<br>devtools::install_github(‘IRkernel/IRkernel’)<br># or devtools::install_local(‘IRkernel-master.tar.gz’)<br>IRkernel::installspec()  # to register the kernel in the current R installation</p>
</blockquote>
<p>之后运行Jupyter Notebook, 在new按钮下就有了创建R脚本的选项。</p>
<h4 id="添加新的库"><a href="#添加新的库" class="headerlink" title="添加新的库"></a>添加新的库</h4><p>通过上面的方式，运行R完全可以，也自带了一些经常用到的库。但是我们可能要添加新的库，这时候也可以通过命令行安装。</p>
<p>在Notebook上查看所有安装的包，然后找到对应的路径。再到终端，以<code>root</code>运行R<code>sudo R</code>（需要权限）,之后运行<code>install.packages(&quot;lib name&quot;, lib=&quot;lib path&quot;)</code>（lib name替换为包名称, lib path替换为之前查看到的路径）即可。</p>
<h3 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h3><p>看到Github上也提供了用Docker来配置的方法。话说一直不清楚Docker怎么玩的…这次打算研究下。</p>
]]></content>
      
        <categories>
            
            <category> R </category>
            
        </categories>
        
        
        <tags>
            
            <tag> R </tag>
            
            <tag> Jupyter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linear Regression In R]]></title>
      <url>/2017/10/22/Linear-Regression-In-R/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>开了统计预测与决策的课，老师上课用的Eviews，用了下感觉一般，所以找R来实现看看。所以就先从回归开始了…</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>首先是随便Google了一个简单几页的<a href="http://www.montefiore.ulg.ac.be/~kvansteen/GBIO0009-1/ac20092010/Class8/Using%20R%20for%20linear%20regression.pdf" target="_blank" rel="external">教程</a>走了一般流程,发现挺靠谱的…接着用两天撸完了<em>R in Action</em>的第八章，也就是回归部分。写的很好，用RMD做了笔记，放在<a href="http://rpubs.com/shenxiangzhuang/regression" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> R </category>
            
        </categories>
        
        
        <tags>
            
            <tag> R </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eviews 安装]]></title>
      <url>/2017/10/14/Eviews-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>关于Eviews9（windows）的安装。</p>
<p><strong>安装文件链接</strong>：</p>
<blockquote>
<p>链接: <a href="https://pan.baidu.com/s/1eSEjcx8" target="_blank" rel="external">https://pan.baidu.com/s/1eSEjcx8</a> 密码: 248h</p>
</blockquote>
<p>里面有32Bit和64Bit的安装文件。</p>
<p><strong><br>安装过程</strong></p>
<p>可以参考crack文件夹下的README文件。就是，前面的安装一直默认即可。<br>等到出现Serial Number的时候，上面输入<code>Demo</code>即可（可能不是必须的，不过最后还是写上这个），下面的是程序自动检测到的你的计算机用户名，不用管。如下：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201710/IMG_20171014_150731.jpg" alt=""></p>
<p>之后再一路默认即可，无非就是选择下安装的路径这些。直到出现下面这个，询问是否检查更新，禁止即可。</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201710/IMG_20171014_150807.jpg" alt=""></p>
<p>最后再一路默认到最后即可。完成安装后，桌面会出现Eviews的快捷方式。注意这时候直接运行是不可以的，因为还没有激活。只需要找到从百度云下载的文件中，crack文件夹下的Patch文件，运行，点击左侧patch,等待补丁打好退出即可， 如图。</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201710/IMG_20171014_151206.jpg" alt=""></p>
<p>这时候再运行桌面的快捷方式就可以了。</p>
<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><p>对于Mac的安装，可以到Eviews官网下载Students Version, 目前版本应该是9.5的。只需要填一些信息就可以了。测试的时候用的学校的教育网邮箱是可以的。也可以用自己的其他邮箱试下，不行再去校内门户的邮件系统申请一个教育网邮箱进行申请。</p>
<p>嗯…还是支持正版好些orz…</p>
<h4 id="Student-Version-补充"><a href="#Student-Version-补充" class="headerlink" title="Student Version 补充"></a>Student Version 补充</h4><p>有些同学说破解文件报毒…我这没有360没报orz..用win10自带的杀毒软件扫了下，是安全的，所以这个一般不用担心。不过还是有的补丁程序没法运行，所以，可以用老师的那个老点的版本，也可以用Student Version（9.5版的，算是最新了，而且Win,Mac都有，而且还免费，力荐啊orz..。）。刚把上面的那个卸了，试了下学生版，很简单几步就可以了。</p>
<h5 id="准备：邮箱"><a href="#准备：邮箱" class="headerlink" title="准备：邮箱"></a>准备：邮箱</h5><blockquote>
<p>[更]:刚试了下，QQ邮箱也是可以的，大约30s就可以收到邮件。</p>
</blockquote>
<p>前面说了，测试用的学校的教育网邮箱，是可以的。可以先用自己的其他邮箱试下，不行再去<a href="http://hd2.hainu.edu.cn/homeN/" target="_blank" rel="external">校内门户</a>申请一个。登录进去校内门户，右侧第一个就是邮件系统，进去申请就可以了。</p>
<h5 id="填写注册信息"><a href="#填写注册信息" class="headerlink" title="填写注册信息"></a>填写注册信息</h5><p>首先到<a href="http://www.eviews.com/EViews9/EViews9SV/evstud9.html" target="_blank" rel="external">这里</a>,看到下面的<code>Free Download</code>,点进去，来到<a href="http://register1.eviews.com/Lite/" target="_blank" rel="external">注册页面</a>,这里填写好相关的信息即可。</p>
<h5 id="查收邮件"><a href="#查收邮件" class="headerlink" title="查收邮件"></a>查收邮件</h5><p>填好后会很快收到邮件（如果收不到的话可能就是自己的邮箱不行，就需要按照前面那样申请教育邮箱了）。邮件会给出下载的<a href="http://www.eviews.com/download/student9/" target="_blank" rel="external">链接</a>(Win和Mac都有)，以及序列号。</p>
<h5 id="安装激活"><a href="#安装激活" class="headerlink" title="安装激活"></a>安装激活</h5><p>文件下载好直接默认安装就可以，当中不会提示输入序列号。安装好运行，会出现注册的提示，输入邮件的序列号即可（下面的用户名一样可以随便填）。激活后会有注册成功的提示。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Data Structure in R]]></title>
      <url>/2017/10/10/Data-Structure-in-R/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>R中的一些数据结构，以及mode, class, typeof的区分。</p>
<h4 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h4><p><img src="http://datahonor-1252464519.costj.myqcloud.com/201710/Screenshot%20from%202017-10-10%2012-29-04.png" alt=""></p>
<blockquote>
<p>R has a wide variety of objects for holding data, including scalars, vectors, matrices, arrays, data frames, and lists. They differ in terms of the type of data they can hold, how they’re created, their structural complexity, and the notation used to identify and access individual elements.</p>
</blockquote>
<p>有一点值得注意，那就是vector, matrix和array都必须是<code>single mode</code>，也就是只能储存同种类型的数据。而data.frame却更加包容：<code>different columns can contain dif-
ferent modes</code>。</p>
<p>特别地，R中有两个比较特别的数据类型：factor和list。对于factor:<code>Categorical (nominal) and ordered categorical (ordinal) variables in R are called factors.</code>对于list：<code>Lists are the most complex of the R data types. Basically, a list is an ordered collection of objects (components). A list allows you to gather a variety of (possibly unrelated) objects under one name.</code>两者都算是R特有的数据类型了，而且在之后的学习中也会发现其为我们的分析提供了极大的便利。</p>
<h4 id="class-mode-and-typeof"><a href="#class-mode-and-typeof" class="headerlink" title="class, mode and typeof"></a>class, mode and typeof</h4><h6 id="class"><a href="#class" class="headerlink" title="class"></a>class</h6><p><code>class</code>返回对象的抽象类型（如data.frame）， 可以用来指示一些<code>generic function</code>怎样去处理这个对象。</p>
<blockquote>
<p><code>class</code> represents its abstract type, which tells generic functions like print how to handle it)</p>
</blockquote>
<h6 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h6><p>简单讲，<code>mode</code>是返回对象在内存中是以何种方式储存的。</p>
<blockquote>
<p><code>mode</code>  represents how an object is stored in memory (numeric, character, list and function).</p>
<p>Function mode gives information about the mode of an object in the sense of Becker, Chambers &amp; Wilks (1988), and is more compatible with other implementations of the S language</p>
</blockquote>
<h6 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h6><p>返回对象的数据类型。</p>
<blockquote>
<p>The R specific function typeof returns the type of an R object.</p>
</blockquote>
<h6 id="mode-vs-typeof"><a href="#mode-vs-typeof" class="headerlink" title="mode vs typeof"></a>mode vs typeof</h6><blockquote>
<p>mode and storage.mode are the old-style types (where storage.mode is more accurate), and typeof is the newer, even more accurate version.</p>
</blockquote>
<p>解释的很清楚了，<code>mode</code>是比较旧的用法，用来查看存储的方式，而且它不如<code>storage.mode</code>精确，但是它和S语言有更好的兼容性。而<code>typeof</code>是新的用法，可以更加精确地查看对象的存储方式。所以…现在一般用typeof看下类型就行了。</p>
<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><p><a href="https://stackoverflow.com/questions/8855589/a-comprehensive-survey-of-the-types-of-things-in-r-mode-and-class-and-type" target="_blank" rel="external">stackoverflow1</a></p>
<p><a href="https://stackoverflow.com/questions/6258004/types-and-classes-of-variables" target="_blank" rel="external">stackoverflow2</a></p>
<p><a href="https://stats.stackexchange.com/questions/3212/mode-class-and-type-of-r-objects" target="_blank" rel="external">stackexchange</a></p>
<p><a href="http://stat.ethz.ch/R-manual/R-devel/doc/manual/R-lang.html#Basic-types" target="_blank" rel="external">R Language Definition</a></p>
]]></content>
      
        <categories>
            
            <category> R </category>
            
        </categories>
        
        
        <tags>
            
            <tag> R </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Get help in R]]></title>
      <url>/2017/10/10/Get-help-in-R/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>之前一段时间开始看<em>R in Action</em>， 感觉写的特别好，尤其是一开始对R的帮助文档的使用和基本数据类型的概括，这里做下记录以备忘。首先是多种获取帮助的方式。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><p>书中介绍的第一个TIP就是关于demo的：</p>
<blockquote>
<p>To get a sense of what R can do graphically, enter demo()at the command prompt. A sample of the graphs produced is included in figure 1.5. Other demonstrations include demo(Hershey), demo(persp), and demo(image). To see a complete list of demonstrations, enter demo() without parameters.</p>
</blockquote>
<p>demo直接给出简洁的代码示例来解释如何使用相关的功能，可以说是十分有帮助的。这里拓展一下：</p>
<ul>
<li>[ ] demo()</li>
</ul>
<blockquote>
<p>直接<code>demo()</code>的话，会返回<code>Demos in package ‘base’:</code>, 也就是base库包含的一些demo。</p>
</blockquote>
<ul>
<li>[ ] demo(package = .packages(all.available = TRUE))</li>
</ul>
<blockquote>
<p>通过这条命令，我们可以列出已经安装的包中，所有可用的demo</p>
</blockquote>
<ul>
<li>[ ] demo(“zoo-overplot”, package = “zoo”)</li>
</ul>
<blockquote>
<p><code>a character vector giving the packages to look into for demos, or NULL. By default, all packages in the search path are used.</code> 这里，我们可以通过指定package的值来搜索指定包下的demo。如果不指定，则在所有已导入的包中搜索。</p>
</blockquote>
<h5 id="help-functions"><a href="#help-functions" class="headerlink" title="help functions"></a>help functions</h5><p><img src="http://datahonor-1252464519.costj.myqcloud.com/201710/Screenshot%20from%202017-10-10%2012-00-03.png" alt=""></p>
<blockquote>
<p>The vignettes returned by the vignette() function are practical introductory articles provided in PDF format. Not all packages have vignettes</p>
</blockquote>
<p>这里的vignettes值得去注意，因为这些包的官方提供的文档，是我们学习包的使用最有效的方法。</p>
]]></content>
      
        <categories>
            
            <category> R </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> R </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Exploratory Data Analysis with R读书笔记]]></title>
      <url>/2017/10/06/EDA-with-R/</url>
      <content type="html"><![CDATA[<h3 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h3><p>这学期开了EDA的课程，课本没用结合程序来进行，所以这里主要依照<em>Exploratory Data Analysis with R</em>这本书来进行EDA编程方面的学习。国庆这两天多花了点时间看完了，这里简单写下笔记。（这书的pdf可以在<a href="https://bookdown.org/rdpeng/exdata/" target="_blank" rel="external">这里</a>看）</p>
<blockquote>
<p>ps:大一的时候学R看的是<em>The R Book</em>，但是看到概率论知识那里就放下了，后来也跑去学Python了orz…这里也当做重新来学R吧。</p>
</blockquote>
<p>书上首先介绍了dplyr的使用方法，十分好用（感觉和pandas好像…）。为了加深记忆，用Rmarkdown写了个笔记，发布在<a href="http://rpubs.com/shenxiangzhuang/mdplyr" target="_blank" rel="external">rpubs</a>。再到后面主要介绍了EDA的过程和可视化的方法，对ggplot2的介绍间接明了，十分实用。最后还给出了具体的案例分析，结合的很好！</p>
<p>总之，这本书还是比较好的，可以学习EDA的方法，同时还可以作为一个简洁的handbook来备查。<br>接下来，R的学习就已<em>R in Action</em>为主了，同时，非参数课本上的R程序也打算一直跟下去。</p>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>强迫症发作。。。因为一直在用R跟进<a href="https://github.com/shenxiangzhuang/StatisticalMethods-Course-WIth-R" target="_blank" rel="external">统计预测与决策</a>，<a href="https://github.com/shenxiangzhuang/NonparameterStat-Course-WIth-R" target="_blank" rel="external">非参数统计</a>的课程，所以对现在的EDA课程也想着用R挨着来实现一下，虽说要写代码的地方不多…承接着上面的EDA WITH R那本书，发现<a href="http://mgimond.github.io/ES218/" target="_blank" rel="external">这里</a> 有更为详细的讲解。所以就参考这个，对教材<em>Understanding Robust And Exploratory Data Analysis</em>进行跟进。</p>
<p>项目地址：[Github]（<a href="https://github.com/shenxiangzhuang/EDA-Course-WIth-R）" target="_blank" rel="external">https://github.com/shenxiangzhuang/EDA-Course-WIth-R）</a></p>
]]></content>
      
        <categories>
            
            <category> R </category>
            
        </categories>
        
        
        <tags>
            
            <tag> R </tag>
            
            <tag> EDA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SAS学习记录]]></title>
      <url>/2017/09/20/SAS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>这学期开了时间序列的课， 用的SAS（当然是盗版orz…）， 打算系统地学一下。在这里记录一下学习的过程。</p>
<h5 id="2017-9-20"><a href="#2017-9-20" class="headerlink" title="2017/9/20"></a>2017/9/20</h5><p>其实这学期也开了专门的统计软件课，不过讲的是SPSS那货，大一时候学了下，实在是无聊得很。。。所以也就更没有必要为它做记录了。今天看了下SAS的语法还是比较强大的。主要参考了SAS官方放在<a href="https://www.youtube.com/watch?v=Uj1Pi7BfiL4&amp;index=11&amp;list=PLVBcK_IpFVi_nlx6za9Yht0eyb46hLLrP" target="_blank" rel="external">YouTube的视频</a>. 另外，发现一本很好的书，干净整洁，<em>The Little SAS Book</em>,接下来主要就是撸这本书了。</p>
<h5 id="2018-2-6"><a href="#2018-2-6" class="headerlink" title="2018/2/6"></a>2018/2/6</h5><p>嗯…当真受不了SAS的语法，上面的书撸了几十页就看不下去了。不过就目前看，用SAS做时间序列的东西还是挺方便的。先不管了，用到了再去学吧:-)</p>
]]></content>
      
        <categories>
            
            <category> SAS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SAS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Three Doors & Three Prisoners]]></title>
      <url>/2017/09/08/Three-Doors-Three-Prisoners/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>在看<em>Statistical Inference</em>的时候，看到Three Prisoners的问题时，没看太懂，因为问题的描述略简单。。。于是为wiki查了下，又把之前看到的Three Doors放在一起。</p>
<h4 id="Three-Doors-Problems"><a href="#Three-Doors-Problems" class="headerlink" title="Three Doors Problems"></a>Three Doors Problems</h4><p>三门问题，又叫Monty Hall problem， 来自一个电视节目，规则如下（具体参见<a href="https://en.wikipedia.org/wiki/Monty_Hall_problem" target="_blank" rel="external">wiki</a>）：</p>
<blockquote>
<p>Suppose you’re on a game show, and you’re given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what’s behind the doors, opens another door, say No. 3, which has a goat. He then says to you, “Do you want to pick door No. 2?” Is it to your advantage to switch your choice?</p>
</blockquote>
<p>里面有很多解释，简单讲就是：</p>
<blockquote>
<p>按照规则，如果在主持人询问后选择转换，那么最后得到的奖品必然是和初始选择到的奖品是不同的。所以只要是选择转换，那么第一次选中山羊的概率就是最后得到汽车的概率，为2/3；反之，只要选择不动，那么第一次选择得到的奖品就是最后得到的，所以得到汽车的概率为1/3.因此，选择转换，会使得得到汽车的概率提高一倍。</p>
</blockquote>
<h4 id="Three-Prisoners-Problems"><a href="#Three-Prisoners-Problems" class="headerlink" title="Three Prisoners Problems"></a>Three Prisoners Problems</h4><p>问题描述如下，具体参见<a href="https://en.wikipedia.org/wiki/Three_Prisoners_problem" target="_blank" rel="external">wiki</a>：</p>
<blockquote>
<p>Three prisoners, A, B and C, are in separate cells and sentenced to death. The governor has selected one of them at random to be pardoned. The warden knows which one is pardoned, but is not allowed to tell. Prisoner A begs the warden to let him know the identity of one of the others who is going to be executed. “If B is to be pardoned, give me C’s name. If C is to be pardoned, give me B’s name. And if I’m to be pardoned, flip a coin to decide whether to name B or C.”</p>
<p>The warden tells A that B is to be executed. Prisoner A is pleased because he believes that his probability of surviving has gone up from 1/3 to 1/2, as it is now between him and C. Prisoner A secretly tells C the news, who is also pleased, because he reasons that A still has a chance of 1/3 to be the pardoned one, but his chance has gone up to 2/3. What is the correct answer?</p>
</blockquote>
<p>感觉枚举的方法不如用贝叶斯来得简单：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/Screenshot%20from%202017-09-08%2012-25-24.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Statistics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Statistics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[By reference | By pointer]]></title>
      <url>/2017/08/28/By-reference-By-pointer/</url>
      <content type="html"><![CDATA[<p>在看<em>c++ primer plus 6th</em>, 发现给函数传参的时候，By reference和Pointer都是一样可以改变实参的，于是查了下他们的不同之处。</p>
<blockquote>
<p>1.指针是一个实体，而引用仅是个别名；</p>
<p>2.引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）</p>
<p>3.不能有NULL引用，引用必须与合法的存储单元关联（指针则可以是NULL）</p>
<p>4.一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）</p>
<p>5.“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p>
</blockquote>
<p>参考： <a href="http://www.cnblogs.com/yanlingyin/archive/2011/12/07/2278961.html" target="_blank" rel="external">C++ 值传递、指针传递、引用传递详解</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu跳坑记录——环境变量，不存在的]]></title>
      <url>/2017/08/22/Ubuntu%E8%B7%B3%E5%9D%91%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84/</url>
      <content type="html"><![CDATA[<p>嗯，本来是一个平静的夜晚，开始搬砖，打开终端，嗯。。说.bashrc文件有问题，但是没什么影响。但是看着难受啊，开始改，开始Google, 发现一条看似平淡的命令[不要试orz…]：</p>
<blockquote>
<p>cp /etc/skel/.bashrc ~/</p>
</blockquote>
<p>运行，可以了，不出错了！开始干活，运行Ipython，挂了，conda挂了，hexo挂了…<br>之后一阵乱搜，发现基本无解了。因为是覆盖的，不是删除的，根本无从找回原文件。但是这里也认识到一个问题，后来发现同样的问题，有的答案给出的就有先备份文件的命令，但是我第一次遇见的并没有让备份…继续乱搜，运行，发现sudo, ls,基本全部挂了…</p>
<p>嗯，还是学到一点，上面的命令可以恢复默认配置的,所以恢复之后sudo, ls也就能使用了。突然想到，之前Ubuntu无限Login也是环境变量写错了格式，而且后来的情况也是一样的(就是sudo, ls也乱套了)。</p>
<p>到Linux群问了问，基本上没有好的办法。于是开始手动添加环境变量(编辑文件/home/shensir/.bashrc，最后追加)。</p>
<blockquote>
<p>conda  path：加入export PATH=”/home/shensir/anaconda3/bin:$PATH”，参考<a href="https://askubuntu.com/questions/817938/changing-bashrc-file-for-anaconda" target="_blank" rel="external">这里</a></p>
<p>node, npm: 没有找到原来的路径，直接重新装的（目前未出现冲突问题），参考<a href="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions" target="_blank" rel="external">这里</a>。其实也就两条命令，非常方便，一次运行成功。<br>   <code>curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</code><br>    <code>sudo apt-get install -y nodejs</code></p>
<p>hexo：在原hexo文件夹的根目录下直接运行安装命令 <code>sudo npm install hexo-cli -g</code>， 和之前提到的迁移是一样的，只安装，不要初始化。</p>
</blockquote>
<p>配置到此，基本上是恢复了一些常用的功能。不知道之后还会不会暴露出新的问题。先更到这里，我先重启看看…无限login就悲剧了。</p>
<p>回更，一切安好…</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/Screenshot%20from%202017-08-22%2023-58-36.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Orange3使用]]></title>
      <url>/2017/08/20/Orange3%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>之前了解到Anaconda的Navigator，感觉挺酷的一个东西…并未去研究，今天恰好又看到，就玩了玩Orange, 感觉还挺好用的一个工具，操作比较简单，可视化效果也不错。不过跟着<a href="https://www.youtube.com/watch?v=Iu8g2Twjn9U&amp;list=PLmNPvQr9Tf-ZSDLwOzxpvY-HrE0yv-8Fy&amp;index=14" target="_blank" rel="external">官方教程</a>测试的时候数据集用的都比较小，可能数据集比较大的时候会有些慢。这里记录下使用的时候遇到的几个问题。</p>
<h4 id="Problems-amp-Solutions"><a href="#Problems-amp-Solutions" class="headerlink" title="Problems&amp;Solutions"></a>Problems&amp;Solutions</h4><h5 id="数据集的下载"><a href="#数据集的下载" class="headerlink" title="数据集的下载"></a>数据集的下载</h5><p>在ADD-ON装上Bioinformatics的时候有的数据集因为网络原因会无法下载。用之前在SS全局代理中提到的proxychains可以解决。</p>
<p>在终端启动Navigator的时候加上proxychains即可：</p>
<blockquote>
<p>proxychains anaconda-navigator</p>
</blockquote>
<h5 id="Image-Analytics-安装"><a href="#Image-Analytics-安装" class="headerlink" title="Image Analytics 安装"></a>Image Analytics 安装</h5><p>在ADD-ON添加Image Analytics的时候会报错：</p>
<blockquote>
<p>_NamespacePath’ object has no attribute ‘sort’</p>
</blockquote>
<p>查看了下当时的安装命令为：</p>
<blockquote>
<p>python -m pip install Orange3-ImageAnalytics</p>
</blockquote>
<p>查了下是setuptools的问题，于是</p>
<blockquote>
<p>sudo apt-get install python3-setuptools</p>
</blockquote>
<p>之后直接从把Orange3-ImageAnalytics-0.1.7下载下来手动安装的（下载安装包README 有详细的安装步骤的介绍）：</p>
<blockquote>
<p>python setup.py install</p>
</blockquote>
<p>然后重启Orange就可以了。</p>
<p>ps:这里再次尝试从ADD-ON安装应该也可以。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Orange3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HOG+SVM&Pedestrian Detection]]></title>
      <url>/2017/08/17/HOG-SVM-Pedestrian-Detection/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>用了大概几个月的时间看完了<em>OpenCV 3 Computer Vision Application Programming Cookbook - Third Edition</em>， 也对前7章的基本操作部分在小站上进行了相应的总结。这里是最后一章实战的DEMO部分的代码，算作对本书学习的一个结尾吧。前面也看了几本相关的书，不过都和这本书差远了，无论理论和算法的讲解还是代码的水平都堪称一流，真心推荐~</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="关于HOG的可视化"><a href="#关于HOG的可视化" class="headerlink" title="关于HOG的可视化"></a>关于HOG的可视化</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;opencv2/core.hpp&gt;</div><div class="line">#include &lt;opencv2/imgproc.hpp&gt;</div><div class="line">#include "opencv2/imgcodecs.hpp"</div><div class="line">#include &lt;opencv2/highgui.hpp&gt;</div><div class="line">#include &lt;opencv2/ml.hpp&gt;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line"></div><div class="line">using namespace cv;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">// draw one HOG over one cell</div><div class="line">void drawHOG(std::vector&lt;float&gt;::const_iterator hog, // iterator to the HOG</div><div class="line">        int numberOfBins,  // number of bins inHOG</div><div class="line">        cv::Mat &amp; image,  // image of the cell</div><div class="line">        float scale = 1.0)</div><div class="line">&#123;</div><div class="line">    const float PI = 3.1415927;</div><div class="line">    float binStep = PI/numberOfBins;</div><div class="line">    float maxLength = image.rows;</div><div class="line">    float cx = image.cols/2;</div><div class="line">    float cy = image.rows/2;</div><div class="line"></div><div class="line">    // for each bin</div><div class="line">    for(int bin=0; bin&lt;numberOfBins; bin++)&#123;</div><div class="line">        // bin orientation</div><div class="line">        float angle = bin*binStep;</div><div class="line">        float dirX = cos(angle);</div><div class="line">        float dirY = sin(angle);</div><div class="line">        // length of line proportion to bin size</div><div class="line">        // 这里感觉是为了可视化的时候区分不同的bin,不是很明白...</div><div class="line">        float length = 0.5*maxLength**(hog+bin);</div><div class="line"></div><div class="line">        // drawing the line</div><div class="line">        float x1 = cx - dirX * length * scale;</div><div class="line">        float y1 = cy - dirY * length * scale;</div><div class="line">        float x2 = cx + dirX * length * scale;</div><div class="line">        float y2 = cy + dirY * length * scale;</div><div class="line">        cv::line(image, cv::Point(x1, y1), cv::Point(x2, y2),</div><div class="line">        CV_RGB(255, 255, 255), 1.5);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Draw HOG over an image</div><div class="line">void drawHOGDescriptors(const cv::Mat &amp;image, // the input image</div><div class="line">    cv::Mat &amp;hogImage, // the resulting hog image</div><div class="line">        cv::Size cellSize,  // size of each cell</div><div class="line">        int nBins</div><div class="line">    )&#123;</div><div class="line">    // block size is image size</div><div class="line">    // image.cols = 391</div><div class="line">    // (image.cols/cellSize.width)*cellSize.width = 384</div><div class="line">    // 下面这里先除后乘，是为了保证在不能恰好被cell均分的情况</div><div class="line">    cv::HOGDescriptor hog(cv::Size((image.cols/cellSize.width)*cellSize.width, (image.rows/cellSize.height)*cellSize.height),</div><div class="line">                          cv::Size((image.cols/cellSize.width)*cellSize.width, (image.rows/cellSize.height)*cellSize.height),</div><div class="line">                          cellSize, cellSize, nBins);</div><div class="line"></div><div class="line">    // compute HOG</div><div class="line">    std::vector&lt;float&gt;descriptors;</div><div class="line">    hog.compute(image, descriptors);</div><div class="line"></div><div class="line">    float scale = 2.0 / *std::max_element(descriptors.begin(), descriptors.end());</div><div class="line">    hogImage.create(image.rows, image.cols, CV_8U);</div><div class="line">    cv::Mat temp;</div><div class="line">    std::vector&lt;float&gt;::const_iterator itDesc = descriptors.begin();</div><div class="line">    for(int i=0; i&lt;image.rows/cellSize.height; i++)&#123;</div><div class="line">        for(int j=0; j &lt; image.cols/cellSize.width; j++)&#123;</div><div class="line">            // draw each cell</div><div class="line">            temp = hogImage(cv::Rect(j*cellSize.width, i*cellSize.height, cellSize.width, cellSize.height));</div><div class="line">            drawHOG(itDesc, nBins, temp, scale);</div><div class="line">            itDesc += nBins;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    cv::Mat image = imread("/home/shensir/Documents/MyPrograming/Cpp/MyCV/data/girl.png", 0);</div><div class="line">    cv::imshow("Original image", image);</div><div class="line"></div><div class="line">    cv::HOGDescriptor hog(cv::Size((image.cols / 16) * 16, (image.rows / 16) * 16), // size of the window</div><div class="line">                          cv::Size(16, 16),  // block size</div><div class="line">                          cv::Size(16, 16),  // block stride</div><div class="line">                          cv::Size(4, 4),  // cell size</div><div class="line">                          9); // num of bins</div><div class="line"></div><div class="line">    std::vector&lt;float&gt; descriptor;</div><div class="line"></div><div class="line">    // Draw  a representation of HOG cells</div><div class="line">    cv::Mat hogImage = image.clone();</div><div class="line">    drawHOGDescriptors(image, hogImage, cv::Size(16, 16), 9);</div><div class="line">    cv::imshow("HOG image", hogImage);</div><div class="line"></div><div class="line">    waitKey(0);</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/Original%20image_081704.png" alt=""><br><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/HOG%20image_081705.png" alt=""></p>
<h5 id="HOG-SVM检测警示牌"><a href="#HOG-SVM检测警示牌" class="headerlink" title="HOG+SVM检测警示牌"></a>HOG+SVM检测警示牌</h5><p>这里是自己完成训练到预测全部过程的，之前看到<a href="http://blog.csdn.net/masibuaa/article/details/16105073" target="_blank" rel="external">这个</a>，但是是OpenCV2.4的，尝试改成3的没成功，很多函数的用法已经变了，不过对比看还是下面这种逻辑更为清晰一些。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;opencv2/core.hpp&gt;</div><div class="line">#include &lt;opencv2/imgproc.hpp&gt;</div><div class="line">#include "opencv2/imgcodecs.hpp"</div><div class="line">#include &lt;opencv2/highgui.hpp&gt;</div><div class="line">#include &lt;opencv2/ml.hpp&gt;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line"></div><div class="line">using namespace cv;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line"></div><div class="line">    // generate the filename</div><div class="line">    std::vector&lt;std::string&gt; imgs;</div><div class="line">    std::string prefix = "/home/shensir/Documents/MyPrograming/Cpp/b"</div><div class="line">            "ooks/CV/1-ing/OpenCV3ComputerVisionApplicationProgrammingCookbook"</div><div class="line">            "ThirdEdition_Code/images/stopSamples/stop";</div><div class="line">    std::string ext = ".png";</div><div class="line">    // loading 8 positive samples</div><div class="line">    std::vector&lt;cv::Mat&gt; positives;</div><div class="line">    for (int i = 0; i &lt; 8; i++) &#123;</div><div class="line">        std::string name(prefix);</div><div class="line">        std::ostringstream ss;</div><div class="line">        ss &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; i;</div><div class="line">        name += ss.str();</div><div class="line">        name += ext;</div><div class="line">        positives.push_back(imread(name, cv::IMREAD_GRAYSCALE));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // the first 8 positive samples</div><div class="line">    cv::Mat posSamples(2 * positives[0].rows, 4 * positives[0].cols, CV_8U);</div><div class="line">    for (int i = 0; i &lt; 2; i++) &#123;</div><div class="line">        for (int j = 0; j &lt; 4; j++) &#123;</div><div class="line">            positives[i * 4 + j].copyTo(posSamples(cv::Rect(j * positives[i * 4 + j].cols,</div><div class="line">                                                            i * positives[i * 4 + j].rows,</div><div class="line">                                                            positives[i * 4 + j].cols,</div><div class="line">                                                            positives[i * 4 + j].rows)));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cv::imshow("Positive samples", posSamples);</div><div class="line"></div><div class="line">    // laoding 8 negative samples</div><div class="line">    std::string nprefix = "/home/shensir/Documents/MyPrograming/Cpp/books/CV/1-ing"</div><div class="line">            "/OpenCV3ComputerVisionApplicationProgrammingCookbookThirdEdition_Code"</div><div class="line">            "/images/stopSamples/neg";</div><div class="line">    std::vector&lt;cv::Mat&gt; negatives;</div><div class="line">    for (long i = 0; i &lt; 8; i++) &#123;</div><div class="line">        std::string name(nprefix);</div><div class="line">        std::ostringstream ss;</div><div class="line">        ss &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; i;</div><div class="line">        name += ss.str();</div><div class="line">        name += ext;</div><div class="line">        negatives.push_back(cv::imread(name, cv::IMREAD_GRAYSCALE));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // the first 8 negative  samples</div><div class="line">    cv::Mat negSamples(2 * negatives[0].rows, 4 * negatives[0].cols, CV_8U);</div><div class="line">    for (int i = 0; i &lt; 2; i++) &#123;</div><div class="line">        for (int j = 0; j &lt; 4; j++) &#123;</div><div class="line">            negatives[i * 4 + j].copyTo(</div><div class="line">                    negSamples(cv::Rect(j * negatives[4 * i + j].cols,</div><div class="line">                                        i * negatives[4 * i + j].rows, negatives[4 * i + j].cols,</div><div class="line">                                        negatives[4 * i + j].rows)));</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cv::imshow("Negative Samples", negSamples);</div><div class="line"></div><div class="line">    // The HOG descriptor for stop sign detection</div><div class="line">    cv::HOGDescriptor hogDesc(positives[0].size(), // size of the window</div><div class="line">                              cv::Size(8, 8),  // block size</div><div class="line">                              cv::Size(4, 4),  // block stride</div><div class="line">                              cv::Size(4, 4),  // cell size</div><div class="line">                              9  // number of bins</div><div class="line">    );</div><div class="line"></div><div class="line">    // compute first descriptor</div><div class="line">    std::vector&lt;float&gt; desc;</div><div class="line">    hogDesc.compute(positives[0], desc);</div><div class="line">    std::cout &lt;&lt; "Positive sample size: " &lt;&lt; positives[0].rows &lt;&lt; "x" &lt;&lt; positives[0].cols &lt;&lt; endl;</div><div class="line">    std::cout &lt;&lt; "HOG descriptor size: " &lt;&lt; desc.size() &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    // the matrix of sample descriptors</div><div class="line">    int featureSize = desc.size();</div><div class="line">    int numberOfSamples = positives.size() + negatives.size();</div><div class="line">    // create the matrix that will contain the sample HOG</div><div class="line">    cv::Mat samples(numberOfSamples, featureSize, CV_32FC1);</div><div class="line"></div><div class="line">    // fill first row with first descriptor</div><div class="line">    for (int i = 0; i &lt; featureSize; i++)</div><div class="line">        samples.ptr&lt;float&gt;(0)[i] = desc[i];</div><div class="line"></div><div class="line">    // compute descriptor of the positive samples</div><div class="line">    for (int j = 1; j &lt; positives.size(); j++) &#123;</div><div class="line">        hogDesc.compute(positives[j], desc);</div><div class="line">        // fill the next row with current descriptor</div><div class="line">        for (int i = 0; i &lt; featureSize; i++) &#123;</div><div class="line">            samples.ptr&lt;float&gt;(j)[i] = desc[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // compute descriptor of the negative samples</div><div class="line">    for (int j = 0; j &lt; negatives.size(); j++) &#123;</div><div class="line">        hogDesc.compute(negatives[j], desc);</div><div class="line">        // fill the next row with current descriptor</div><div class="line">        for (int i = 0; i &lt; featureSize; i++) &#123;</div><div class="line">            samples.ptr&lt;float&gt;(j + positives.size())[i] = desc[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // create the labels</div><div class="line">    cv::Mat labels(numberOfSamples, 1, CV_32SC1);</div><div class="line">    // labels of positive samples</div><div class="line">    labels.rowRange(0, positives.size()) = 1.0;</div><div class="line">    // labels of negative sampels</div><div class="line">    labels.rowRange(positives.size(), numberOfSamples) = -1.0;</div><div class="line"></div><div class="line">    // create SVM classifier</div><div class="line">    cv::Ptr&lt;cv::ml::SVM&gt; svm = cv::ml::SVM::create();</div><div class="line">    svm-&gt;setType(cv::ml::SVM::C_SVC);</div><div class="line">    svm-&gt;setKernel(cv::ml::SVM::LINEAR);</div><div class="line"></div><div class="line">    // prepare the training data</div><div class="line">    cv::Ptr&lt;cv::ml::TrainData&gt; trainingData =</div><div class="line">            cv::ml::TrainData::create(samples, cv::ml::SampleTypes::ROW_SAMPLE, labels);</div><div class="line">    // SVM training</div><div class="line">    svm-&gt;train(trainingData);</div><div class="line">    // 将训练好的SVM模型保存为XML文件</div><div class="line">    svm-&gt;save("STOP_LOGO.xml");</div><div class="line"></div><div class="line">    // 测试</div><div class="line">    cv::Mat queries(4, featureSize, CV_32FC1);</div><div class="line"></div><div class="line">    // fill the rows with query descriptor</div><div class="line">    hogDesc.compute(cv::imread("/home/shensir/Documents/MyPrograming/Cpp/bo"</div><div class="line">                                       "oks/CV/1-ing/OpenCV3ComputerVisionApplication"</div><div class="line">                                       "ProgrammingCookbookThirdEdition_Code/images/stopSamples/stop08.png", 0), desc);</div><div class="line">    for (int i = 0; i &lt; featureSize; i++)</div><div class="line">        queries.ptr&lt;float&gt;(0)[i] = desc[i];</div><div class="line"></div><div class="line"></div><div class="line">    hogDesc.compute(cv::imread("/home/shensir/Documents/MyPrograming/Cpp/boo"</div><div class="line">                                       "ks/CV/1-ing/OpenCV3ComputerVisionApplicationProgramm"</div><div class="line">                                       "ingCookbookThirdEdition_Code/images/stopSamples/stop09.png", 0), desc);</div><div class="line">    for (int i = 0; i &lt; featureSize; i++)</div><div class="line">        queries.ptr&lt;float&gt;(1)[i] = desc[i];</div><div class="line"></div><div class="line">    hogDesc.compute(cv::imread("/home/shensir/Documents/MyPrograming/"</div><div class="line">                                       "Cpp/books/CV/1-ing/OpenCV3ComputerVisionApplicationPro"</div><div class="line">                                       "grammingCookbookThirdEdition_Code/images/stopSamples/neg08.png", 0), desc);</div><div class="line">    for (int i = 0; i &lt; featureSize; i++)</div><div class="line">        queries.ptr&lt;float&gt;(2)[i] = desc[i];</div><div class="line"></div><div class="line">    hogDesc.compute(cv::imread("/home/shensir/Documents/MyPrograming/Cpp/books/"</div><div class="line">                                       "CV/1-ing/OpenCV3ComputerVisionApplicationP"</div><div class="line">                                       "rogrammingCookbookThirdEdition_Code/images/stopSamples/neg09.png", 0), desc);</div><div class="line">    for (int i = 0; i &lt; featureSize; i++)</div><div class="line">        queries.ptr&lt;float&gt;(3)[i] = desc[i];</div><div class="line"></div><div class="line">    cv::Mat predictions;</div><div class="line">    svm-&gt;predict(queries, predictions);</div><div class="line">    for(int i=0; i&lt;4; i++)&#123;</div><div class="line">        cout &lt;&lt; "query: " &lt;&lt; i &lt;&lt; ": " &lt;&lt;</div><div class="line">                                       ((predictions.at&lt;float&gt;(i,0) &lt; 0.0) ?</div><div class="line">                                       "Negative" : "Positive") &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    waitKey(0);</div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>Positive sample size: 64x64
HOG descriptor size: 8100
query: 0: Positive
query: 1: Positive
query: 2: Negative
query: 3: Negative
</code></pre><p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/Positive%20samples_081707.png" alt=""></p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/Negative%20Samples_081706.png" alt=""></p>
<h5 id="Pedestrian-Detection简化版"><a href="#Pedestrian-Detection简化版" class="headerlink" title="Pedestrian Detection简化版"></a>Pedestrian Detection简化版</h5><p>同样是用的OpenCV自带的行人检测器，这里只是一个针对照片的简化版本，<a href="http://datahonor.com/2017/08/17/Pedestrain-Detection/">这里</a>是完整版。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"matplotlibcpp.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// People detection</span></div><div class="line">    cv::Mat myImage = imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/MyCV/data/person.jpg"</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">// create the detector</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect&gt; peoples;</div><div class="line">    cv::HOGDescriptor peopleHog;</div><div class="line">    peopleHog.setSVMDetector(cv::HOGDescriptor::getDefaultPeopleDetector());</div><div class="line">    <span class="comment">// detect people on an image</span></div><div class="line">    peopleHog.detectMultiScale(myImage,</div><div class="line">                               peoples, <span class="number">0</span>, cv::Size(<span class="number">4</span>, <span class="number">4</span>), cv::Size(<span class="number">32</span>, <span class="number">32</span>), <span class="number">1.1</span>, <span class="number">2</span>);</div><div class="line">    <span class="comment">// draw detections on image</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; peoples.size(); i++)</div><div class="line">        cv::rectangle(myImage, peoples[i], cv::Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>);</div><div class="line"></div><div class="line">    cv::imshow(<span class="string">"People detection"</span>, myImage);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/People%20detection_081708.png" alt=""></p>
<h4 id="…"><a href="#…" class="headerlink" title="…"></a>…</h4><p>马上大三了，课比较多，估计没时间再捣鼓这些纯粹为了兴趣的东西了orz…嗯，不过毕竟看了快一年，也算是有点基础了解吧，之后还有机会玩这个也会轻松一些了。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pedestrian Detection]]></title>
      <url>/2017/08/17/Pedestrain-Detection/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>使用OpenCV自带的API进行行人检测。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>参考<a href="https://github.com/shenxiangzhuang/opencv-samples" target="_blank" rel="external">这里</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgcodecs.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/ml.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INPUT_VIDEO_FILE <span class="meta-string">"/home/shensir/Documents/MyPrograming/Cpp/MyCV/data/terrace1-c0.avi"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_NAME <span class="meta-string">"WINDOW"</span></span></div><div class="line"></div><div class="line"><span class="comment">// Reference: https://github.com/Itseez/opencv/blob/master/samples/cpp/train_HOG.cpp</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_locations</span><span class="params">(Mat &amp;img, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Rect&gt; &amp;locations, <span class="keyword">const</span> Scalar &amp;color)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!locations.empty()) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;Rect&gt;::const_iterator loc = locations.begin();</div><div class="line">        <span class="built_in">vector</span>&lt;Rect&gt;::const_iterator end = locations.end();</div><div class="line">        <span class="keyword">for</span> (; loc != end; ++loc) &#123;</div><div class="line">            rectangle(img, *loc, color, <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</div><div class="line">    Mat mSrc;</div><div class="line">    <span class="built_in">vector</span>&lt;Rect&gt; vDetected;</div><div class="line">    HOGDescriptor hog;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; detector = HOGDescriptor::getDefaultPeopleDetector();</div><div class="line">    hog.setSVMDetector(detector);</div><div class="line"></div><div class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(INPUT_VIDEO_FILE)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line"></div><div class="line">        cap &gt;&gt; mSrc;</div><div class="line">        hog.detectMultiScale(mSrc, vDetected, <span class="number">0</span>, Size(<span class="number">8</span>, <span class="number">8</span>), Size(<span class="number">32</span>, <span class="number">32</span>), <span class="number">1.05</span>, <span class="number">2</span>);</div><div class="line">        draw_locations(mSrc, vDetected, Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</div><div class="line"></div><div class="line">        imshow(WINDOW_NAME, mSrc);</div><div class="line">        <span class="comment">// 加上ESC退出</span></div><div class="line">        <span class="keyword">char</span> c = waitKey(<span class="number">10</span>);</div><div class="line">        <span class="keyword">if</span> (c == <span class="number">27</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出效果：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/WINDOW_081702.png" alt=""></p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/WINDOW_081703.png" alt=""></p>
<p>总体感觉还是不错的。视频下载<a href="http://cvlab.epfl.ch/data/pom" target="_blank" rel="external">地址</a>.</p>
<h4 id="。。。"><a href="#。。。" class="headerlink" title="。。。"></a>。。。</h4><p>话说当初学OpenCV的初衷就是检测行人来着，想着检测食堂和学校主干道的行人，并进行计数，最好能搞出来实时人流量的图（天真orz…）…现在学了一年了，几乎没什么进展，而且发现所要做的或许是属于人群检测，而非简单的行人检测…</p>
<p>总的来说学的都是基本的图像处理操作和原理，用到的机器学习算法也就是K-means, KNN, SVM这些，至于深度学习，神经网络这些还没有去研究，一是想着先打好基础，二来。。。我这I5的小本子也撑不住..</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百年回首--关于心形曲线的几种画法]]></title>
      <url>/2017/08/16/%E7%99%BE%E5%B9%B4%E5%9B%9E%E9%A6%96-%E5%85%B3%E4%BA%8E%E5%BF%83%E5%9E%8B%E6%9B%B2%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E7%94%BB%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>今天和同学聊到了心形曲线。。刚吃完饭闲着。。。来画一下。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">a = <span class="number">5.21</span></div><div class="line">theta = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</div><div class="line">r = a*(<span class="number">1</span> - np.sin(theta))</div><div class="line">plt.polar(theta, r)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/figure_1.png" alt=""></p>
<h5 id="Octave-Matlab"><a href="#Octave-Matlab" class="headerlink" title="Octave/Matlab"></a>Octave/Matlab</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">theta = <span class="built_in">linspace</span>(<span class="number">0</span>, <span class="number">2</span>*<span class="built_in">pi</span>, <span class="number">100</span>);</div><div class="line">r = <span class="number">5.21</span>*(<span class="number">1</span>-<span class="built_in">sin</span>(theta));</div><div class="line">polar(theta, r)</div><div class="line">polar(theta, r)</div><div class="line">title(<span class="string">'5.21-L'</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/octave.png" alt=""></p>
<h5 id="R"><a href="#R" class="headerlink" title="R"></a>R</h5><p>emmm…由于R好像没有现成的画极座标的东西，所以手动转了下。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">a &lt;- <span class="number">5.21</span></div><div class="line">theta &lt;- seq(<span class="number">0</span>, <span class="number">2</span>*pi, len=<span class="number">100</span>)</div><div class="line">r &lt;- a*(<span class="number">1</span> - sin(theta))</div><div class="line"></div><div class="line">x &lt;- cos(theta)*r</div><div class="line">y &lt;- sin(theta)*r</div><div class="line">plot(x, y, <span class="string">'l'</span>, col=<span class="string">'red'</span>)</div><div class="line">title(<span class="string">'5.21-L'</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/Rplot.png" alt=""></p>
<h5 id="Cpp"><a href="#Cpp" class="headerlink" title="Cpp"></a>Cpp</h5><p>Cpp画图实在是比较伤…用了OpenCV的接口才勉强能看…</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PlotCurve</span><span class="params">(<span class="keyword">double</span> a=<span class="number">5.21</span>)</span></span>&#123;</div><div class="line">    cv::Mat image = cv::Mat(<span class="number">300</span>, <span class="number">300</span>, CV_8U, cv::Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</div><div class="line">    <span class="keyword">double</span> theta0 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(theta0 &lt;= <span class="number">2</span>*M_PI)&#123;</div><div class="line">        <span class="keyword">double</span> r0 = a*(<span class="number">1</span>-<span class="built_in">sin</span>(theta0));</div><div class="line">        cv::Point p = cv::Point(<span class="built_in">cos</span>(theta0)*r0*<span class="number">10</span>+<span class="number">150</span>, <span class="number">300</span>-(<span class="built_in">sin</span>(theta0)*r0*<span class="number">10</span>+<span class="number">200</span>));</div><div class="line">        cv::circle(image, p, <span class="number">1</span>, cv::Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),<span class="number">-1</span>);</div><div class="line">        theta0 += <span class="number">2</span>*M_1_PI/<span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">    cv::imshow(<span class="string">"5.21-L"</span>, image);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    PlotCurve();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/Cpp.png" alt=""></p>
<p>嗯，就这些吧，Haskell还是不碰的好:-)…其他的语言也不会了orz…</p>
<h5 id="SAS"><a href="#SAS" class="headerlink" title="SAS"></a>SAS</h5><p>========2017.9.23更==============</p>
<p>感觉SAS这货的做的图也是很不错…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">DATA heart;</div><div class="line">    a = 0.521;</div><div class="line">    pi = 3.1415926;</div><div class="line">    theta = 0;</div><div class="line">    r = 0;</div><div class="line">    x=0;</div><div class="line">    y=0;</div><div class="line">    do i=1 to 101;</div><div class="line">    theta = theta + pi/50;</div><div class="line">    r = a*(1-sin(theta));</div><div class="line">    x = r*cos(theta);</div><div class="line">    y = r*sin(theta);</div><div class="line">    output;</div><div class="line">end;</div><div class="line">RUN;</div><div class="line"></div><div class="line">PROC gplot data=heart;</div><div class="line">    symbol v=none i=spline c=red;</div><div class="line">    title &apos;My Heart&apos;;</div><div class="line">    plot y*x;</div><div class="line">RUN;</div><div class="line"></div></pre></td></tr></table></figure>
<p>图。。忘记保存了…放个照片先..</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201708/IMG_20170923_173943.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Python </tag>
            
            <tag> Octave </tag>
            
            <tag> R </tag>
            
            <tag> Matlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[添加OpenCV3对Python3的支持&QT中使用OpenCV]]></title>
      <url>/2017/08/15/%E6%B7%BB%E5%8A%A0OpenCV3%E5%AF%B9Python3%E7%9A%84%E6%94%AF%E6%8C%81/</url>
      <content type="html"><![CDATA[<p>一直用的Python3,但是呢之前编译OpenCV只是按照默认添加了对Python2的支持，于是有进行重新编译，多次挂掉后总算成功了，这里做下记录。</p>
<h5 id="关于编译时的可选参数"><a href="#关于编译时的可选参数" class="headerlink" title="关于编译时的可选参数"></a>关于编译时的可选参数</h5><p>编译环境：</p>
<blockquote>
<p>Ubuntu16.04LTS 64-Bit 英文版</p>
</blockquote>
<p>编译还是根据<a href="http://docs.opencv.org/3.1.0/d7/d9f/tutorial_linux_install.html" target="_blank" rel="external">官网教程</a>来的，但是教程只是给了最基本的编译示例，其他的可选参数并未做太多说明。我们用的是cmake-gui进行选择，影响编译的几个选项就是下面这些：</p>
<blockquote>
<p><strong>CUDA</strong>: 本次编译只是选了<code>WITH_CUDA</code>， 但是选择其他相关的文件进行编译有时会出错。由于我这小本本不支持CUDA的，所以下次不选就是了。</p>
<p><strong>dnn</strong>: 只要包含dnn就出错orz…本次编译全部取消勾选dnn相关文件才通过了.可能是新版本支持不好？</p>
<p><strong>TBB</strong>：这个也是十分蛋疼啊。。。加上也是出错</p>
<p><strong>EIGEN</strong>: 可以添加，未出错</p>
<p><strong>OPENCL</strong>： 可以添加，未出错</p>
<p><strong>OPENGL</strong>: 未添加</p>
</blockquote>
<p>关于Python（使用的anaconda）路径的设置：</p>
<p>参考<a href="https://stackoverflow.com/questions/36201282/install-opencv-for-python3" target="_blank" rel="external">这里</a></p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/Screenshot%20from%202017-08-15%2017-31-16.png" alt=""></p>
<h5 id="关于最后的软链接"><a href="#关于最后的软链接" class="headerlink" title="关于最后的软链接"></a>关于最后的软链接</h5><p>参考<a href="http://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-and-python-3-4-on-ubuntu/" target="_blank" rel="external">这里</a></p>
<p>切换到<code>/home/shensir/anaconda3/lib/python3.6/site-packages</code><br>执行：</p>
<blockquote>
<p>sudo ln -s ‘/home/shensir/anaconda3/lib/python3.6/site-packages/cv2.cpython-36m-x86_64-linux-gnu.so’  cv2.so</p>
</blockquote>
<h5 id="Python下的报错"><a href="#Python下的报错" class="headerlink" title="Python下的报错"></a>Python下的报错</h5><p>嗯，上面准备的很妥当了，接下来就是…新的报错了orz…</p>
<blockquote>
<p>ImportError: /usr/lib/liblapack.so.3: undefined symbol: gotoblas</p>
</blockquote>
<p>基本上没找到相关资料，但是有个<a href="https://stackoverflow.com/questions/8917977/installing-lapack-for-numpy" target="_blank" rel="external">类似的</a>, 试了试竟然成功了：</p>
<blockquote>
<p>sudo apt-get remove libopenblas-base</p>
</blockquote>
<h5 id="在QT中使用OpenCV"><a href="#在QT中使用OpenCV" class="headerlink" title="在QT中使用OpenCV"></a>在QT中使用OpenCV</h5><p>看到很多书上的教程是基于QT来讲的，这里也接着在QT设置了OpenCV的支持。主要参考<a href="https://www.youtube.com/watch?v=qA46fvP3O5A" target="_blank" rel="external">这里</a>[及其风骚的操作…]。其实关键是在QT添加OpenCV库的链接，只需要在配置文件<code>xxx.pro</code>中最后添加两行即可：</p>
<blockquote>
<p>INCLUDEPATH += “/usr/local/include/“<br>LIBS += <code>pkg-config --libs opencv</code></p>
<p>ps: 看到视频里面用QT做应用竟然如此方便…嗯，又要入坑QT吗。。。</p>
</blockquote>
<h5 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h5><p>折腾那么久，终于解决了….其实添加3的支持也是因为今天看到了<a href="https://pythonprogramming.net/" target="_blank" rel="external">这个</a>, 绝对的大佬…想着有空跟进这里的项目来学习。嗯，就这样。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于教育网邮箱]]></title>
      <url>/2017/08/10/%E5%85%B3%E4%BA%8E%E6%95%99%E8%82%B2%E7%BD%91%E9%82%AE%E7%AE%B1/</url>
      <content type="html"><![CDATA[<p>不久前申请了一个校园邮箱，后来用它申请了PyCharm Professional, Clion在Ubuntu使用。今天又发现Lingo也可以申请，就试了试，也是可以的。嗯。。而且申请的版本是Extended的（所有参数个数不限，没有license的那个demo版一般就30个变量），买的话要近5000$。。。不过前面两个申请后的license都是秒回的，这个我是等了一个下午才收到回复，不知道为啥还…</p>
<h4 id="申请校园邮箱"><a href="#申请校园邮箱" class="headerlink" title="申请校园邮箱"></a>申请校园邮箱</h4><p>先登录到到<a href="http://hd2.hainu.edu.cn/homeN/" target="_blank" rel="external">海南大学校内门户</a>（这个在海南大学官网主页下面也有登录的链接）。</p>
<blockquote>
<p>ps：校内门户的密码一般都改过的，默认应该是身份证号码</p>
</blockquote>
<p>之后进入右侧的邮件系统，按照提示申请即可。</p>
<h4 id="Lingo17-license申请"><a href="#Lingo17-license申请" class="headerlink" title="Lingo17 license申请"></a>Lingo17 license申请</h4><p>先到Lingo官网<a href="http://www.lindo.com/index.php?option=com_content&amp;view=article&amp;id=120&amp;Itemid=45" target="_blank" rel="external">这里</a>下载对应的版本并安装。之后按照下面的提示进行申请。</p>
<blockquote>
<p>As installation completes, the LINGO License Key license dialog box will display (alternatively, you can select File|License from the menu). Select the Demo button and then select the Create User ID File button. This will create a file named userinfo.txt in your main LINGO folder. Send a message to sales@lindo.com requesting an educational research license and attach the userifo.txt file to the message. The message should be sent from your educational email address. Once we receive the file we will generate and email you an educational research license key.</p>
</blockquote>
<p>登录到自己的校园邮箱，加上附件userifo.txt发送到sales@lindo.com即可。</p>
<blockquote>
<p>这里我是发送了两次，第一次仅仅是加上了附件，没有所说的message…然后接着又发了一份随便写了一句话算作message，然后加上附件发送就成了，后来申请成功回复的也是后面这一封。（不写任何东西可能会是因为被当作垃圾邮件给拒了，不过也不一定orz）。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BST&BT in Cpp]]></title>
      <url>/2017/08/05/BST-in-Cpp/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>时间比较段，看数学来不及，就继续找来Youtube视频学习数据结构了。视频真的不错，讲解很透彻，用C/Cpp实现的，<a href="https://www.youtube.com/watch?v=hWokyBoo0aI&amp;index=29&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P" target="_blank" rel="external">传送门</a>。今天看的是BST（Binary Search Tree）,即二叉排序树。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="BST"><a href="#BST" class="headerlink" title="BST"></a>BST</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">// BST Node</span></div><div class="line"><span class="keyword">struct</span> BstNode &#123;</div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    BstNode *left;</div><div class="line">    BstNode *right;</div><div class="line">&#125;;</div><div class="line"><span class="function">BstNode *<span class="title">GetNewNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    BstNode *newNode = <span class="keyword">new</span> BstNode();</div><div class="line">    newNode-&gt;data = data;</div><div class="line">    newNode-&gt;left = newNode-&gt;right = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> newNode;</div><div class="line">&#125;</div><div class="line"><span class="function">BstNode *<span class="title">Insert</span><span class="params">(BstNode *root, <span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        root = GetNewNode(data);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;data) &#123;</div><div class="line">        root-&gt;left = Insert(root-&gt;left, data);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        root-&gt;right = Insert(root-&gt;right, data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(BstNode *root, <span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;data == data) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;data) Search(root-&gt;left, data);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Search(root-&gt;right, data);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FindElement</span><span class="params">(BstNode *root, <span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Search(root, number)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Min-Max--&gt;By Loops</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindMin</span><span class="params">(BstNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Tree is empty\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 由于这里root只是局部变量，所以可以直接让其一直进入左枝即可</span></div><div class="line">    <span class="keyword">while</span> (root-&gt;left != <span class="literal">NULL</span>) &#123;</div><div class="line">        root = root-&gt;left;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root-&gt;data;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindMax</span><span class="params">(BstNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Tree is empty\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 由于这里root只是局部变量，所以可以直接让其一直进入右枝即可</span></div><div class="line">    <span class="keyword">while</span> (root-&gt;right != <span class="literal">NULL</span>) &#123;</div><div class="line">        root = root-&gt;right;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root-&gt;data;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Min-Max--&gt;By recursion</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FinMinRec</span><span class="params">(BstNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Tree is empty\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> root-&gt;data;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> FinMinRec(root-&gt;left);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FinMaxRec</span><span class="params">(BstNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR: Tree is empty\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;right == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> root-&gt;data;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> FinMaxRec(root-&gt;right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 返回最小值对应的内存地址</span></div><div class="line"><span class="function">BstNode* <span class="title">FindMinAddrRec</span><span class="params">(BstNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> FindMinAddrRec(root-&gt;left);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Breadth First Travel</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BstNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tree is empty\n"</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>&lt;BstNode *&gt; Q;</div><div class="line">    Q.push(root);</div><div class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</div><div class="line">        BstNode *current = Q.front();</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; current-&gt;data &lt;&lt; <span class="string">" "</span>;</div><div class="line">        <span class="keyword">if</span> (current-&gt;left != <span class="literal">NULL</span>) Q.push(current-&gt;left);</div><div class="line">        <span class="keyword">if</span> (current-&gt;right != <span class="literal">NULL</span>) Q.push(current-&gt;right);</div><div class="line">        Q.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Delete a node from a binary tree</span></div><div class="line"><span class="function">BstNode* <span class="title">Delete</span><span class="params">(BstNode* root, <span class="keyword">int</span> data)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; root-&gt;data) root-&gt;left = Delete(root-&gt;left, data);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(data &gt; root-&gt;data) root-&gt;right = Delete(root-&gt;right, data);</div><div class="line">    <span class="keyword">else</span>&#123;<span class="comment">// Wohoo...I found you. Get ready to be deleted</span></div><div class="line">        <span class="comment">// Case1: No child</span></div><div class="line">        <span class="keyword">if</span>(root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)&#123;</div><div class="line">            <span class="keyword">delete</span> root;</div><div class="line">            root = <span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Case2: One child</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left == <span class="literal">NULL</span>)&#123;</div><div class="line">            BstNode* temp;</div><div class="line">            temp = root;</div><div class="line">            root = root-&gt;right;</div><div class="line">            <span class="keyword">delete</span> temp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right == <span class="literal">NULL</span>)&#123;</div><div class="line">            BstNode* temp;</div><div class="line">            temp = root;</div><div class="line">            root = root-&gt;left;</div><div class="line">            <span class="keyword">delete</span> temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            BstNode* temp = FindMinAddrRec(root-&gt;right);</div><div class="line">            root-&gt;data = temp-&gt;data;</div><div class="line">            root-&gt;right = Delete(root-&gt;right, temp-&gt;data);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Return value's addr</span></div><div class="line"><span class="function">BstNode* <span class="title">Find</span><span class="params">(BstNode *root, <span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;data == data) <span class="keyword">return</span> root;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;data) Find(root-&gt;left, data);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Find(root-&gt;right, data);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Function to find Inorder Successor in a BST</span></div><div class="line"></div><div class="line"><span class="function">BstNode* <span class="title">Getsuccessor</span><span class="params">(BstNode* root, <span class="keyword">int</span> data)</span></span>&#123;</div><div class="line">    <span class="comment">// Serch the Node</span></div><div class="line">    BstNode* current = Find(root, data);</div><div class="line">    <span class="keyword">if</span>(current == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(current-&gt;right != <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="comment">// Case 1: Node has right substree</span></div><div class="line">        <span class="keyword">return</span> FindMinAddrRec(current);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;  <span class="comment">// Case 2: No right substree</span></div><div class="line">        BstNode* successor = <span class="literal">NULL</span>;</div><div class="line">        BstNode* ancestor = root;</div><div class="line">        <span class="keyword">while</span>(ancestor != current)&#123;</div><div class="line">            <span class="keyword">if</span>(current-&gt;data &lt; ancestor-&gt;data)&#123;</div><div class="line">                successor = ancestor;</div><div class="line">                ancestor = ancestor-&gt;left;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                ancestor = ancestor-&gt;right;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> successor;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    BstNode *root = <span class="literal">NULL</span>;</div><div class="line">    root = Insert(root, <span class="number">15</span>);</div><div class="line">    root = Insert(root, <span class="number">10</span>);</div><div class="line">    root = Insert(root, <span class="number">20</span>);</div><div class="line">    root = Insert(root, <span class="number">25</span>);</div><div class="line">    root = Insert(root, <span class="number">8</span>);</div><div class="line">    root = Insert(root, <span class="number">12</span>);</div><div class="line">    root = Insert(root, <span class="number">17</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Is 8 in the BST: "</span> &lt;&lt; FindElement(root, <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Find Min By Loops: "</span> &lt;&lt; FindMin(root) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Find Max By Loops: "</span> &lt;&lt; FindMax(root) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Find Min By Recursion: "</span> &lt;&lt; FinMinRec(root) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Find Max By Recursion: "</span> &lt;&lt; FinMaxRec(root) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Before the deletion: "</span>;</div><div class="line">    LevelOrder(root);</div><div class="line">    Delete(root, <span class="number">10</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"After the delation: "</span>;</div><div class="line">    LevelOrder(root);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The successor of 12: "</span>;</div><div class="line">    BstNode* successor = Getsuccessor(root, <span class="number">12</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; successor-&gt;data &lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>运行输出：</p>
<pre><code>Is 8 in the BST: 1
Find Min By Loops: 8
Find Max By Loops: 25
Find Min By Recursion: 8
Find Max By Recursion: 25
Before the deletion: 15 10 20 8 12 17 25 
After the delation: 15 12 20 8 17 25 
The successor of 12: 15
</code></pre><h5 id="BT"><a href="#BT" class="headerlink" title="BT"></a>BT</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">// BST Node</span></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    Node *left;</div><div class="line">    Node *right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node *<span class="title">GetNewNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    Node *newNode = <span class="keyword">new</span> Node();</div><div class="line">    newNode-&gt;data = data;</div><div class="line">    newNode-&gt;left = newNode-&gt;right = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这里其实是普通二叉树，为了方便我们还是用原来的顺序插入方式</span></div><div class="line"><span class="function">Node *<span class="title">Insert</span><span class="params">(Node *root, <span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        root = GetNewNode(data);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;data) &#123;</div><div class="line">        root-&gt;left = Insert(root-&gt;left, data);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        root-&gt;right = Insert(root-&gt;right, data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Find the height if the binary tree</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindHeight</span><span class="params">(Node *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 这里返回-1是为了恰好使得leaf的height为0</span></div><div class="line">    <span class="keyword">return</span> max(FindHeight(root-&gt;left), FindHeight(root-&gt;right)) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Breadth First Travel</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(Node *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tree is empty\n"</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>&lt;Node *&gt; Q;</div><div class="line">    Q.push(root);</div><div class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</div><div class="line">        Node *current = Q.front();</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; current-&gt;data &lt;&lt; <span class="string">" "</span>;</div><div class="line">        <span class="keyword">if</span> (current-&gt;left != <span class="literal">NULL</span>) Q.push(current-&gt;left);</div><div class="line">        <span class="keyword">if</span> (current-&gt;right != <span class="literal">NULL</span>) Q.push(current-&gt;right);</div><div class="line">        Q.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Depth First Travel --&gt; Preorder</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Preorder</span><span class="params">(Node *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;data &lt;&lt; <span class="string">" "</span>;</div><div class="line">    Preorder(root-&gt;left);</div><div class="line">    Preorder(root-&gt;right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Depth First Travel --&gt; Inorder</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inorder</span><span class="params">(Node *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    Inorder(root-&gt;left);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;data &lt;&lt; <span class="string">" "</span>;</div><div class="line">    Inorder(root-&gt;right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Depth First Travel --&gt; Postorder</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Postorder</span><span class="params">(Node *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    Postorder(root-&gt;left);</div><div class="line">    Postorder(root-&gt;right);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;data &lt;&lt; <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Check if a binary tree is a binary search tree of not</span></div><div class="line"></div><div class="line"><span class="comment">// Way1</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSubtreeLesser</span><span class="params">(Node *root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(</div><div class="line">        root-&gt;data &lt;= value</div><div class="line">        &amp;&amp; IsSubtreeLesser(root-&gt;left, value)</div><div class="line">        &amp;&amp; IsSubtreeLesser(root-&gt;right, value)</div><div class="line">            )</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSubtreeGreater</span><span class="params">(Node *root, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(</div><div class="line">            root-&gt;data &gt; value</div><div class="line">            &amp;&amp; IsSubtreeGreater(root-&gt;left, value)</div><div class="line">            &amp;&amp; IsSubtreeGreater(root-&gt;right, value)</div><div class="line">            )</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsBinarySearchTree</span><span class="params">(Node *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span> (</div><div class="line">            IsSubtreeLesser(root-&gt;left, root-&gt;data)</div><div class="line">            &amp;&amp; IsSubtreeGreater(root-&gt;right, root-&gt;data)</div><div class="line">            &amp;&amp; IsBinarySearchTree(root-&gt;left)</div><div class="line">            &amp;&amp; IsBinarySearchTree(root-&gt;right))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Way2</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsBstUtil</span><span class="params">(Node* root, <span class="keyword">int</span> minValue, <span class="keyword">int</span> maxValue)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(</div><div class="line">        root-&gt;data &gt;= minValue</div><div class="line">        &amp;&amp; root-&gt;data &lt; maxValue</div><div class="line">        &amp;&amp; IsBstUtil(root-&gt;left, minValue, root-&gt;data)</div><div class="line">        &amp;&amp; IsBstUtil(root-&gt;right, root-&gt;data, maxValue)</div><div class="line">            )</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsBinarySearchTree_ByBound</span><span class="params">(Node* root)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> IsBstUtil(root, INT_MIN, INT_MAX);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Way3</span></div><div class="line"><span class="comment">// 如果是BST那么Inorder遍历之后，对应的数组应该是从小到大顺序排列</span></div><div class="line"><span class="comment">// reload the Inorder function for our checking</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inorder</span><span class="params">(Node *root, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; InorderArray)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    Inorder(root-&gt;left, InorderArray);</div><div class="line">    InorderArray.push_back(root-&gt;data);</div><div class="line">    Inorder(root-&gt;right, InorderArray);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsBinarySearchTree_ByDftInOrder</span><span class="params">(Node* root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; InorderArray;</div><div class="line">    Inorder(root, InorderArray);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;InorderArray.size()<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(InorderArray[i] &gt; InorderArray[i+<span class="number">1</span>])</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Node *root = <span class="literal">NULL</span>;</div><div class="line">    root = Insert(root, <span class="number">15</span>);</div><div class="line">    root = Insert(root, <span class="number">10</span>);</div><div class="line">    root = Insert(root, <span class="number">20</span>);</div><div class="line">    root = Insert(root, <span class="number">25</span>);</div><div class="line">    root = Insert(root, <span class="number">8</span>);</div><div class="line">    root = Insert(root, <span class="number">12</span>);</div><div class="line">    root = Insert(root, <span class="number">17</span>);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Height: "</span> &lt;&lt; FindHeight(root) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"BFT: "</span>;</div><div class="line">    LevelOrder(root);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"DFT: Preorder: "</span>;</div><div class="line">    Preorder(root);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"DFT: Inorder"</span>;</div><div class="line">    Inorder(root);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"DFT: Postorder: "</span>;</div><div class="line">    Postorder(root);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Check is a BST or not way1: "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; IsBinarySearchTree(root);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Check is a BST or not way2: "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; IsBinarySearchTree_ByBound(root);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Check is a BST or not way3: "</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; IsBinarySearchTree_ByDftInOrder(root);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>Height: 2
BFT: 15 10 20 8 12 17 25 
DFT: Preorder: 15 10 8 12 20 17 25 
DFT: Inorder8 10 12 15 17 20 25 
DFT: Postorder: 8 12 10 17 25 20 15 
Check is a BST or not way1: 1
Check is a BST or not way2: 1
Check is a BST or not way3: 1
</code></pre><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.youtube.com/watch?v=gXgEDyodOJU&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=38" target="_blank" rel="external">mycodeschool</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SS使用-全局代理]]></title>
      <url>/2017/08/01/SS%E4%BD%BF%E7%94%A8-%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>SS全局代理的设置。测试情况：</p>
<p>设置PAC文件：</p>
<blockquote>
<p>参考<a href="http://www.pandagao.com/2016/05/13/ubuntu-use-shadowsocks-and-pac/" target="_blank" rel="external">这里</a>，开始运行不成功，因为PIP安装的GenPAC不支持Py3,即使update也不行orz…后来到Github发现正好新添加了Py3的支持，又clone并install重新安装GenPAC才可以(类似的版本问题值得注意！)，成功生成了PAC文件。然后在在系统设置，网络，代理里面选择自动，并指定了PAC的地址。之后启动Shadowsocks并连接。这时候Chrome可以在不使用插件的时候翻出去，但是FireFox还是不行，最后发现把原来的PAN插件禁用才可以。</p>
</blockquote>
<p>设置代理地址：</p>
<blockquote>
<p>在系统设置，网络，代理里面选择人工设置，在Socks Host一栏填入127.0.0.1:1080即可。之后启动Shadowsocks并连接。这时候Chrome可以在不使用插件的时候翻出去，但是FireFox不行,即使禁用了PAN也是不行。</p>
</blockquote>
<p>总之，通过第一种方法我们可以实现浏览器的完全的代理模式，但是终端还是不行。于是就用polipo来搞了。参考<a href="http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal/index.html" target="_blank" rel="external">这里</a>设置成功。</p>
<p>运行结果(盖住了部分ip…)：</p>
<pre><code>shensir@shen:~$ curl ip.gs
Current IP / 当前 IP: 150.255.29.xxx
ISP / 运营商:  ChinaUnicom
City / 城市: Haikou Hainan
Country / 国家: China
Please join Telegram group https://t.me/sbfans if you have any issues. / 如有问题，请加入 Telegram 群 https://t.me/sbfans 

  /\_/\
=( °w° )=
  )   (  //
 (__ __)//

shensir@shen:~$ hp curl ip.gs
Current IP / 当前 IP: 45.77.19.xxx
ISP / 运营商:  choopa.com
City / 城市: Tokyo Tokyo
Country / 国家: Japan
Please join Telegram group https://t.me/sbfans if you have any issues. / 如有问题，请加入 Telegram 群 https://t.me/sbfans 

  /\_/\
=( °w° )=
  )   (  //
 (__ __)//
</code></pre><p>貌似是可以了，可是我加了hp<code>再ping www.google.com</code>还是不行orz…<br>此外，代码翻墙也是有待解决…先挖个坑，有空再来填吧.</p>
<p>====================================================</p>
<p>2017/8/14 解决部分终端问题</p>
<p>今天在用conda装虚拟环境的时候，不管用不用前面的hp似乎都没什么卵用…就试了试proxychains。安装和设置都十分简单，参考<a href="https://github.com/naseeihity/LearnReact/issues/7" target="_blank" rel="external">这里</a>。这样设置后虽说还是ping不通Google,但是在使用conda装东西的时候速度可以起飞…嗯，目前是够用了，先这样。</p>
<p>====================================================<br>2017/9/10 解决Python代码翻墙问题</p>
<p>之前尝试了很多办法，都没办法在Python利用SS翻墙。现在是找到了两种解决方案。第一种就是在运行Python脚本的时候加上前面设置的proxychains。但是总感觉不太方便（Pycharm里面不好用…）于是就有了第二种方法（感谢一位群友相助），是利用requests设置代理IP的方法，其实也很简单：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">proxy = &#123;</div><div class="line">    <span class="string">"http"</span>: <span class="string">"http://localhost:1080"</span>,</div><div class="line">    <span class="string">"https"</span>: <span class="string">"https://localhost:1080"</span></div><div class="line">&#125;</div><div class="line">data = requests.get(<span class="string">"https://www.google.com.hk"</span>, proxies=proxy)</div><div class="line"></div><div class="line">print(data.status_code)</div><div class="line">print(data.text)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>这里有两个关键的地方：</p>
<ul>
<li>[ ] SS设置</li>
</ul>
<blockquote>
<p>Local Server Type 改成Http(s)。。。之前就是用SOCKS，一直不成。。</p>
</blockquote>
<ul>
<li>[ ] Http | SOCKS5</li>
</ul>
<blockquote>
<p>proxy里面， “http”: “<a href="http://localhost:1080" target="_blank" rel="external">http://localhost:1080</a>“ , 后面也对应改成http</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Coursera-ML]]></title>
      <url>/2017/07/25/Coursera-ML-ex1-Linear-Regression/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>Coursera上AndrawNg的ML课程，昨天写完了线性回归的编程作业，因为公式都已经推导出来了，所以编程实现相对比较简单。这里整理下，补充了一些代码，增强了一些可视化的效果。相关的帮助文档在课程中都能找得到，本次练习资料：<a href="https://www.coursera.org/learn/machine-learning/programming/8f3qT/linear-regression" target="_blank" rel="external">传送门</a>。</p>
<blockquote>
<p>这里只是线性回归的代码，本来打算把所有的代码贴到这里的，但是感觉文件太多会比较乱。前几天刚好结束了这门课，直接就把代码丢到了<a href="https://github.com/shenxiangzhuang/Coursera_ML" target="_blank" rel="external">Github</a>上。</p>
</blockquote>
<h4 id="Linear-regression-with-one-variable"><a href="#Linear-regression-with-one-variable" class="headerlink" title="Linear regression with one variable"></a>Linear regression with one variable</h4><h5 id="ex1-m"><a href="#ex1-m" class="headerlink" title="ex1.m"></a>ex1.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">%% Machine Learning Online Class - Exercise 1: Linear Regression</div><div class="line"></div><div class="line">%  Instructions</div><div class="line">%  ------------</div><div class="line">%</div><div class="line">%  This file contains code that helps you get started on the</div><div class="line">%  linear exercise. You will need to complete the following functions</div><div class="line">%  in this exericse:</div><div class="line">%</div><div class="line">%     warmUpExercise.m</div><div class="line">%     plotData.m</div><div class="line">%     gradientDescent.m</div><div class="line">%     computeCost.m</div><div class="line">%     gradientDescentMulti.m</div><div class="line">%     computeCostMulti.m</div><div class="line">%     featureNormalize.m</div><div class="line">%     normalEqn.m</div><div class="line">%</div><div class="line">%  For this exercise, you will not need to change any code in this file,</div><div class="line">%  or any other files other than those mentioned above.</div><div class="line">%</div><div class="line">% x refers to the population size in 10,000s</div><div class="line">% y refers to the profit in $10,000s</div><div class="line">%</div><div class="line"></div><div class="line">%% Initialization</div><div class="line">clear ; close all; clc</div><div class="line"></div><div class="line">%% ==================== Part 1: Basic Function ====================</div><div class="line">% Complete warmUpExercise.m</div><div class="line">fprintf(&apos;Running warmUpExercise ... \n&apos;);</div><div class="line">fprintf(&apos;5x5 Identity Matrix: \n&apos;);</div><div class="line">warmUpExercise()</div><div class="line"></div><div class="line">fprintf(&apos;Program paused. Press enter to continue.\n&apos;);</div><div class="line">pause;</div><div class="line"></div><div class="line"></div><div class="line">%% ======================= Part 2: Plotting =======================</div><div class="line">fprintf(&apos;Plotting Data ...\n&apos;)</div><div class="line">data = load(&apos;ex1data1.txt&apos;);</div><div class="line">X = data(:, 1); y = data(:, 2);</div><div class="line">m = length(y); % number of training examples</div><div class="line"></div><div class="line">% Plot Data</div><div class="line">% Note: You have to complete the code in plotData.m</div><div class="line">plotData(X, y);</div><div class="line"></div><div class="line">fprintf(&apos;Program paused. Press enter to continue.\n&apos;);</div><div class="line">pause;</div><div class="line"></div><div class="line">%% =================== Part 3: Cost and Gradient descent ===================</div><div class="line"></div><div class="line">X = [ones(m, 1), data(:,1)]; % Add a column of ones to x</div><div class="line">theta = zeros(2, 1); % initialize fitting parameters</div><div class="line"></div><div class="line">% Some gradient descent settings</div><div class="line">iterations = 1500;</div><div class="line">alpha = 0.01;</div><div class="line"></div><div class="line">fprintf(&apos;\nTesting the cost function ...\n&apos;)</div><div class="line">% compute and display initial cost</div><div class="line">J = computeCost(X, y, theta);</div><div class="line">fprintf(&apos;With theta = [0 ; 0]\nCost computed = %f\n&apos;, J);</div><div class="line">fprintf(&apos;Expected cost value (approx) 32.07\n&apos;);</div><div class="line"></div><div class="line">% further testing of the cost function</div><div class="line">J = computeCost(X, y, [-1 ; 2]);</div><div class="line">fprintf(&apos;\nWith theta = [-1 ; 2]\nCost computed = %f\n&apos;, J);</div><div class="line">fprintf(&apos;Expected cost value (approx) 54.24\n&apos;);</div><div class="line"></div><div class="line">fprintf(&apos;Program paused. Press enter to continue.\n&apos;);</div><div class="line">pause;</div><div class="line"></div><div class="line">fprintf(&apos;\nRunning Gradient Descent ...\n&apos;)</div><div class="line">% run gradient descent</div><div class="line">[theta, J_history, theta_history] = gradientDescent(X, y, theta, alpha, iterations);</div><div class="line"></div><div class="line">% print theta to screen</div><div class="line">fprintf(&apos;Theta found by gradient descent:\n&apos;);</div><div class="line">fprintf(&apos;%f\n&apos;, theta);</div><div class="line">fprintf(&apos;Expected theta values (approx)\n&apos;);</div><div class="line">fprintf(&apos; -3.6303\n  1.1664\n\n&apos;);</div><div class="line"></div><div class="line">% Plot the linear fit</div><div class="line">hold on; % keep previous plot visible</div><div class="line">plot(X(:,2), X*theta, &apos;-&apos;)</div><div class="line">legend(&apos;Training data&apos;, &apos;Linear regression&apos;)</div><div class="line">hold off % don&apos;t overlay any more plots on this figure</div><div class="line"></div><div class="line">% Predict values for population sizes of 35,000 and 70,000</div><div class="line">predict1 = [1, 3.5] *theta;</div><div class="line">fprintf(&apos;For population = 35,000, we predict a profit of %f\n&apos;,...</div><div class="line">    predict1*10000);</div><div class="line">predict2 = [1, 7] * theta;</div><div class="line">fprintf(&apos;For population = 70,000, we predict a profit of %f\n&apos;,...</div><div class="line">    predict2*10000);</div><div class="line"></div><div class="line">fprintf(&apos;Program paused. Press enter to continue.\n&apos;);</div><div class="line">pause;</div><div class="line"></div><div class="line">%% ============= Part 4: Visualizing J(theta_0, theta_1) =============</div><div class="line">fprintf(&apos;Visualizing J(theta_0, theta_1) ...\n&apos;)</div><div class="line"></div><div class="line">% Grid over which we will calculate J</div><div class="line">theta0_vals = linspace(-10, 10, 100);</div><div class="line">theta1_vals = linspace(-1, 4, 100);</div><div class="line"></div><div class="line">% initialize J_vals to a matrix of 0&apos;s</div><div class="line">J_vals = zeros(length(theta0_vals), length(theta1_vals));</div><div class="line"></div><div class="line">% Fill out J_vals</div><div class="line">for i = 1:length(theta0_vals)</div><div class="line">    for j = 1:length(theta1_vals)</div><div class="line">      t = [theta0_vals(i); theta1_vals(j)];</div><div class="line">      J_vals(i,j) = computeCost(X, y, t);</div><div class="line">    end</div><div class="line">end</div><div class="line"></div><div class="line"></div><div class="line">% Because of the way meshgrids work in the surf command, we need to</div><div class="line">% transpose J_vals before calling surf, or else the axes will be flipped</div><div class="line">J_vals = J_vals&apos;;</div><div class="line">% Surface plot</div><div class="line">figure;</div><div class="line">surf(theta0_vals, theta1_vals, J_vals)</div><div class="line">xlabel(&apos;\theta_0&apos;); ylabel(&apos;\theta_1&apos;);</div><div class="line"></div><div class="line">% Contour plot</div><div class="line">figure;</div><div class="line">% Plot J_vals as 15 contours spaced logarithmically between 0.01 and 100</div><div class="line">contour(theta0_vals, theta1_vals, J_vals, logspace(-2, 3, 20))</div><div class="line">xlabel(&apos;\theta_0&apos;); ylabel(&apos;\theta_1&apos;);</div><div class="line">hold on;</div><div class="line">nums_of_theta = size(theta_history, 1);</div><div class="line">plot(theta_history(1:nums_of_theta-1, 1), theta_history(1:nums_of_theta-1, 2), &apos;go&apos;, &apos;MarkerSize&apos;, 5, &apos;LineWidth&apos;, 1);</div><div class="line">plot(theta(1), theta(2), &apos;rx&apos;, &apos;MarkerSize&apos;, 10, &apos;LineWidth&apos;, 2);</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="plotData-m"><a href="#plotData-m" class="headerlink" title="plotData.m"></a>plotData.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function plotData(x, y)</div><div class="line">%PLOTDATA Plots the data points x and y into a new figure </div><div class="line">%   PLOTDATA(x,y) plots the data points and gives the figure axes labels of</div><div class="line">%   population and profit.</div><div class="line"></div><div class="line">figure; % open a new figure window</div><div class="line">plot(x, y, &apos;rx&apos;, &apos;MarkerSize&apos;, 10);</div><div class="line">xlabel(&apos;population&apos;); ylabel(&apos;revenue&apos;);</div><div class="line"></div><div class="line">end</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="computeCost-m"><a href="#computeCost-m" class="headerlink" title="computeCost.m"></a>computeCost.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function J = computeCost(X, y, theta)</div><div class="line">%COMPUTECOST Compute cost for linear regression</div><div class="line">%   J = COMPUTECOST(X, y, theta) computes the cost of using theta as the</div><div class="line">%   parameter for linear regression to fit the data points in X and y</div><div class="line"></div><div class="line">% Initialize some useful values</div><div class="line">m = length(y); % number of training examples</div><div class="line"></div><div class="line">% You need to return the following variables correctly </div><div class="line">J = 0;</div><div class="line"></div><div class="line">% ====================== YOUR CODE HERE ======================</div><div class="line">% Instructions: Compute the cost of a particular choice of theta</div><div class="line">%               You should set J to the cost.</div><div class="line"></div><div class="line"></div><div class="line">J = sum((X * theta - y).^2)/(2 * m);</div><div class="line"></div><div class="line">end</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="gradientDescent-m"><a href="#gradientDescent-m" class="headerlink" title="gradientDescent.m"></a>gradientDescent.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function [theta, J_history, theta_history] = gradientDescent(X, y, theta, alpha, num_iters)</div><div class="line">%GRADIENTDESCENT Performs gradient descent to learn theta</div><div class="line">%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by </div><div class="line">%   taking num_iters gradient steps with learning rate alpha</div><div class="line"></div><div class="line">% Initialize some useful values</div><div class="line">m = length(y); % number of training examples</div><div class="line">J_history = zeros(num_iters, 1);</div><div class="line">theta_history = zeros(num_iters, 2);</div><div class="line"></div><div class="line">for iter = 1:num_iters</div><div class="line"></div><div class="line">    % ====================== YOUR CODE HERE ======================</div><div class="line">    % Instructions: Perform a single gradient step on the parameter vector</div><div class="line">    %               theta. </div><div class="line">    %</div><div class="line">    % Hint: While debugging, it can be useful to print out the values</div><div class="line">    %       of the cost function (computeCost) and gradient here.</div><div class="line">    %</div><div class="line">    size(X);  % 97x2</div><div class="line">    size(theta);  % 2x1</div><div class="line">    size(y);  % 97x1</div><div class="line">    change = (alpha/m) * (X&apos; * (X * theta - y));</div><div class="line">    theta = theta - change;</div><div class="line"></div><div class="line">    % ============================================================</div><div class="line"></div><div class="line">    % Save the cost J in every iteration    </div><div class="line">    J_history(iter) = computeCost(X, y, theta);</div><div class="line">    theta_history(iter, :) = theta;</div><div class="line">    end</div><div class="line"></div><div class="line">    end</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>Running warmUpExercise ...
5x5 Identity Matrix:
ans =

Diagonal Matrix

   1   0   0   0   0
   0   1   0   0   0
   0   0   1   0   0
   0   0   0   1   0
   0   0   0   0   1

Program paused. Press enter to continue.
Plotting Data ...
Program paused. Press enter to continue.

Testing the cost function ...
With theta = [0 ; 0]
Cost computed = 32.072734
Expected cost value (approx) 32.07

With theta = [-1 ; 2]
Cost computed = 54.242455
Expected cost value (approx) 54.24
Program paused. Press enter to continue.

Running Gradient Descent ...
Theta found by gradient descent:
-3.630291
1.166362
Expected theta values (approx)
 -3.6303
  1.1664

For population = 35,000, we predict a profit of 4519.767868
For population = 70,000, we predict a profit of 45342.450129
Program paused. Press enter to continue.
Visualizing J(theta_0, theta_1) ...
</code></pre><p>几张图：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/Figure%201_072501.png" alt=""><br><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/Figure%202_072502.png" alt=""><br><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/Figure%203_072503.png" alt=""></p>
<h4 id="Linear-regression-with-multiple-variables"><a href="#Linear-regression-with-multiple-variables" class="headerlink" title="Linear regression with multiple variables"></a>Linear regression with multiple variables</h4><h5 id="ex1-multi-m"><a href="#ex1-multi-m" class="headerlink" title="ex1_multi.m"></a>ex1_multi.m</h5><p>需要注意的是，我们在根据新的数据预测价格的时候，要记得根据之前归一化mu和sigma对新的数据进行相同的处理。这点在帮助文档中也特别提出了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">%% Machine Learning Online Class</div><div class="line">%  Exercise 1: Linear regression with multiple variables</div><div class="line">%</div><div class="line">%  Instructions</div><div class="line">%  ------------</div><div class="line">% </div><div class="line">%  This file contains code that helps you get started on the</div><div class="line">%  linear regression exercise. </div><div class="line">%</div><div class="line">%  You will need to complete the following functions in this </div><div class="line">%  exericse:</div><div class="line">%</div><div class="line">%     warmUpExercise.m</div><div class="line">%     plotData.m</div><div class="line">%     gradientDescent.m</div><div class="line">%     computeCost.m</div><div class="line">%     gradientDescentMulti.m</div><div class="line">%     computeCostMulti.m</div><div class="line">%     featureNormalize.m</div><div class="line">%     normalEqn.m</div><div class="line">%</div><div class="line">%  For this part of the exercise, you will need to change some</div><div class="line">%  parts of the code below for various experiments (e.g., changing</div><div class="line">%  learning rates).</div><div class="line">%</div><div class="line"></div><div class="line">%% Initialization</div><div class="line"></div><div class="line">%% ================ Part 1: Feature Normalization ================</div><div class="line"></div><div class="line">%% Clear and Close Figures</div><div class="line">clear ; close all; clc</div><div class="line"></div><div class="line">fprintf(&apos;Loading data ...\n&apos;);</div><div class="line"></div><div class="line">%% Load Data</div><div class="line">data = load(&apos;ex1data2.txt&apos;);</div><div class="line">X = data(:, 1:2);</div><div class="line">y = data(:, 3);</div><div class="line">m = length(y);</div><div class="line"></div><div class="line">% Print out some data points</div><div class="line">fprintf(&apos;First 10 examples from the dataset: \n&apos;);</div><div class="line">fprintf(&apos; x = [%.0f %.0f], y = %.0f \n&apos;, [X(1:10,:) y(1:10,:)]&apos;);</div><div class="line"></div><div class="line">fprintf(&apos;Program paused. Press enter to continue.\n&apos;);</div><div class="line">pause;</div><div class="line"></div><div class="line">% Scale features and set them to zero mean</div><div class="line">fprintf(&apos;Normalizing Features ...\n&apos;);</div><div class="line"></div><div class="line">[X mu sigma] = featureNormalize(X);</div><div class="line"></div><div class="line">% Add intercept term to X</div><div class="line">X = [ones(m, 1) X];</div><div class="line"></div><div class="line"></div><div class="line">%% ================ Part 2: Gradient Descent ================</div><div class="line"></div><div class="line">% ====================== YOUR CODE HERE ======================</div><div class="line">% Instructions: We have provided you with the following starter</div><div class="line">%               code that runs gradient descent with a particular</div><div class="line">%               learning rate (alpha). </div><div class="line">%</div><div class="line">%               Your task is to first make sure that your functions - </div><div class="line">%               computeCost and gradientDescent already work with </div><div class="line">%               this starter code and support multiple variables.</div><div class="line">%</div><div class="line">%               After that, try running gradient descent with </div><div class="line">%               different values of alpha and see which one gives</div><div class="line">%               you the best result.</div><div class="line">%</div><div class="line">%               Finally, you should complete the code at the end</div><div class="line">%               to predict the price of a 1650 sq-ft, 3 br house.</div><div class="line">%</div><div class="line">% Hint: By using the &apos;hold on&apos; command, you can plot multiple</div><div class="line">%       graphs on the same figure.</div><div class="line">%</div><div class="line">% Hint: At prediction, make sure you do the same feature normalization.</div><div class="line">%</div><div class="line"></div><div class="line">fprintf(&apos;Running gradient descent ...\n&apos;);</div><div class="line"></div><div class="line">% Choose some alpha value</div><div class="line">alpha = 0.01;</div><div class="line">num_iters = 400;</div><div class="line"></div><div class="line">% Init Theta and Run Gradient Descent </div><div class="line">theta = zeros(3, 1);</div><div class="line">[theta, J_history] = gradientDescentMulti(X, y, theta, alpha, num_iters);</div><div class="line"></div><div class="line">% Plot the convergence graph</div><div class="line">figure;</div><div class="line">plot(1:numel(J_history), J_history, &apos;-b&apos;, &apos;LineWidth&apos;, 2);</div><div class="line">xlabel(&apos;Number of iterations&apos;);</div><div class="line">ylabel(&apos;Cost J&apos;);</div><div class="line"></div><div class="line">% Display gradient descent&apos;s result</div><div class="line">fprintf(&apos;Theta computed from gradient descent: \n&apos;);</div><div class="line">fprintf(&apos; %f \n&apos;, theta);</div><div class="line">fprintf(&apos;\n&apos;);</div><div class="line"></div><div class="line">% Estimate the price of a 1650 sq-ft, 3 br house</div><div class="line">% ====================== YOUR CODE HERE ======================</div><div class="line">% Recall that the first column of X is all-ones. Thus, it does</div><div class="line">% not need to be normalized.</div><div class="line">sq_ft_norm = (1650-mu(1))/sigma(1);</div><div class="line">br_norm = (3-mu(2))/sigma(2);</div><div class="line">price = price = theta(1) + theta(2)*sq_ft_norm + theta(3)*br_norm; % You should change this</div><div class="line"></div><div class="line"></div><div class="line">% ============================================================</div><div class="line"></div><div class="line">fprintf([&apos;Predicted price of a 1650 sq-ft, 3 br house &apos; ...</div><div class="line">         &apos;(using gradient descent):\n $%f\n&apos;], price);</div><div class="line"></div><div class="line">fprintf(&apos;Program paused. Press enter to continue.\n&apos;);</div><div class="line">pause;</div><div class="line"></div><div class="line">%% ================ Part 3: Normal Equations ================</div><div class="line"></div><div class="line">fprintf(&apos;Solving with normal equations...\n&apos;);</div><div class="line"></div><div class="line">% ====================== YOUR CODE HERE ======================</div><div class="line">% Instructions: The following code computes the closed form </div><div class="line">%               solution for linear regression using the normal</div><div class="line">%               equations. You should complete the code in </div><div class="line">%               normalEqn.m</div><div class="line">%</div><div class="line">%               After doing so, you should complete this code </div><div class="line">%               to predict the price of a 1650 sq-ft, 3 br house.</div><div class="line">%</div><div class="line"></div><div class="line">%% Load Data</div><div class="line">data = csvread(&apos;ex1data2.txt&apos;);</div><div class="line">X = data(:, 1:2);</div><div class="line">y = data(:, 3);</div><div class="line">m = length(y);</div><div class="line"></div><div class="line">% Add intercept term to X</div><div class="line">X = [ones(m, 1) X];</div><div class="line"></div><div class="line">% Calculate the parameters from the normal equation</div><div class="line">theta = normalEqn(X, y);</div><div class="line"></div><div class="line">% Display normal equation&apos;s result</div><div class="line">fprintf(&apos;Theta computed from the normal equations: \n&apos;);</div><div class="line">fprintf(&apos; %f \n&apos;, theta);</div><div class="line">fprintf(&apos;\n&apos;);</div><div class="line"></div><div class="line"></div><div class="line">% Estimate the price of a 1650 sq-ft, 3 br house</div><div class="line">% ====================== YOUR CODE HERE ======================</div><div class="line">price = theta(1) + theta(2)*1650 + theta(3)*3; % You should change this</div><div class="line"></div><div class="line"></div><div class="line">% ============================================================</div><div class="line"></div><div class="line">fprintf([&apos;Predicted price of a 1650 sq-ft, 3 br house &apos; ...</div><div class="line">         &apos;(using normal equations):\n $%f\n&apos;], price);</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="computeCostMulti-m"><a href="#computeCostMulti-m" class="headerlink" title="computeCostMulti.m"></a>computeCostMulti.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function J = computeCostMulti(X, y, theta)</div><div class="line">%COMPUTECOSTMULTI Compute cost for linear regression with multiple variables</div><div class="line">%   J = COMPUTECOSTMULTI(X, y, theta) computes the cost of using theta as the</div><div class="line">%   parameter for linear regression to fit the data points in X and y</div><div class="line"></div><div class="line">% Initialize some useful values</div><div class="line">m = length(y); % number of training examples</div><div class="line"></div><div class="line">% You need to return the following variables correctly </div><div class="line">J = 0;</div><div class="line"></div><div class="line">% ====================== YOUR CODE HERE ======================</div><div class="line">% Instructions: Compute the cost of a particular choice of theta</div><div class="line">%               You should set J to the cost.</div><div class="line"></div><div class="line">J = (((X*theta - y)&apos;)*(X*theta - y))/(2*m);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">% =========================================================================</div><div class="line"></div><div class="line">end</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="featureNormalize-m"><a href="#featureNormalize-m" class="headerlink" title="featureNormalize.m"></a>featureNormalize.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function [X_norm, mu, sigma] = featureNormalize(X)</div><div class="line">%FEATURENORMALIZE Normalizes the features in X </div><div class="line">%   FEATURENORMALIZE(X) returns a normalized version of X where</div><div class="line">%   the mean value of each feature is 0 and the standard deviation</div><div class="line">%   is 1. This is often a good preprocessing step to do when</div><div class="line">%   working with learning algorithms.</div><div class="line"></div><div class="line">% You need to set these values correctly</div><div class="line">X_norm = X;</div><div class="line">mu = zeros(1, size(X, 2));</div><div class="line">sigma = zeros(1, size(X, 2));</div><div class="line"></div><div class="line">% ====================== YOUR CODE HERE ======================</div><div class="line">% Instructions: First, for each feature dimension, compute the mean</div><div class="line">%               of the feature and subtract it from the dataset,</div><div class="line">%               storing the mean value in mu. Next, compute the </div><div class="line">%               standard deviation of each feature and divide</div><div class="line">%               each feature by it&apos;s standard deviation, storing</div><div class="line">%               the standard deviation in sigma. </div><div class="line">%</div><div class="line">%               Note that X is a matrix where each column is a </div><div class="line">%               feature and each row is an example. You need </div><div class="line">%               to perform the normalization separately for </div><div class="line">%               each feature. </div><div class="line">%</div><div class="line">% Hint: You might find the &apos;mean&apos; and &apos;std&apos; functions useful.</div><div class="line">%       </div><div class="line"></div><div class="line"></div><div class="line">cols = size(X, 2);</div><div class="line">for col = 1:cols</div><div class="line">    featurex = X(:, col);</div><div class="line"></div><div class="line">    mux = mean(featurex);</div><div class="line">    mu(col) = mux;</div><div class="line"></div><div class="line">    featurex = featurex - mux;</div><div class="line"></div><div class="line">    sigmax = std(featurex);</div><div class="line">    sigma(col) = sigmax;</div><div class="line"></div><div class="line">    featurex = featurex/sigmax;</div><div class="line"></div><div class="line">    X_norm(:, col) = featurex;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">% ============================================================</div><div class="line"></div><div class="line">end</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="gradientDescentMulti-m"><a href="#gradientDescentMulti-m" class="headerlink" title="gradientDescentMulti.m"></a>gradientDescentMulti.m</h5><p>这里和单变量的是一样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function [theta, J_history] = gradientDescentMulti(X, y, theta, alpha, num_iters)</div><div class="line">%GRADIENTDESCENTMULTI Performs gradient descent to learn theta</div><div class="line">%   theta = GRADIENTDESCENTMULTI(x, y, theta, alpha, num_iters) updates theta by</div><div class="line">%   taking num_iters gradient steps with learning rate alpha</div><div class="line"></div><div class="line">% Initialize some useful values</div><div class="line">m = length(y); % number of training examples</div><div class="line">J_history = zeros(num_iters, 1);</div><div class="line"></div><div class="line">for iter = 1:num_iters</div><div class="line"></div><div class="line">    % ====================== YOUR CODE HERE ======================</div><div class="line">    % Instructions: Perform a single gradient step on the parameter vector</div><div class="line">    %               theta. </div><div class="line">    %</div><div class="line">    % Hint: While debugging, it can be useful to print out the values</div><div class="line">    %       of the cost function (computeCostMulti) and gradient here.</div><div class="line">    %</div><div class="line"></div><div class="line">    change = (alpha/m) * (X&apos; * (X * theta - y));</div><div class="line">    theta = theta - change;</div><div class="line">    % ============================================================</div><div class="line"></div><div class="line">    % Save the cost J in every iteration    </div><div class="line">    J_history(iter) = computeCostMulti(X, y, theta);</div><div class="line"></div><div class="line">end</div><div class="line"></div><div class="line">end</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<pre><code>Loading data ...
First 10 examples from the dataset:
 x = [2104 3], y = 399900
 x = [1600 3], y = 329900
 x = [2400 3], y = 369000
 x = [1416 2], y = 232000
 x = [3000 4], y = 539900
 x = [1985 4], y = 299900
 x = [1534 3], y = 314900
 x = [1427 3], y = 198999
 x = [1380 3], y = 212000
 x = [1494 3], y = 242500
Program paused. Press enter to continue.
Normalizing Features ...
Running gradient descent ...
Theta computed from gradient descent:
 334302.063993
 100087.116006
 3673.548451

Predicted price of a 1650 sq-ft, 3 br house (using gradient descent):
 $289314.620338
Program paused. Press enter to continue.
Solving with normal equations...
Theta computed from the normal equations:
 89597.909542
 139.210674
 -8738.019112

Predicted price of a 1650 sq-ft, 3 br house (using normal equations):
 $293081.464335
</code></pre><p>迭代图：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201707/Figure%201_072504.png" alt=""></p>
<p>这是单变量即多变量的线性回归，主要用了梯度下降最小化cost function来进行参数的选择，也用到了Normal Equations其可以代替梯度下降法进行参数选择。关于两者的优劣与选用问题，可参考<a href="http://www.cnblogs.com/elaron/archive/2013/05/20/3088894.html" target="_blank" rel="external">这里</a>也是根据视频总结的。此外视频中并没有对Normal Equation做太多的解释，可以参考<a href="https://zhuanlan.zhihu.com/p/22757336" target="_blank" rel="external">这里</a>。</p>
<p>下一章就是logistic regression了，有空再写。</p>
]]></content>
      
        <categories>
            
            <category> Octave </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Octave </tag>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV获取安卓手机摄像头的视频流]]></title>
      <url>/2017/07/22/OpenCV%E8%8E%B7%E5%8F%96%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E8%A7%86%E9%A2%91%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>最近又拿来<em>OpenCV 3 Computer Vision Application Programming Cookbook</em>看，上学期学到第8章就停下来在这里写笔记总结了。略过了三维重建那章，看到了视频的处理，其实这个基本的操作基本会了。然后觉着电脑摄像头像素太差…突然想到能不能用下手机的摄像头:-)于是就搜了下，还真有…方法也挺简单的。</p>
<p>首先到Google play（当然有墙了orz…）下载<a href="https://play.google.com/store/apps/details?id=com.pas.webcam&amp;hl=en" target="_blank" rel="external">IP Webcam</a>.然后把手机和电脑连到同一个WIFI下，手机端开启视频流服务。根据手机端的提示，我们到<a href="http://192.168.1.106:8080/" target="_blank" rel="external">http://192.168.1.106:8080/</a> 即可看到手机摄像头的实时视频。</p>
<p>但是呢，我们获取的视频能够实时地被处理才有意义。所以，我们可以直接导入到OpenCV内，方便进一步的处理。下面给出两种办法，第一种是用了curl库，略显复杂：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"curl/curl.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">size_t</span> write_data(<span class="keyword">char</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, <span class="keyword">void</span> *userdata) &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">ostringstream</span> *stream = (<span class="built_in">std</span>::<span class="built_in">ostringstream</span>*)userdata;</div><div class="line">    <span class="keyword">size_t</span> count = size * nmemb;</div><div class="line">    stream-&gt;write(ptr, count);</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"><span class="comment">//function to retrieve the image as Cv::Mat data type</span></div><div class="line">cv::<span class="function">Mat <span class="title">curlImg</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    CURL *curl;</div><div class="line">    CURLcode res;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">ostringstream</span> stream;</div><div class="line">    curl = curl_easy_init();</div><div class="line">    curl_easy_setopt(curl, CURLOPT_URL, <span class="string">"http://192.168.1.106:8080/shot.jpg"</span>); <span class="comment">//the JPEG Frame url  //</span></div><div class="line">    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data); <span class="comment">// pass the writefunction</span></div><div class="line">    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &amp;stream); <span class="comment">// pass the stream ptr when the writefunction is called</span></div><div class="line">    res = curl_easy_perform(curl); <span class="comment">// start curl</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> output = stream.str(); <span class="comment">// convert the stream into a string</span></div><div class="line">    curl_easy_cleanup(curl); <span class="comment">// cleanup</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; data = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;( output.begin(), output.end() ); <span class="comment">//convert string into a vector</span></div><div class="line">    cv::Mat data_mat = cv::Mat(data); <span class="comment">// create the cv::Mat datatype from the vector</span></div><div class="line">    cv::Mat image = cv::imdecode(data_mat,<span class="number">1</span>); <span class="comment">//read an image from memory buffer</span></div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    cv::namedWindow( <span class="string">"Image output"</span>, CV_WINDOW_AUTOSIZE );</div><div class="line">    <span class="keyword">double</span> scale=<span class="number">0.5</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        cv::Mat image = curlImg(); <span class="comment">// get the image frame</span></div><div class="line">        <span class="comment">//可以不resize，不过电脑端会图像显示很大</span></div><div class="line">        cv::Size dsize = cv::Size(image.cols*scale,image.rows*scale);</div><div class="line">        cv::Mat image2 = cv::Mat(dsize,CV_32S);</div><div class="line">        resize(image, image2,dsize);</div><div class="line">        cv::imshow(<span class="string">"Image output"</span>,image2); <span class="comment">//display image frame</span></div><div class="line">        <span class="keyword">char</span> c = cvWaitKey(<span class="number">33</span>); <span class="comment">// sleep for 33ms or till a key is pressed (put more then ur camera framerate mine is 30ms)</span></div><div class="line">        <span class="keyword">if</span> ( c == <span class="number">27</span> ) <span class="keyword">break</span>; <span class="comment">// break if ESC is pressed</span></div><div class="line">    &#125;</div><div class="line">    cv::destroyWindow(<span class="string">"Image output"</span>);</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>还有一种就比较简单，直接利用OpenCV自带的处理视频流的函数即可：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCamera</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::VideoCapture capture;</div><div class="line">    capture.open(<span class="string">"http://192.168.1.106:8080/video"</span>);</div><div class="line">    <span class="comment">// Check if video successfully opened</span></div><div class="line">    <span class="keyword">if</span>(capture.isOpened())</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"OK!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Get the frame rate</span></div><div class="line">    <span class="keyword">double</span> rate = capture.get(CV_CAP_PROP_FPS);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">stop</span><span class="params">(<span class="literal">false</span>)</span></span>;</div><div class="line">    cv::Mat frame;</div><div class="line">    cv::namedWindow(<span class="string">"Extracted Frame"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Delay between each frame in ms</span></div><div class="line">    <span class="comment">// corresponds to video frame rate</span></div><div class="line">    <span class="keyword">int</span> delay = <span class="number">1000</span>/rate;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"rate: "</span> &lt;&lt; rate &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1/rate: "</span> &lt;&lt; <span class="number">1</span>/rate &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// for all frames in video</span></div><div class="line">    <span class="keyword">while</span>(!stop)&#123;</div><div class="line">        <span class="comment">// read next frame if any</span></div><div class="line">        <span class="keyword">if</span> (!capture.read(frame))</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        cv::imshow(<span class="string">"Extracted Frame"</span>, frame);</div><div class="line">        <span class="comment">// introduce a delay</span></div><div class="line">        <span class="comment">// or press key to stop</span></div><div class="line">        <span class="keyword">if</span>(cv::waitKey(delay)&gt;=<span class="number">0</span>)</div><div class="line">            stop=<span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Close the video file</span></div><div class="line">    capture.release();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    MCamera();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>这种方法就比较直观，也容易使用。这里我们是直接获使用和MJPEG URL进行视频流的获取，除此之外我们还有其他的请求方式：</p>
<blockquote>
<p><a href="http://192.168.1.106:8080/video" target="_blank" rel="external">http://192.168.1.106:8080/video</a> 是 MJPEG URL.<br><a href="http://192.168.1.106:8080/shot.jpg" target="_blank" rel="external">http://192.168.1.106:8080/shot.jpg</a> 获取最新一帧<br><a href="http://192.168.1.106:8080/audio.wav" target="_blank" rel="external">http://192.168.1.106:8080/audio.wav</a> 是WAV格式的音频流<br><a href="http://192.168.1.106:8080/audio.aac" target="_blank" rel="external">http://192.168.1.106:8080/audio.aac</a> 是AAC格式的音频流（如果硬件支持的话）<br><a href="http://192.168.1.106:8080/audio.opus" target="_blank" rel="external">http://192.168.1.106:8080/audio.opus</a> 是Opus格式的音频流<br><a href="http://192.168.1.106:8080/focus" target="_blank" rel="external">http://192.168.1.106:8080/focus</a> 对焦摄像头<br><a href="http://192.168.1.106:8080/nofocus" target="_blank" rel="external">http://192.168.1.106:8080/nofocus</a> 释放对焦</p>
</blockquote>
<p>更多设置参考 <a href="http://192.168.1.106:8080/viewers.html#advanced。" target="_blank" rel="external">http://192.168.1.106:8080/viewers.html#advanced。</a></p>
<p>这里两种方法的测试效果都是挺好的，播放都很流畅，几乎没有延迟。</p>
<p>其实ivideon也提供给我们一种不需要连接在同一WIFI下就可以查看安卓视频流的方法，那就是通过ivideon的帐号。在手机端登录，在浏览器也进行登录即可查看，但是没有找到相关的接口可以用Cpp直接请求来获取数据，可能需要自己模拟登录再抓包获取，不过还不会用Cpp写爬虫呢…这个测试的效果也并不太好，比较卡，而且延迟较高。等有时间再看下这个能不能解决吧。</p>
<p>除了使用自己的摄像头之外，网络上也有一些开放的IP Camera （之后我们可以用这些资源做些测试嘛0.0） , 我们可以直接在浏览器访问，OpenCV也为我们提供了很好的接口从网上直接读取视频。</p>
<p>比如这个地址：　<code>http://150.214.93.55/mjpg/video.mjpg</code>，　以及　<code>http://plazacam.studentaffairs.duke.edu/view/view.shtml?id=2862&amp;imagepath=/mjpg/video.mjpg&amp;size=1</code> 都是可以在浏览器直接看到实时的界面的，前面一种比较简单，像上面一样直接将地址替换即可。但是后面的这个地址是不能直接替换的，根据<a href="https://stackoverflow.com/questions/15584161/ip-camera-and-opencv" target="_blank" rel="external">这里</a>我们尝试找到视频的真正地址为<code>http://plazacam.studentaffairs.duke.edu/mjpg/video.mjpg</code>,使用这个即可。但是参考的这个答案说：</p>
<blockquote>
<p>one way or the other, opencv seems to insist, that the url must end with “.mjpg” (dot mjpg), so if it doesn’t, add a dummy param to it, like : my/fancy/url?type=.mjpg</p>
</blockquote>
<p>还好有个seems to insist … 因为我们前面已经看到了，安卓手机的摄像头的地址并非以<code>.mjpg</code>结尾。</p>
<p>暂时先记录下，继续学习CV，等到能较好地识别视频中一些物体时再结合这个看能不能做个小应用玩玩。</p>
<p>参考：</p>
<p><a href="http://blog.leanote.com/post/leeyoung/opencv%E8%8E%B7%E5%8F%96android%E6%89%8B%E6%9C%BA%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E8%A7%86%E9%A2%91%E6%B5%81-2" target="_blank" rel="external">opencv获取android手机摄像头的视频流 </a></p>
<p><a href="">IP camera and OPENCV</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记二十四：Detecting corners in an image]]></title>
      <url>/2017/07/20/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%9ADetecting-corners-in-an-image/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>关于图片关键点的检测中，corner点的检测。</p>
<blockquote>
<p>When searching for interesting feature points in images, corners come out as an interesting solution. They are indeed local features that can be easily localized in an image, and in addition, they should abound in scenes of man-made objects (where they are produced by walls, doors, windows, tables, and so on).</p>
</blockquote>
<p>这里主要是基于Harris feature detector的实现。</p>
<p>首先是corners的定义：</p>
<blockquote>
<p>To define the notion of corners in images, the Harris feature detector looks at the average directional change in intensity in a small window around a putative interest point…. This average intensity change can then be computed in all possible directions, which leads to the definition of a corner as a point for which the average change is high in more than one direction.</p>
</blockquote>
<p>这里的公式没有看太懂，大致就是利用梯度找到对比度较强的点作为corner.</p>
<p>这里首先介绍了经典的Harris feature detector的实现，接着针对feature point clustering问题给出了两种解决的办法，分别是non-maxima suppression，通过dilate操作来实现；还有GFTT（good-features-to-track），通过设置两个interest points 之间的最小距离来解决。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="harrisDetector-h"><a href="#harrisDetector-h" class="headerlink" title="harrisDetector.h"></a>harrisDetector.h</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//</div><div class="line">// Created by shensir on 17-7-20.</div><div class="line">//</div><div class="line"></div><div class="line">#ifndef CLIONS_HARRISDETECTOR_H</div><div class="line">#define CLIONS_HARRISDETECTOR_H</div><div class="line"></div><div class="line"></div><div class="line">#include &lt;opencv2/core/mat.hpp&gt;</div><div class="line">#include &lt;opencv2/imgproc.hpp&gt;</div><div class="line"></div><div class="line">class harrisDetector &#123;</div><div class="line">private:</div><div class="line">    // 32-it float image of corner strength</div><div class="line">    cv::Mat cornerStrength;</div><div class="line">    // 32-bit float image of thresholded corners</div><div class="line">    cv::Mat cornerTh;</div><div class="line">    // image of local maxima(internal)</div><div class="line">    cv::Mat localMax;</div><div class="line">    // size of neighborhood for derivatives smoothing</div><div class="line">    int neighborhood;</div><div class="line">    // aperture for gradient computation</div><div class="line">    int aperture;</div><div class="line">    // Harris parameter</div><div class="line">    double k;</div><div class="line">    // maximum strength for threshold computation</div><div class="line">    double maxStrength;</div><div class="line">    // calculated threshold(internal)</div><div class="line">    double threshold;</div><div class="line">    // size of neighborhood for non-max suppression</div><div class="line">    int nonMaxSize;</div><div class="line">    // kernel for non-max suppression</div><div class="line">    cv::Mat kernel;</div><div class="line"></div><div class="line">public:</div><div class="line">    harrisDetector():neighborhood(3), aperture(3),</div><div class="line">                     k(0.01), maxStrength(0.0),</div><div class="line">                     threshold(0.01), nonMaxSize(3)&#123;</div><div class="line">        // create kernel used in non-maxima suppression</div><div class="line">        setLocalMaxWindowSize(nonMaxSize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    // Create kernel used in non-maxima suppression</div><div class="line">    void setLocalMaxWindowSize(int size) &#123;</div><div class="line"></div><div class="line">        nonMaxSize= size;</div><div class="line">        kernel.create(nonMaxSize,nonMaxSize,CV_8U);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    // compute Harris corners</div><div class="line">    void detect(const cv::Mat&amp; image)&#123;</div><div class="line">        // Harris computation</div><div class="line">        cv::cornerHarris(image, cornerStrength,</div><div class="line">        neighborhood, aperture, k);</div><div class="line"></div><div class="line">        // internal threshold computation</div><div class="line">        cv::minMaxLoc(cornerStrength, 0, &amp;maxStrength);</div><div class="line">        // local maxima detection</div><div class="line">        cv::Mat dilated;</div><div class="line">        cv::dilate(cornerStrength, dilated, cv::Mat());</div><div class="line">        cv::compare(cornerStrength, dilated, localMax, cv::CMP_EQ);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Get the corner map from the computed Harris values</div><div class="line">    cv::Mat getCornerMap(double qualityLevel)&#123;</div><div class="line"></div><div class="line">        cv::Mat cornerMap;</div><div class="line">        // thresholding the corner strength</div><div class="line">        threshold = qualityLevel*maxStrength;</div><div class="line">        cv::threshold(cornerStrength, cornerTh, threshold,</div><div class="line">        255, cv::THRESH_BINARY);</div><div class="line"></div><div class="line">        // convert to 8-bit image</div><div class="line">        cornerTh.convertTo(cornerMap, CV_8U);</div><div class="line">        // not-maxima suppression</div><div class="line">        cv::bitwise_and(cornerMap, localMax, cornerMap);</div><div class="line"></div><div class="line">        return cornerMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Get the feature points from the computed Harris values</div><div class="line">    void getCorners(std::vector&lt;cv::Point&gt;&amp;points, double qualityLeves)&#123;</div><div class="line">        // Get the corner map</div><div class="line">        cv::Mat cornerMap = getCornerMap(qualityLeves);</div><div class="line">        // Get the corners</div><div class="line">        getCorners(points, cornerMap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Get the feature points from the computed corner mao</div><div class="line">    void getCorners(std::vector&lt;cv::Point&gt;&amp;points,</div><div class="line">                    const cv::Mat&amp; cornerMap)&#123;</div><div class="line">        // Iterate over the pixels to obtain all features</div><div class="line">        for(int y = 0; y &lt; cornerMap.rows; y++)&#123;</div><div class="line">            const uchar* rowPtr = cornerMap.ptr&lt;uchar&gt;(y);</div><div class="line">            for(int x = 0; x &lt; cornerMap.cols; x++)&#123;</div><div class="line">                // if it is a feature point</div><div class="line">                if(rowPtr[x])&#123;</div><div class="line">                    points.push_back(cv::Point(x, y));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // Draw circles at feature point locations on an image</div><div class="line">    void drawOnImage(cv::Mat&amp; image,</div><div class="line">                    const std::vector&lt;cv::Point&gt;&amp;points,</div><div class="line">                    cv::Scalar color = cv::Scalar(255, 255, 255),</div><div class="line">                    int radius=3, int thickness=1)&#123;</div><div class="line">        std::vector&lt;cv::Point&gt;::const_iterator it = points.begin();</div><div class="line">        // for all corners</div><div class="line">        while (it != points.end())&#123;</div><div class="line">            // draw a circle at each corner location</div><div class="line">            cv::circle(image, *it, radius, color, thickness);</div><div class="line">            ++it;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">#endif //CLIONS_HARRISDETECTOR_H</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"harrisDetector.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">findHarrisCorner</span><span class="params">(<span class="keyword">const</span> Mat image)</span></span>&#123;</div><div class="line">    Mat HarriCorner;</div><div class="line">    cornerHarris(image,</div><div class="line">                HarriCorner,</div><div class="line">                <span class="number">3</span>,</div><div class="line">                <span class="number">3</span>,</div><div class="line">                <span class="number">0.01</span>);</div><div class="line"></div><div class="line">    Mat HarriCornerThreshed;</div><div class="line">    <span class="keyword">double</span> thresholdNum = <span class="number">0.0001</span>;</div><div class="line">    threshold(HarriCorner, HarriCornerThreshed,</div><div class="line">                thresholdNum, <span class="number">255</span>, THRESH_BINARY_INV);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> HarriCornerThreshed;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">MGFTT</span><span class="params">(Mat image)</span></span>&#123;</div><div class="line">    <span class="comment">// Compute good features to track</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::KeyPoint&gt;keypoints;</div><div class="line">    <span class="comment">// GFTT detector</span></div><div class="line">    cv::Ptr&lt;cv::GFTTDetector&gt;ptrGFTT =</div><div class="line">            cv::GFTTDetector::create(</div><div class="line">                    <span class="number">500</span>,</div><div class="line">                    <span class="number">0.01</span>,</div><div class="line">                    <span class="number">10</span></div><div class="line">            );</div><div class="line"></div><div class="line">    <span class="comment">// detect the GFTT</span></div><div class="line">    ptrGFTT-&gt;detect(image, keypoints);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::KeyPoint&gt;::const_iterator it = keypoints.begin();</div><div class="line">    <span class="keyword">while</span>(it != keypoints.end())&#123;</div><div class="line">        cv::circle(image, it-&gt;pt, <span class="number">3</span>, cv::Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>);</div><div class="line">        ++it;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Mat image;</div><div class="line">    image = imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/MyCV/data/church01.jpg"</span>, <span class="number">0</span>);</div><div class="line">    imshow(<span class="string">"Original"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// Raw harrisCorner</span></div><div class="line">    Mat HarriCornerThreshed;</div><div class="line">    HarriCornerThreshed = findHarrisCorner(image);</div><div class="line">    imshow(<span class="string">"HarrisCornerThreshed"</span>, HarriCornerThreshed);</div><div class="line"></div><div class="line">    <span class="comment">// non-maxima suppression(for the problem of feature point clustering.)</span></div><div class="line"></div><div class="line">    <span class="comment">// Create Harris detector instance</span></div><div class="line">    Mat image2;</div><div class="line">    image.copyTo(image2);</div><div class="line"></div><div class="line">    harrisDetector harris;</div><div class="line">    <span class="comment">// Compute Harris values</span></div><div class="line">    harris.detect(image2);</div><div class="line">    <span class="comment">// Detect Harris corners</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point&gt; pts;</div><div class="line">    harris.getCorners(pts, <span class="number">0.02</span>);</div><div class="line">    <span class="comment">// Draw Harris corners</span></div><div class="line">    harris.drawOnImage(image2, pts);</div><div class="line">    imshow(<span class="string">"non-maxima suppression"</span>, image2);</div><div class="line"></div><div class="line">    <span class="comment">//  impose a minimum distance between two interest points.</span></div><div class="line">    <span class="comment">// (for the problem of feature point clustering.)</span></div><div class="line">    Mat image3;</div><div class="line">    image.copyTo(image3);</div><div class="line"></div><div class="line">    Mat GfttImage;</div><div class="line">    GfttImage = MGFTT(image3);</div><div class="line">    imshow(<span class="string">"GFTT"</span>, GfttImage);</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://otdfzpvtk.bkt.clouddn.com/Selection_072001.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我这个人呢]]></title>
      <url>/2017/07/09/%E6%88%91%E8%BF%99%E4%B8%AA%E4%BA%BA%E5%91%A2/</url>
      <content type="html"><![CDATA[<p>这几天比较闲，就来这里随便写点东西，好在知道小站的人不多，就当作一份笔记吧。</p>
<p>记得马克思他老人家说过，人是社会关系的总和。仔细想来，这是经得起推敲的。假设是个好词，我们假设将一个人从小放在孤岛之上生活，那么必然——说实在的——他不能被叫做是人了，因为他将不具有现代意义上人的一些基本能力，比如语言。而我们，作为一个人，固然是一个独立的个体，但是我们之所以成为现在的自己，完全和我们见到的人，遇到的事情，所处的环境有关。而对我们每个人影响最大的还是我们遇到的人——除自己以外其他的个体——他们组成了我们，我们是他们，他们也是我们。</p>
<p>就我自己而言，在这二十年里，遇到了太多有趣的人，可以说他们就是我的缩影，也可以说我就是他们每一个人。因为，时隔多年，他们的言行举止都在时刻影响着我。趁着宁静的夜，我想一下他们都是谁呢？</p>
<p>在读小学时，我就是瘦瘦小小的身材，偶尔会被人欺负。但生活总是待我不薄，我有一个好朋友。有一次我被欺负，哭了，他“气势汹汹”地让我带他找那个人“寻仇”。我们去了，回来时，我俩一起哭的。那时候我知道，这应该就是朋友。如今已经十几年过去了，挨欺负的和欺负人的，我们三个成了很好的朋友。现在，我们对当年的事都直言不讳，一回忆就开心——我们都曾经“喜欢”同班的一个小女生呢！然后，我们商量把女孩“让”给其中一个，因为他最帅，打架最厉害，我们都承认的。那份童稚，怀念至今，和我熟识的人很明显会看出我时常有些幼稚。那份童稚中有我，有他们，这些无疑是我这个人的一部分。</p>
<p>后来离开家去外面读书，五年级，寄宿。那时爱哭，后来发现哭似乎没什么用呢（哭多了是会累的），于是我就不经常哭了，那时候我大概十来岁的样子。慢慢地，我学会独立，学会坚强，学会面对。有一个同来读书的小伙伴，我从未见过他哭，几年后我偶尔问他：为什么没见你哭过呢？他说，楼下有个卫生间的。我笑了。原来我们每个人，都是一步一步走过来的，没有人例外。正如有句话所说，不要到处宣扬自己的内心，每个人都有自己的故事。从五年级到现在大学，近十年的寄宿生活，从同一屋檐下的他们那里比我学到哭也许并不会起作用呢，伤口呢还是自己舔来得靠谱。但是，谁不想哭呢？我这个人呢，又开始胡说八道了。</p>
<p>高中呢，离家就更远了。当时学习算是比较好，所以几乎听不到什么真话的（也可能不对）。但是有一个同学不一样，她不管这些，我有什么不对的地方，她能指着鼻子骂我。我只能回尴尬一笑，内心却是开心。现在，我的朋友不多，但她算是顶好的一个。因为能说真话的人太少，好容易遇见一个，不能弄丢了不是。（自认为）我这个人呢是不坏的，从她那里我知道，不坏的人喜欢听实话——即使再难听呢。所以，这些年，我告诉自己要做个老实人。我还年轻，应该纯粹点，不然人家又该说我太物质了（这里可能也不对，我可能不太在意别人的看法）。不管怎样，这也是我。</p>
<p>高考失利（不喜欢这个词，但是大家都用呢，姑且先留下。其实不算是失利）后，奔往济南。当真是如吉普林所言，“看着自己新手所建立的大厦轰然倒塌”。不过当时没有想着“低身拾起残废的工具把他重建”，说实话，我有些厌倦了（其实我也不知道在厌倦什么）。我做兼职，因为我太笨了（我的朋友也说这个，问为什么会有人要我这个人做员工呢，但是真有，不知道他们怎么想的），所以搞得头破血流（一点不疼，真的，没什么太大感觉，可惜把衣服上沾上了血，还要好好洗，有些麻烦）。后来伤好了，回去工作，培训新人（是体力活，不过也要培训下），恍然如梦。直到有一次，教一位大我二十多岁的阿姨，阿姨说，谢谢您，沈老师（在济南，尊称人都是用“老师”，可能取自“三人行必有我师”，我喜欢这个，文化底蕴嘛）。听到过太多谢谢，只有这一次不是靠给别人讲题（或是和高考学习相关的方法）听到人那样真诚地说“谢谢您”。我乐了，真的。我知道，原来除了学习，我还可以在别的地方成就自己。原来，生活可以这样呢。那一刻，我弯腰拾起来角落里的自信说，‘你好，幸会’。这也是我，在超市，穿着红马甲（应该是紫色的那件，公司不给穿），和推销酸奶的小女生说笑，等经理路过时——大声对女孩说，嗨，帮忙拿两箱酸奶好吗，仓库等着要呢。我笑，女生也笑，经理也笑，嗨呀真好。</p>
<p>大学呢，也有很多的人很有趣的，不过现在比较晚了，要去睡了（好多人都让我早睡，所以不能过分，他们会伤心的），早晨起来或是什么时候再写吧。</p>
<p>========好了，这是第二天上午了已经，接着写完吧================</p>
<p>经过高三暑假那段日子，我是当真知道要珍惜学校的生活了，能读书真好（可能像假的似的，但是这不是，我那时真的这样想，现在也是）。遇见一个朋友，一个胖子，我们住在一个宿舍，被称作舍友。从他那里，我学到的是一种勇气（是的，勇气，这东西之前我也有，不过不太一样）。他对生活算是认真的，不过在别人看来可能是一团糟。不管怎样，他总是乐呵呵的，发自内心的那种——世界呢，他们呢，不在乎呢。他知道自己在干嘛（虽说不是那么上进），而大部分人是不知道的。现在的我，走在路上也会时而肆无忌惮地仰天大笑（因为真的想笑嘛）。这也是我。</p>
<p>有次生病，原因是久坐和熬夜（当然是在网上查的），我觉着这是“绝症”了，因为很难改的（经常坐在电脑前面写程序或者玩游戏啥的）。后来，我的另外一个舍友跑去外面帮我拿药。说真的，我很感动。他什么也没说，一笑，我也什么也没说（说声谢谢似乎过于苍白，其他也不知道说啥），一笑。我明白，有些东西是不需要用语言这种介质去表达的，他可以直接表达出来，不走任何弯路。现在的我，对有些事有时候也是懒得去说（同学偶尔说我总是那么神秘，我自己真的并不知道），说也是只言片语，太麻烦了。这也是我。</p>
<p>有次航班延误，和同行的同学玩成语接龙。一个同学接不上了，边上坐着的空姐顺着就接了一句——“世外桃源”（我记得很清，怎么也忘不了）。她就坐在我旁边，我微笑着看她（是的，微笑是学的，不过可能不像，并不能算作他们所说的微笑），她也一笑，真心的那种，不同于面具，无关于工作的笑，真的好看呢。我想，原来她们也和我们每个人一样——是个人，不是机器呢。遇见很多所谓的人，真的与机器无异，他们有面具机器（变脸很快的），声音机器（声音在男生和女生面前是不一样的，神奇吧）， 高精度识别机器（他们号称以自己多年的器龄可以一眼看透别人）， 推理机器（他们可以从一个的一句话推断整个人的人格， 通过一个人的衣着推断整个人的灵魂，厉害吧？我是及其怕这种机器的， 因为我对衣着的认识是取暖蔽体。我有个同学和我谈起过这个，不过她不能算作机器人，说实话的人怎么可能是机器人呢），等等。所以，我时刻告诫自己，要做个人，尽量做个好人（稍微坏点也成，但是不能做机器人呢）。所以吧，等你看到一个怪人（千真万确是人）和一堆机器打招呼问：“您好，您是人吗？是人的话交个朋友吧，我很孤独的”，那么这个人八成就是我了。这也是我。</p>
<p>还是那次和同学候机，我拿她那个玩偶在玩，她叫睡萌娃娃。我扔下手机，玩的不亦乐乎，同学说我童心未泯。嗯？这是不是说明大部分人都已经“泯”去了“童心”呢？为什么会被“泯”去呢，又不是个坏的东西？我这么想着，也是一笑（其实我真不知道说什么，何况一会就要把玩偶还她了，我得抓紧玩会）。可能我真的有时候像个小孩子，这也是我一直把“不秩稚童”作为自己的很多网站ID的原因吧。一个从来不遵守秩序（不想，也不去遵守，当然要吃苦头的。这个秩序呢，其中也许就包括，长大了就要“泯”去“童心”）的小孩子。这也是我。</p>
<p>大学还在继续，生活还在继续，我也还在继续。只要我还和别人（除外以外其他的个体）接触，那么我这个人呢，就一直是个未完成式（大部分人都是的，对吧？），我将是他们，他们也将是我。也许我像机器太少，也许是因为不太遵守“秩序”，我这个人呢，似乎和这个世界格格不入。我觉着最大的原因在于我虽说与其他人接触，但我不在乎大部分人对自己的看法（我在乎自己的看法和说实话的人的看法），我活给自己和喜欢的人看，而大部分人是活给所有人看（我都有点累了，不知道他们怎样）。</p>
<p>既然与这大时代“格格不入”，那我便“别具一格”好了（我还年轻，总要纯粹点，总要信点什么，总要想些不可能的事嘛。年轻人嘛）。不过我肯定还将遇到有趣的人（实则是有趣的灵魂），他们日后也必将出现在此，因为我会一直守着这里——一座由0和1组成的孤城。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这一年，我二十]]></title>
      <url>/2017/06/24/%E8%BF%99%E4%B8%80%E5%B9%B4%EF%BC%8C%E6%88%91%E4%BA%8C%E5%8D%81/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一年，在今天，我刚好二十岁。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二十岁是每个人的黄金时代，是野蛮生长的年纪，是为之后披荆斩棘准备本钱的年纪。加油！</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hough变换]]></title>
      <url>/2017/05/28/Hough%E5%8F%98%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>关于hough变换，确实被它的奇妙思想震撼到。</p>
<blockquote>
<p>图像空间中共线的点对应参数空间共点的线。</p>
</blockquote>
<p>于是就尝试去实现这个变换.</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><p>先用Python写了个demo，效果还是可以的，但是写的略显粗糙…</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> operator</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取原空间的点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_raw_points</span><span class="params">()</span>:</span></div><div class="line">    points = np.array([[<span class="number">1</span>,<span class="number">1</span>], [<span class="number">2</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">2</span>,<span class="number">1</span>]])</div><div class="line">    <span class="keyword">return</span> points</div><div class="line"></div><div class="line"><span class="comment"># 获取原空间点对应的线</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_line</span><span class="params">(points)</span>:</span></div><div class="line">    fig = plt.figure()</div><div class="line">    para_points = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">        a = point[<span class="number">0</span>]</div><div class="line">        b = point[<span class="number">1</span>]</div><div class="line"></div><div class="line">        para_X = np.linspace(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">101</span>)</div><div class="line">        para_Y = a * para_X + b</div><div class="line">        plt.plot(para_X, para_Y)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(para_X)):</div><div class="line">            para_x = np.round(para_X[i], <span class="number">3</span>)</div><div class="line">            para_y = np.round(para_Y[i], <span class="number">3</span>)</div><div class="line">            <span class="comment"># para_points.append([para_x, para_y])</span></div><div class="line">            para_str = str(np.round([para_x, para_y], <span class="number">3</span>))</div><div class="line">            <span class="keyword">if</span> para_str <span class="keyword">not</span> <span class="keyword">in</span> para_points.keys():</div><div class="line">                para_points[para_str] = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                para_points[para_str] += <span class="number">1</span></div><div class="line">    plt.legend([<span class="string">'(1,1)'</span>, <span class="string">'(2,2)'</span>, <span class="string">'(3,3)'</span>, <span class="string">'(1,2)'</span>, <span class="string">'(2,1)'</span>])</div><div class="line">    <span class="comment"># 按照交点个数排序</span></div><div class="line">    sorted_para_points = sorted(para_points.items(), key=operator.itemgetter(<span class="number">1</span>))</div><div class="line"></div><div class="line">    <span class="comment"># 取其中的交点,这里就简短地从结果看下，直接切片了</span></div><div class="line">    <span class="comment"># 正规是根据点的value来取的，也不麻烦。</span></div><div class="line">    more_points = sorted_para_points[<span class="number">-6</span>:]</div><div class="line"></div><div class="line">    <span class="comment"># The point that we want to find!</span></div><div class="line">    <span class="comment"># 这里可以用正则...前面写的太粗糙了，这里就取点比较麻烦了</span></div><div class="line">    <span class="comment"># 绿色点标记交点</span></div><div class="line">    plt.plot(<span class="number">-1</span>, <span class="number">0</span>, <span class="string">'go'</span>, linewidth=<span class="number">3</span>)</div><div class="line">    <span class="comment"># plt.show()</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> more_points</div><div class="line"></div><div class="line"><span class="comment"># 在hough变换后找到直线[a,b]后，在原空间画出此直线</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_point_line</span><span class="params">()</span>:</span></div><div class="line">    fig = plt.figure()</div><div class="line">    points = get_raw_points()</div><div class="line">    plt.plot(points[:,<span class="number">0</span>], points[:,<span class="number">1</span>], <span class="string">'o'</span>)</div><div class="line">    <span class="comment"># [-1,0]--&gt; 0=-a+b --&gt; b=a --&gt; y=x</span></div><div class="line"></div><div class="line">    X = np.linspace(<span class="number">-2</span>,<span class="number">5</span>,<span class="number">101</span>)</div><div class="line">    Y= X</div><div class="line">    plt.plot(X, Y, <span class="string">'g'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    points = get_raw_points()</div><div class="line">    more_points = get_line(points)</div><div class="line">    plot_point_line()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Figure%201_052801.png" alt=""><br><img src="http://blog-1252464519.costj.myqcloud.com/1705/Figure%202_052802.png" alt=""></p>
<h5 id="Cpp"><a href="#Cpp" class="headerlink" title="Cpp"></a>Cpp</h5><p>在用Python写出demo后，想着拿一张真实的图像来试试，结果没成功…也没有找出原因。这里贴上代码，请看出错误的大佬指点…</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"matplotlibcpp.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="keyword">namespace</span> plt = matplotlibcpp;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;cv::Point&gt; PointFindPtr(cv::Mat image)&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;cv::Point&gt; Points;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> nl = image.rows; <span class="comment">// number of lines</span></div><div class="line">    <span class="comment">// total number or element per ;ine</span></div><div class="line">    <span class="keyword">int</span> nc = image.cols * image.channels();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)&#123;</div><div class="line">        <span class="comment">//get the address of row j</span></div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)&#123;</div><div class="line">            <span class="comment">// process each pixel=======================</span></div><div class="line">            <span class="keyword">if</span> (data[i] == <span class="number">255</span>)</div><div class="line">                Points.push_back(cv::Point(j, i));</div><div class="line">            <span class="comment">// OR in this way</span></div><div class="line">            <span class="comment">//data[i] = (data[i]/div)*div + div/2;</span></div><div class="line">            <span class="comment">//end of pixel processing=====================</span></div><div class="line">        &#125;<span class="comment">//end of line</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Points;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/road.jpg"</span>, <span class="number">0</span>);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// Apply Canny algotithm</span></div><div class="line">    cv::Mat contours;</div><div class="line">    cv::Canny(image, contours, <span class="number">125</span>, <span class="number">350</span>);</div><div class="line">    cv::imshow(<span class="string">"Contours"</span>, contours);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;cv::Point&gt; Points = PointFindPtr(contours);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n = Points.size();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        Point point_i = Points[i];</div><div class="line">        <span class="keyword">int</span> a = point_i.x;</div><div class="line">        <span class="keyword">int</span> b = point_i.y;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; x(<span class="number">360</span>), y(<span class="number">360</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">360</span>; i++)&#123;</div><div class="line">            x.at(i) = <span class="number">2</span>*PI/i-PI;</div><div class="line">            y.at(i) = a*<span class="built_in">cos</span>(<span class="number">2</span>*PI/i)+b*<span class="built_in">sin</span>(<span class="number">2</span>*PI/i);</div><div class="line">        &#125;</div><div class="line">        plt::plot(x,y);</div><div class="line">    &#125;</div><div class="line">    plt::show();</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Figure%201_052803.png" alt=""></p>
<p>参数空间所有的线交在一点说明图像中，所有的点共线…很明显是错误的…</p>
<p>这里，matplotlibcpp的安装，参考<a href="https://github.com/lava/matplotlib-cpp" target="_blank" rel="external">gothub项目地址</a>,记得安装后将matplotlibcpp.h文件放到自己的工程里面。且这里在cmake做了改动才可以，使用的，<br><code>include_directories(Clions ${PYTHON_INCLUDE_DIRS})</code>，<br>而不是<code>target_include_directories(Clions ${PYTHON_INCLUDE_DIRS})</code>。</p>
<h5 id="Cpp调用Python"><a href="#Cpp调用Python" class="headerlink" title="Cpp调用Python"></a>Cpp调用Python</h5><p>上面是对amtplotlib进行了包装，然后直接在Cpp使用。除此之外，我们还有另一个办法在Cpp中使用Python。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;python2.7/Python.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pythonrun.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    Py_Initialize();</div><div class="line">    PyRun_SimpleString(<span class="string">"import pylab"</span>);</div><div class="line">    PyRun_SimpleString(<span class="string">"pylab.plot(range(5))"</span>);</div><div class="line">    PyRun_SimpleString(<span class="string">"pylab.show()"</span>);</div><div class="line">    Py_Exit(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>注意，这里的头文件：</p>
<pre><code>#include &lt;python2.7/Python.h&gt;
#include &quot;pythonrun.h&quot;
</code></pre><p>在测试的时候，直接写Python.h是找不到的，而且没有下面的pythonrun.h也是不行的。</p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://stackoverflow.com/questions/613183/sort-a-python-dictionary-by-value" target="_blank" rel="external">字典按键值排序</a></p>
<p><a href="https://stackoverflow.com/questions/8024737/c-interface-for-matplotlib" target="_blank" rel="external">Python.h</a></p>
<p><a href="https://github.com/lava/matplotlib-cpp" target="_blank" rel="external">matplotlibcpp</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记二十三：Extracting Lines, Contours, and Components]]></title>
      <url>/2017/05/27/Extracting-Lines-Contours-and-Components/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>我们这里介绍怎样从图像中抽取一些有用的特征来进行图像的分析。</p>
<blockquote>
<p>In order to perform content-based analysis of an image, it is necessary to<br>extract meaningful features from the collection of pixels that constitute<br>the image.</p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Find-contours-by-Canny-operator"><a href="#Find-contours-by-Canny-operator" class="headerlink" title="Find contours by Canny operator"></a>Find contours by Canny operator</h5><p>之前，我们也简单介绍了基于梯度的图像的边缘检测，但是有两个缺点：第一是边缘有些厚，第二用于分割的阀值很难找到。所以我们这里介绍Canny算子。</p>
<p>原理部分，参考<a href="http://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html" target="_blank" rel="external">文档</a>,写的很精彩。主要就是Non-maximum suppression和Hysteresis threshold的理解。</p>
<p>一个简单的demo:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/road.jpg"</span>, <span class="number">0</span>);</div><div class="line">    cv::namedWindow(<span class="string">"Original Image"</span>);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// Apply Canny algorithm</span></div><div class="line">    cv::Mat contours;</div><div class="line">    cv::Canny(image, contours, <span class="number">125</span>, <span class="number">350</span>);  <span class="comment">// contours &#123;0,255&#125;,边缘为255</span></div><div class="line">    cv::namedWindow(<span class="string">"Canny Image"</span>);</div><div class="line">    <span class="comment">// 为了便于观察，取反色</span></div><div class="line">    cv::imshow(<span class="string">"Canny Image"</span>, <span class="number">255</span>-contours);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052701.png" alt=""></p>
<p>除此之外，我们也可以通过pyrUp去除一些细节再进行边缘检测，效果会更好些。参考<a href="http://datahonor.com/2017/02/23/OpenCV-Pyramid-and-Canny/">这里</a></p>
<h5 id="Detecting-lines-in-images-with-the-Hough-transform"><a href="#Detecting-lines-in-images-with-the-Hough-transform" class="headerlink" title="Detecting lines in images with the Hough transform"></a>Detecting lines in images with the Hough transform</h5><p>关于霍夫变换的简单的demo，可以看下<a href="http://datahonor.com/2017/05/28/Hough%E5%8F%98%E6%8D%A2/">这里</a>. 这里，我们使用其进行检测图像中的直线。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#define PI 3.1415926</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/road.jpg", 0);</div><div class="line">    cv::imshow("Original Image", image);</div><div class="line"></div><div class="line">    // Apply Canny algotithm</div><div class="line">    cv::Mat contours;</div><div class="line">    cv::Canny(image, contours, 125, 350);</div><div class="line">    cv::imshow("Contours", contours);</div><div class="line"></div><div class="line">    // Hough transfrom for line detection</div><div class="line">    std::vector&lt;cv::Vec2f&gt;lines;</div><div class="line">    cv::HoughLines(contours, lines, 1, PI/180, 60);</div><div class="line"></div><div class="line">    std::vector&lt;cv::Vec2f&gt;::const_iterator it = lines.begin();</div><div class="line">    while(it != lines.end())&#123;</div><div class="line"></div><div class="line">        float rho = (*it)[0];  // first element is distance rho</div><div class="line">        float theta = (*it)[1];  // second element is angle theta</div><div class="line"></div><div class="line">        if(theta &lt; PI/4. || theta &gt; 3.*PI/4)&#123;</div><div class="line">            // vertical line</div><div class="line">            // point of intersection of the line with first row</div><div class="line">            cv::Point pt1(rho/cos(theta), 0);</div><div class="line"></div><div class="line">            // point of intersection of the line with last row</div><div class="line">            cv::Point pt2((rho-image.rows*sin(theta))/cos(theta), image.rows);</div><div class="line"></div><div class="line">            // draw white line</div><div class="line">            cv::line(image, pt1, pt2, cv::Scalar(255), 1);</div><div class="line">        &#125;else&#123;</div><div class="line">            // horizontal line</div><div class="line">            // point of intersection of the line with first column</div><div class="line">            cv::Point pt1(0, rho/sin(theta));</div><div class="line">            // point of intersection of the line with last column</div><div class="line">            cv::Point pt2(image.cols, (rho-image.cols*cos(theta))/sin(theta));</div><div class="line">            // draw white line</div><div class="line">            cv::line(image, pt1, pt2, cv::Scalar(255), 1);</div><div class="line">        &#125;</div><div class="line">        ++it;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cv::imshow("Image", image);</div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052804.png" alt=""></p>
<p>同样地，只要可以将图像中的形状转化到参数空间，我们都可以用hough变换进行检测，比如圆形的检测：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/chariot.jpg"</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">// Detecting circles</span></div><div class="line">    cv::GaussianBlur(image, image, cv::Size(<span class="number">5</span>, <span class="number">5</span>), <span class="number">1.5</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Vec3f&gt;circles;</div><div class="line">    cv::HoughCircles(image, circles, cv::HOUGH_GRADIENT,</div><div class="line">                    <span class="number">2</span>, <span class="comment">// accumulator resolution(size of the image/2)</span></div><div class="line">                    <span class="number">20</span>, <span class="comment">// minimum distance between two circles</span></div><div class="line">                    <span class="number">200</span>, <span class="comment">// Canny high threshold</span></div><div class="line">                    <span class="number">60</span>, <span class="comment">// minimum number of vates</span></div><div class="line">                    <span class="number">15</span>,</div><div class="line">                    <span class="number">50</span>);  <span class="comment">// min and max radius</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Vec3f&gt;::const_iterator itc = circles.begin();</div><div class="line">    <span class="keyword">while</span>(itc!=circles.end())&#123;</div><div class="line">        cv::circle(image, cv::Point((*itc)[<span class="number">0</span>], (*itc)[<span class="number">1</span>]), (*itc)[<span class="number">2</span>], cv::Scalar(<span class="number">255</span>), <span class="number">2</span>);</div><div class="line">        ++itc;</div><div class="line">    &#125;</div><div class="line">    cv::namedWindow(<span class="string">"Detected Circles"</span>);</div><div class="line">    cv::imshow(<span class="string">"Detected Circles"</span>, image);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出:<br><img src="http://datahonor-1252464519.costj.myqcloud.com/201705/Detected%20Circles_052901.png" alt=""></p>
<p>基于上面的应用，我们来学习下关于Probabilistic Hough transform的应用：</p>
<blockquote>
<p>As can be seen, the Hough transform simply looks for an alignment of edge pixels across the image. This can potentially create some false detections due to incidental pixel alignments or multiple detections when several lines with slightly different parameter values pass through the same alignment of pixels.<br>To overcome some of these problems, and to allow line segments to be detected (that is, with endpoints), a variant of the transform has been proposed. This is the Probabilistic Hough transform, and it is implemented in OpenCV as the cv::HoughLinesP function. </p>
</blockquote>
<p><strong>linefinder.h</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//</div><div class="line">// Created by shensir on 17-4-21.</div><div class="line">//</div><div class="line"></div><div class="line">#include &lt;opencv2/core.hpp&gt;</div><div class="line">#include &lt;opencv2/imgproc.hpp&gt;</div><div class="line">#define PI 3.1415926</div><div class="line"></div><div class="line">#ifndef CLIONS_LINEFINDER_H</div><div class="line">#define CLIONS_LINEFINDER_H</div><div class="line"></div><div class="line">#endif //CLIONS_LINEFINDER_H</div><div class="line"></div><div class="line">class LineFinder&#123;</div><div class="line">private:</div><div class="line">    // orginal image</div><div class="line">    cv::Mat img;</div><div class="line"></div><div class="line">    // vector containing the endpoints of the detected lines</div><div class="line">    std::vector&lt;cv::Vec4i&gt;lines;</div><div class="line"></div><div class="line">    // accumulator resolution parameters</div><div class="line">    double deltaRHo;</div><div class="line">    double deltaTheta;</div><div class="line"></div><div class="line">    // minimum number of votes that a line</div><div class="line">    // must receive before being considered</div><div class="line">    int minVote;</div><div class="line"></div><div class="line">    // min length for a line</div><div class="line">    double minLength;</div><div class="line"></div><div class="line">    // max allowed gap along the line</div><div class="line">    double maxGap;</div><div class="line"></div><div class="line">public:</div><div class="line">    // Default accumulator resolution is 1 pixel by 1 degree</div><div class="line">    // no gap, no minimum length</div><div class="line">    LineFinder():deltaRHo(1), deltaTheta(PI/180),</div><div class="line">                 minVote(10), minLength(0.), maxGap(0.)&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">    // Set the resolution of the accumulator</div><div class="line">    void setAccResolution(double dRho, double dTheta)&#123;</div><div class="line">        deltaRHo = dRho;</div><div class="line">        deltaTheta = dTheta;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Set the minimum member of votes</div><div class="line">    void setMinVote(int minv)&#123;</div><div class="line">        minVote = minv;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Set line length and gap</div><div class="line">    void setLineLengthAndGap(double length, double gap)&#123;</div><div class="line">        minLength = length;</div><div class="line">        maxGap = gap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Apply probabilistic Hough Transform</div><div class="line">    std::vector&lt;cv::Vec4i&gt;findLines(cv::Mat&amp;binary)&#123;</div><div class="line">        lines.clear();</div><div class="line">        cv::HoughLinesP(binary, lines, deltaRHo, deltaTheta, minVote,</div><div class="line">                        minLength, maxGap);</div><div class="line">        return lines;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Draw the detected lines on an image</div><div class="line">    void drawDetectedLines(cv::Mat &amp;image, cv::Scalar color=cv::Scalar(255,255,255))&#123;</div><div class="line"></div><div class="line">        // Draw lines</div><div class="line">        std::vector&lt;cv::Vec4i&gt;::const_iterator it2 = lines.begin();</div><div class="line"></div><div class="line">        while(it2!=lines.end())&#123;</div><div class="line">            cv::Point pt1((*it2)[0], (*it2)[1]);</div><div class="line">            cv::Point pt2((*it2)[2], (*it2)[3]);</div><div class="line"></div><div class="line">            cv::line(image, pt1, pt2, color);</div><div class="line">            ++it2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><strong>main.cpp</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &quot;linefinder.h&quot;</div><div class="line">#define PI 3.1415926</div><div class="line"></div><div class="line">using namespace std</div><div class="line"></div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    cv::Mat image = cv::imread(&quot;/home/shensir/Documents/MyPrograming/Cpp/Clions/data/road.jpg&quot;, 0);</div><div class="line">    cv::imshow(&quot;Original Image&quot;, image);</div><div class="line"></div><div class="line">    // Apply Canny algotithm</div><div class="line">    cv::Mat contours;</div><div class="line">    cv::Canny(image, contours, 125, 350);</div><div class="line">    cv::imshow(&quot;Contours&quot;, contours);</div><div class="line"></div><div class="line">        // Create LineFinder instance</div><div class="line">    LineFinder finder;</div><div class="line"></div><div class="line">    // Set probabilistic Hough parameters</div><div class="line">    finder.setLineLengthAndGap(100, 20);</div><div class="line">    finder.setMinVote(60);</div><div class="line"></div><div class="line">    // Detect lines and draw them in the image</div><div class="line">    std::vector&lt;cv::Vec4i&gt;lines = finder.findLines(contours);</div><div class="line">    finder.drawDetectedLines(image);</div><div class="line"></div><div class="line">    cv::namedWindow(&quot;Lines with HoughP&quot;);</div><div class="line">    cv::imshow(&quot;Lines with HoughP&quot;, image);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://datahonor-1252464519.costj.myqcloud.com/201705/Selection_052902.png" alt=""></p>
<h5 id="Extracting-connected-components-amp-amp-Computing-components’-shape-descriptors"><a href="#Extracting-connected-components-amp-amp-Computing-components’-shape-descriptors" class="headerlink" title="Extracting connected components &amp;&amp; Computing components’ shape descriptors"></a>Extracting connected components &amp;&amp; Computing components’ shape descriptors</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#define PI 3.1415926</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">// Eliminate too short or too long contours</div><div class="line">void BalanceLength(std::vector&lt;std::vector&lt;cv::Point&gt;&gt;&amp; contours)&#123;</div><div class="line">    int cmin = 80;  // minimum contour length</div><div class="line">    int cmax = 500;  // maximum contours length</div><div class="line">    std::vector&lt;std::vector&lt;cv::Point&gt;&gt;::iterator itc = contours.begin();</div><div class="line"></div><div class="line">    // for all contours</div><div class="line">    while( itc != contours.end())&#123;</div><div class="line">        // verify contour size</div><div class="line">        if(itc-&gt;size() &lt; cmin || itc-&gt;size() &gt; cmax)</div><div class="line">            itc = contours.erase(itc);</div><div class="line">        else</div><div class="line">            ++itc;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line"></div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/marphimg.png", 0);</div><div class="line">    cv::imshow("Original Image", image);</div><div class="line">    // the vector that will contain the contours</div><div class="line">    std::vector&lt;std::vector&lt;cv::Point&gt;&gt; contours;</div><div class="line">    cv::findContours(image,</div><div class="line">                    contours,   // a vector og contours</div><div class="line">                    cv::RETR_EXTERNAL,  //retieve the external contours</div><div class="line">                    cv::CHAIN_APPROX_NONE);  // all pixels of each contours</div><div class="line"></div><div class="line"></div><div class="line">    // draw black contours on a white image</div><div class="line">    cv::Mat result(image.size(), CV_8U, cv::Scalar(255));</div><div class="line">    cv::drawContours(result, contours, -1, 0, 2); // draw all contours; in black; with a thickness of 2</div><div class="line">    cv::imshow("result_before_elimination", result);</div><div class="line"></div><div class="line">    // Eliminate too short or too long contours</div><div class="line">    BalanceLength(contours);</div><div class="line"></div><div class="line">    cv::Mat result1(image.size(), CV_8U, cv::Scalar(255));</div><div class="line">    cv::drawContours(result1, contours, -1, 0, 2); // draw all contours; in black; with a thickness of 2</div><div class="line">    cv::imshow("result_after_elimination", result1);</div><div class="line"></div><div class="line">    // testing the bounding box</div><div class="line">    cv::Rect r0 = cv::boundingRect(contours[0]);</div><div class="line">    // draw the rectangle</div><div class="line">    cv::rectangle(result1, r0, 0, 2);</div><div class="line">    cv::imshow("boundingbox", result1);</div><div class="line"></div><div class="line">    // testing the enclosing circle</div><div class="line">    float radius;</div><div class="line">    cv::Point2f center;</div><div class="line">    cv::minEnclosingCircle(contours[1],center,radius);</div><div class="line">    // draw the cricle</div><div class="line">    cv::circle(result1,center,static_cast&lt;int&gt;(radius), cv::Scalar(0), 2);</div><div class="line">    cv::imshow("enclosing", result1);</div><div class="line"></div><div class="line">    // testing the approximate polygon</div><div class="line">    std::vector&lt;cv::Point&gt; poly;</div><div class="line">    cv::approxPolyDP(contours[2], poly, 5, true);</div><div class="line">    // draw the polygon</div><div class="line">    cv::polylines(result1, poly, true, 0, 2);</div><div class="line">    cv::imshow("Poly", result1);</div><div class="line"></div><div class="line"></div><div class="line">    // testing the convex hull</div><div class="line">    std::vector&lt;cv::Point&gt;hull;</div><div class="line">    cv::convexHull(contours[3], hull);</div><div class="line">    // draw the polygon</div><div class="line">    cv::polylines(result1, hull, true, 0, 2);</div><div class="line">    cv::imshow("convexhull", result1);</div><div class="line"></div><div class="line">    // testing the moments</div><div class="line">    // iterator over all contours</div><div class="line">    std::vector&lt;std::vector&lt;cv::Point&gt;&gt;::iterator itc = contours.begin();</div><div class="line">    while(itc!=contours.end())&#123;</div><div class="line">        // compute all moments</div><div class="line">        cv::Moments mom = cv::moments(cv::Mat(*itc++));</div><div class="line"></div><div class="line">        // draw mess center</div><div class="line">        cv::circle(result1, cv::Point(mom.m10/mom.m00, mom.m01/mom.m00),</div><div class="line">        2, cv::Scalar(0), 2);  // draw black dot</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cv::imshow("Moments", result1);</div><div class="line"></div><div class="line"></div><div class="line">    // original color image of cattles</div><div class="line">    cv::Mat colorImage  = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/cattle.png");</div><div class="line">    cv::imshow("OriginalColorImage", colorImage);</div><div class="line"></div><div class="line">    cv::drawContours(colorImage, contours, -1, cv::Scalar(255,255,255), 2); // draw all contours; in black; with a thickness of 2</div><div class="line">    cv::imshow("colorImage", colorImage);</div><div class="line"></div><div class="line">    cv::waitKey(0);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201705/Selection_052903.png" alt=""></p>
<h5 id="Quadrilateral-detection"><a href="#Quadrilateral-detection" class="headerlink" title="Quadrilateral detection"></a>Quadrilateral detection</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#define PI 3.1415926</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat components = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/mser.bmp", 0);</div><div class="line">    cv::imshow("Raw Image", components);</div><div class="line"></div><div class="line">    // binary</div><div class="line">    components = components == 255;</div><div class="line">    cv::imshow("Binary", components);</div><div class="line"></div><div class="line">    // open the image (white background)</div><div class="line">    // clean the image with a morphological filter</div><div class="line">    cv::morphologyEx(components,components,</div><div class="line">                    cv::MORPH_OPEN, cv::Mat(),</div><div class="line">                    cv::Point(-1,-1), 3);</div><div class="line"></div><div class="line">    cv::imshow("After bin-morph", components);</div><div class="line"></div><div class="line">    // invert image (background must be black)</div><div class="line">    cv::Mat componentsInv = 255 - components;</div><div class="line"></div><div class="line">    // Get the contours of the connected components</div><div class="line">    std::vector&lt;std::vector&lt;cv::Point&gt;&gt; contours;</div><div class="line">    cv::findContours(componentsInv, contours, cv::RETR_EXTERNAL,</div><div class="line">                    cv::CHAIN_APPROX_NONE);</div><div class="line"></div><div class="line">    // white image</div><div class="line">    cv::Mat quadri(components.size(), CV_8U, 255);</div><div class="line"></div><div class="line">    // for all contours</div><div class="line">    std::vector&lt;std::vector&lt;cv::Point&gt;&gt;::iterator it = contours.begin();</div><div class="line">    std::vector&lt;cv::Point&gt; poly;</div><div class="line">    while (it != contours.end())&#123;</div><div class="line">        poly.clear();</div><div class="line">        cv::approxPolyDP(*it, poly, 5, true);</div><div class="line"></div><div class="line">        // do we have a quadrilateral?</div><div class="line">        if(poly.size() == 4)  //draw it</div><div class="line">            cv::polylines(quadri, poly, true, 0, 2);</div><div class="line">        ++it;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cv::imshow("Quadri", quadri);</div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://datahonor-1252464519.costj.myqcloud.com/201705/Selection_052904.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记二十二：滤波]]></title>
      <url>/2017/05/25/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%9A%E6%BB%A4%E6%B3%A2/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>滤波在信号处理领域具有广泛的应用。同样的，我们可以通过 Fourier transform 或者 Cosine transform将空域（ spatial domain）上的图像信息转化到频域（frequency domain）。这里我们暂时不做深入了解，只需要了解：图像中的一些边缘和细节（变化较大的部分）对应频域中的高频部分，图像中较为平坦，变化不大的地方对应频域的低频部分。</p>
<p>基于上面的结论，我们称进行滤波的工具为滤波器(filter)，根据不同的过滤方式分为低通滤波器（ low-pass filter ）和高通滤波器( high-pass filter ).</p>
<p>我们将展示mean filter, gaussian filter, median filter 等多种滤波器的使用。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Downsampling-images-with-filters"><a href="#Downsampling-images-with-filters" class="headerlink" title="Downsampling images with filters"></a>Downsampling images with filters</h5><p>我们在进行downsampling的时候，如果不进行低通滤波器的处理，直接去除行列的话，结果会比较糟糕：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052501.png" alt=""></p>
<p>可以看到，在直接downsampling的时候，原图像的细节，也就是高频部分无法在如此小的空间（如此少的像素数）上表现出来，还会出现spatial aliasing的现象。所以，我们一般进经过low-pass filter处理后在进行downsampling，这种做法即是遵从 Nyquist-Shannon theorem.而效果也是有较高的提升的：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052502.png" alt=""></p>
<p>下面是一些低通滤波器具体的应用：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (!image.data)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    cv::Mat result;</div><div class="line"></div><div class="line">    <span class="comment">// Mean filtered</span></div><div class="line">    cv::blur(image, result, cv::Size(<span class="number">5</span>,<span class="number">5</span>)); <span class="comment">// size of the filter</span></div><div class="line">    cv::imshow(<span class="string">"Mean filtered Image"</span>, result);</div><div class="line"></div><div class="line">    <span class="comment">// Gaussian filtered Image</span></div><div class="line">    cv::GaussianBlur(image, result, cv::Size(<span class="number">5</span>,<span class="number">5</span>), <span class="number">1.5</span>);</div><div class="line">    cv::namedWindow(<span class="string">"Gaussian filtered Image"</span>);</div><div class="line">    cv::imshow(<span class="string">"Gaussian filtered Image"</span>, result);</div><div class="line"></div><div class="line">    <span class="comment">// 应用高斯滤波后进行downsampling</span></div><div class="line">    cv::<span class="function">Mat <span class="title">reduced</span><span class="params">(image.rows/<span class="number">4</span>, image.cols/<span class="number">4</span>, CV_8U)</span></span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;reduced.rows; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;reduced.cols; j++)&#123;</div><div class="line">            reduced.at&lt;uchar&gt;(i, j) = result.at&lt;uchar&gt;(i*<span class="number">4</span>, j*<span class="number">4</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cv::imshow(<span class="string">"downsampling gaussian"</span>, reduced);</div><div class="line">    cv::imwrite(<span class="string">"gaussian-redeced.jpg"</span>, reduced);</div><div class="line"></div><div class="line">    <span class="comment">// 图像金字塔</span></div><div class="line">    cv::Mat reducedImage;</div><div class="line">    cv::pyrDown(result, reducedImage);  <span class="comment">// reduce by half</span></div><div class="line">    cv::imshow(<span class="string">"pyDownImage"</span>, reducedImage);</div><div class="line"></div><div class="line">    <span class="comment">// resizing</span></div><div class="line">    cv::Mat resized;</div><div class="line">    cv::resize(image, resized, cv::Size(), <span class="number">2</span>, <span class="number">2</span>, cv::INTER_LINEAR);</div><div class="line">    cv::imshow(<span class="string">"resized"</span>, resized);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Median filtered</span></div><div class="line">    cv::medianBlur(image, result, <span class="number">5</span>); <span class="comment">// size of the filter</span></div><div class="line">    cv::imshow(<span class="string">"Mean filtered Image"</span>, result);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052503.png" alt=""></p>
<p>median filter（注意其为no-linear）输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052504.png" alt=""></p>
<p>注意，基于图像金字塔的操作pyDown和pyUp是不可逆的。而pyDown在进行downsampling是也是进行了5x5 Gaussian filter to low-pass 处理的。</p>
<h5 id="Applying-directional-filters-to-detect-edges"><a href="#Applying-directional-filters-to-detect-edges" class="headerlink" title="Applying directional filters to detect edges"></a>Applying directional filters to detect edges</h5><p>高通的滤波器一般用来检测变化比较大的区域，这里通过sobel函数，用于图像的边缘检测。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>, <span class="number">0</span>);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line"></div><div class="line">    cv::Mat sobelX, sobelY;</div><div class="line">    cv::Sobel(image, sobelX, CV_8U, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0.4</span>, <span class="number">128</span>);</div><div class="line">    cv::imshow(<span class="string">"SobelX Image"</span>, sobelX);</div><div class="line"></div><div class="line">    cv::Sobel(image, sobelY, CV_8U, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0.4</span>, <span class="number">128</span>);</div><div class="line">    cv::imshow(<span class="string">"SobelY Image"</span>, sobelY);</div><div class="line"></div><div class="line">    <span class="comment">// Compute norm of Sobel</span></div><div class="line">    cv::Sobel(image, sobelX, CV_16S, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    cv::Sobel(image, sobelY, CV_16S, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    cv::Mat sobel;</div><div class="line">    <span class="comment">// compute the L1 norm</span></div><div class="line">    sobel = <span class="built_in">abs</span>(sobelX)+<span class="built_in">abs</span>(sobelY);</div><div class="line"></div><div class="line">    <span class="comment">// Find Sobel max value</span></div><div class="line">    <span class="keyword">double</span> sobmin, sobmax;</div><div class="line">    cv::minMaxLoc(sobel, &amp;sobmin, &amp;sobmax);</div><div class="line">    <span class="comment">// Conversion to 8-bit image</span></div><div class="line">    <span class="comment">// -alpha*sobel + 255</span></div><div class="line">    cv::Mat sobelImage;</div><div class="line">    sobel.convertTo(sobelImage,CV_8U, <span class="number">-255.</span>/sobmax, <span class="number">255</span>);</div><div class="line">    cv::imshow(<span class="string">"Sobel Image"</span>, sobelImage);</div><div class="line"></div><div class="line">    <span class="comment">// Binary Sobel Image(low)</span></div><div class="line">    cv::Mat sobeThreshold;</div><div class="line">    cv::threshold(sobelImage, sobeThreshold, <span class="number">230</span>, <span class="number">255</span>, cv::THRESH_BINARY);</div><div class="line">    cv::imshow(<span class="string">"Binary Sobel Image(low)"</span>, sobeThreshold);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052505.png" alt=""></p>
<h5 id="band-pass-filter"><a href="#band-pass-filter" class="headerlink" title="band-pass filter"></a>band-pass filter</h5><p>如果我们先应用高斯滤波器去除高频的部分，再用sobel filter去除低频的部分，那么我们就得到了一个band-filter. 我们只要在上面程序的开头加上一个高斯滤波即可查看效果：</p>
<p><code>cv::GaussianBlur(image, image, cv::Size(5,5), 1.5);</code></p>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052506.png" alt=""></p>
<h5 id="Computing-the-Laplacian-of-an-image"><a href="#Computing-the-Laplacian-of-an-image" class="headerlink" title="Computing the Laplacian of an image"></a>Computing the Laplacian of an image</h5><p>ps:这个公式推导不是很懂，所以暂时只是会用…</p>
<p>关于Laplacian:</p>
<blockquote>
<p>The Laplacian is another high-pass linear filter that is based on the computation of the image derivatives. As it will be explained, it computes second-order derivatives to measure the curvature of the image function.</p>
</blockquote>
<p>关于LOG：</p>
<blockquote>
<p>Since these larger kernels are computed using the second derivatives of the Gaussian function, the corresponding operator is often called Laplacian of Gaussian (LoG)</p>
</blockquote>
<p>由于高斯-拉普拉斯算子形状像一个草帽，所以又被称为“墨西哥草帽”</p>
<p>注意，拉氏算子是一种二阶导数算子，对图像中的噪声相对敏感，检测的边缘没有方向信息。因此，拉普拉斯算子很少直接用于检测边缘，而主要用于已知边缘像素后，确定图像的名区还是暗区。</p>
<p>关于DOG：</p>
<blockquote>
<p>. Now, if we subtract the two images that result from the filtering of an image by two Gaussian filters of different bandwidths, then the resulting image will be composed of those higher frequencies that one filter has preserved, and not the other. This operation is called Difference of Gaussians (DoG)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> LaplacianZC&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// laplacina</span></div><div class="line">    cv::Mat laplace;</div><div class="line">    <span class="comment">// Aperture size of the laplacian kernel</span></div><div class="line">    <span class="keyword">int</span> aperture;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    LaplacianZC():aperture(<span class="number">3</span>)&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Set the aperture size of the kernel</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAperture</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">        aperture = a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Compute the floating point Laplacian</span></div><div class="line">    cv::<span class="function">Mat <span class="title">computeLaplacian</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; image)</span></span>&#123;</div><div class="line">        <span class="comment">// Compute Laplacian</span></div><div class="line">        cv::Laplacian(image, laplace, CV_32F, aperture);</div><div class="line">        <span class="keyword">return</span> laplace;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Get the Laplacian result in 8-bits image</span></div><div class="line">    <span class="comment">// zero corresponds to gray level 128</span></div><div class="line">    <span class="comment">// if no scale is provide, then the max value will be</span></div><div class="line">    <span class="comment">// scaled to intensity 255</span></div><div class="line">    <span class="comment">// You must call cimputeLaplacianImage before calling this</span></div><div class="line">    cv::<span class="function">Mat <span class="title">getLaplacianImage</span><span class="params">(<span class="keyword">double</span> scale=<span class="number">-1.0</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(scale&lt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">double</span> lapmin, lapmax;</div><div class="line">            <span class="comment">// get min and max laplacian values</span></div><div class="line">            cv::minMaxLoc(laplace, &amp;lapmin, &amp;lapmax);</div><div class="line">            <span class="comment">// scale the laplacian to 127</span></div><div class="line">            scale = <span class="number">127</span>/<span class="built_in">std</span>::max(-lapmin, lapmax);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// produce gray-level image</span></div><div class="line">        cv::Mat laplaceImage;</div><div class="line">        laplace.convertTo(laplaceImage, CV_8U, scale, <span class="number">128</span>);</div><div class="line">        <span class="keyword">return</span> laplaceImage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Get a binary image of the zero-crossings</span></div><div class="line">    <span class="comment">// laplacian image should be CV_32F</span></div><div class="line">    cv::<span class="function">Mat <span class="title">getZeroCrossings</span><span class="params">(cv::Mat laplace)</span></span>&#123;</div><div class="line">        <span class="comment">// threshold at 0</span></div><div class="line">        <span class="comment">// negtive values in black</span></div><div class="line">        <span class="comment">// positive values in white</span></div><div class="line">        cv::Mat signImage;</div><div class="line">        cv::threshold(laplace, signImage, <span class="number">0</span>, <span class="number">255</span>, cv::THRESH_BINARY);</div><div class="line"></div><div class="line">        <span class="comment">// convert the +/- image into CV_8U</span></div><div class="line">        cv::Mat binary;</div><div class="line">        signImage.convertTo(binary, CV_8U);</div><div class="line">        <span class="comment">// dilate the binary image of +/- regions</span></div><div class="line">        cv::Mat dilated;</div><div class="line">        cv::dilate(binary, dilated, cv::Mat());</div><div class="line"></div><div class="line">        <span class="comment">// return the zero-crossing contours</span></div><div class="line">        <span class="keyword">return</span> dilated-binary;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>, <span class="number">0</span>);</div><div class="line">    cv::imshow(<span class="string">"Original"</span>, image);</div><div class="line">    <span class="comment">// Compute Laplcian using LaplacianZC class</span></div><div class="line">    LaplacianZC laplacian;</div><div class="line">    laplacian.setAperture(<span class="number">7</span>); <span class="comment">// 7x7 laplacian</span></div><div class="line">    cv::Mat flap = laplacian.computeLaplacian(image);</div><div class="line"></div><div class="line">    cv::Mat laplace;</div><div class="line">    laplace = laplacian.getLaplacianImage();</div><div class="line">    cv::imshow(<span class="string">"Laplacian Image 7x7"</span>, laplace);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// binary image of zero-crossing</span></div><div class="line">    cv::Mat Binary;</div><div class="line">    Binary = laplacian.getZeroCrossings(flap);</div><div class="line">    cv::imshow(<span class="string">"Binary"</span>, Binary);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// DoG</span></div><div class="line">    cv::Mat gauss20, gauss22;</div><div class="line">    cv::GaussianBlur(image, gauss20, cv::Size(), <span class="number">2.0</span>);</div><div class="line">    cv::GaussianBlur(image, gauss22, cv::Size(), <span class="number">2.2</span>);</div><div class="line"></div><div class="line">    <span class="comment">// compute a difference of Gaussians</span></div><div class="line">    cv::Mat dog;</div><div class="line">    cv::subtract(gauss22, gauss20, dog, cv::Mat(), CV_32F);</div><div class="line"></div><div class="line">    <span class="comment">// compute the zero-crossings of DoG</span></div><div class="line">    cv::Mat zeros;</div><div class="line">    zeros = laplacian.getZeroCrossings(dog);</div><div class="line">    cv::imshow(<span class="string">"DoG"</span>,zeros);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052508.png" alt=""></p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><em>《数字图像处理》高教出版社</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记二十一：MSER]]></title>
      <url>/2017/05/25/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%9AMSER/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>Maximally Stable External Regions (MSER) 和分水岭算法类似，也是通过一种类似“浸水”的过程来找到图像中一些有意义的区域。但是和分水岭算法又有些不同：</p>
<blockquote>
<p>but this time, we will be interested in the basins that remain relatively stable for a period of time during the immersion process. It will be observed that these regions correspond to some distinctive parts of the scene objects pictured in the image.</p>
</blockquote>
<p>也就是说，这里关注的不仅仅是界限，更多地考虑随着浸水过程的进行，特定区域是否有明显的变化（比如当前区域的水面面积的方差是否小于给定的阀值），如果在一段浸水时间内，某些区域的面积未有太大的变化，那么这就是我们要找的MSER。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>这里做图的时候要注意两点。第一，检测到的MSER是具有层级结构的，我们在绘图的时候要按照从大到小（面积）的顺序，且每次做图进行检查当前区域是否已经画过了。第二，这里会返回包含MSER的矩形，不过一般来说数目较多，全部做出来会使得结果显得比较凌乱，所以一般添加一些过滤条件来指定输出某些物体，比如通过指定矩形的长宽比来来输出包含窗户的矩形框。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    // Read the image</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/building.jpg", 0);</div><div class="line">    if(!image.data)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    // Display the image</div><div class="line">    cv::namedWindow("Image");</div><div class="line">    cv::imshow("Image", image);</div><div class="line"></div><div class="line">    // basic MSER detector</div><div class="line">    cv::Ptr&lt;cv::MSER&gt;ptrMSER = cv::MSER::create(5,  // delta value</div><div class="line">                                                  200,  // min acceptable area</div><div class="line">                                                     2000); // max acceptable area</div><div class="line"></div><div class="line">    // vector of point sets</div><div class="line">    std::vector&lt;std::vector&lt;cv::Point&gt;&gt;points;</div><div class="line">    // vector of rectangles</div><div class="line">    std::vector&lt;cv::Rect&gt;rects;</div><div class="line">    // detect MSER features</div><div class="line">    ptrMSER-&gt;detectRegions(image, points, rects);</div><div class="line"></div><div class="line">    std::cout&lt;&lt;points.size()&lt;&lt;" MSERs detected"&lt;&lt;std::endl;</div><div class="line"></div><div class="line">    // create white image</div><div class="line">    cv::Mat output(image.size(), CV_8UC3);</div><div class="line">    output = cv::Scalar(255,255,255);</div><div class="line"></div><div class="line">    // OpenCV random number  generator</div><div class="line">    cv::RNG rng;</div><div class="line"></div><div class="line">    // Display the MSERs in color areas</div><div class="line">    // for each detected feature</div><div class="line">    // reverse order to display the larger MSER first</div><div class="line">    for(std::vector&lt;std::vector&lt;cv::Point&gt;&gt;::reverse_iterator it = points.rbegin();</div><div class="line">            it!=points.rend(); ++it)&#123;</div><div class="line">        // generate a random color</div><div class="line">        cv::Vec3b c(rng.uniform(0,254), rng.uniform(0,254), rng.uniform(0,254));</div><div class="line"></div><div class="line">        std::cout &lt;&lt; "MSER size= "&lt;&lt;it-&gt;size()&lt;&lt;std::endl;</div><div class="line">        // for each point in MSER set</div><div class="line">        for(std::vector&lt;cv::Point&gt;::iterator itPts = it-&gt;begin();</div><div class="line">                itPts!=it-&gt;end(); ++itPts)&#123;</div><div class="line">            // do not overwrite MSER pixels</div><div class="line">            if(output.at&lt;cv::Vec3b&gt;(*itPts)[0] = 255)&#123;</div><div class="line">                output.at&lt;cv::Vec3b&gt;(*itPts) = c;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cv::namedWindow("MSER point sets");</div><div class="line">    cv::imshow("MSER point sets", output);</div><div class="line">    cv::imwrite("mser.bmp", output);</div><div class="line"></div><div class="line">    // Reload the input image</div><div class="line">    image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/building.jpg", 0);</div><div class="line">    if (!image.data)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    // Extract and display the elliptic MSERs</div><div class="line">    for (std::vector&lt;std::vector&lt;cv::Point&gt; &gt;::iterator it = points.begin();</div><div class="line">         it != points.end(); ++it) &#123;</div><div class="line"></div><div class="line">        // for each point in MSER set</div><div class="line">        for (std::vector&lt;cv::Point&gt;::iterator itPts = it-&gt;begin();</div><div class="line">             itPts != it-&gt;end(); ++itPts) &#123;</div><div class="line"></div><div class="line">            // Extract bouding rectangles</div><div class="line">            cv::RotatedRect rr = cv::minAreaRect(*it);</div><div class="line">            // check ellipse elongation</div><div class="line">            if (rr.size.height / rr.size.height &gt; 0.6 || rr.size.height / rr.size.height &lt; 1.6)</div><div class="line">                cv::ellipse(image, rr, cv::Scalar(255), 2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Display the image</div><div class="line">    cv::namedWindow("MSER ellipses");</div><div class="line">    cv::imshow("MSER ellipses", image);</div><div class="line"></div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052404.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记二十：Segmenting images using watersheds]]></title>
      <url>/2017/05/24/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%8D%81%EF%BC%9ASegmenting-images-using/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>关于分水岭算法：</p>
<blockquote>
<p>The watershed transformation is a popular image processing algorithm that is used to quickly segment an image into homogenous regions. It relies on the idea that when the image is seen as a topological relief, the homogeneous regions correspond to relatively flat basins delimited by steep edges. </p>
</blockquote>
<p>在同质区域的分割里，watersheds是很好用的一个算法，但是其存在over-segment的问题，也就是会错误地分割出很多小的区域。这点我们可以通过在应用算法前手动添加标记来弥补。</p>
<p>算法的进一步理解：</p>
<blockquote>
<p>use the topological map analogy in the description of the watershed algorithm. In order to create watershed segmentation, the idea is to progressively flood the image starting at level 0. As the level of water progressively increases (to levels 1, 2, 3, and so on), catchment basins are formed. The size of these basins also gradually increases and, consequently, the water of two different basins will eventually merge. When this happens, a watershed is created in order to keep the two basins separated. Once the level of water has reached its maximum level, the sets of these created basins and watersheds form the watershed segmentation.</p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="watershedSegmentation-h"><a href="#watershedSegmentation-h" class="headerlink" title="watershedSegmentation.h"></a>watershedSegmentation.h</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CLIONS_WATERSHEDSEGMENTATION_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIONS_WATERSHEDSEGMENTATION_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CLIONS_WATERSHEDSEGMENTATION_H</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> WatershedSegmenter&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    cv::Mat markers;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMarkers</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; markerImage)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// Convert to image of ints</span></div><div class="line">        markerImage.convertTo(markers, CV_32S);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cv::<span class="function">Mat <span class="title">process</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp; image)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// Apply watershed</span></div><div class="line">        cv::watershed(image, markers);</div><div class="line">        <span class="keyword">return</span> markers;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return result in the form of an image</span></div><div class="line">    cv::<span class="function">Mat <span class="title">getSegmentation</span><span class="params">()</span></span>&#123;</div><div class="line">        cv::Mat tmp;</div><div class="line">        <span class="comment">// all segment with label higher than 255</span></div><div class="line">        <span class="comment">// will be assigned value 255</span></div><div class="line">        markers.convertTo(tmp, CV_8U);</div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return watershed in the form of an image</span></div><div class="line">    cv::<span class="function">Mat <span class="title">getWatersheds</span><span class="params">()</span></span>&#123;</div><div class="line">        cv::Mat tmp;</div><div class="line">        <span class="comment">// -1*255+255 = 0  --&gt; 分水岭算法将边界标记为-1，如此转化为0，黑色，其余全白色</span></div><div class="line">        markers.convertTo(tmp, CV_8U, <span class="number">255</span>, <span class="number">255</span>);</div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;highgui.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include "watershedSegmentation.h"</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/cattle.png");</div><div class="line">    cv::Mat binary = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/binary.bmp",0);</div><div class="line">    cv::imshow("raw image", image);</div><div class="line"></div><div class="line">    cv::imshow("raw binary", binary);</div><div class="line">    // Eliminate noise and smaller objects</div><div class="line">    cv::Mat fg;</div><div class="line">    cv::erode(binary, fg, cv::Mat(), cv::Point(-1,-1), 4);</div><div class="line">    cv::imshow("fg", fg);</div><div class="line"></div><div class="line">//    threshold_type=CV_THRESH_BINARY:</div><div class="line">//    dst(x,y) = max_value, if src(x,y)&gt;threshold ; 0, otherwise.</div><div class="line"></div><div class="line">//    threshold_type=CV_THRESH_BINARY_INV:</div><div class="line">//    dst(x,y) = 0, if src(x,y)&gt;threshold; dst(x,y) = max_value,otherwise.</div><div class="line"></div><div class="line">    cv::Mat bg;</div><div class="line">    cv::dilate(binary, bg, cv::Mat(), cv::Point(-1,-1) ,5);</div><div class="line">    // 使得原来为黑色[0]的，变为灰色[草地]， 原来为白色[255]的，变为黑色[牛群]</div><div class="line">    cv::threshold(bg, bg, 1, 128, cv::THRESH_BINARY_INV);</div><div class="line">    cv::imshow("bg", bg);</div><div class="line"></div><div class="line">    // Create markers image</div><div class="line">    cv::Mat markers(binary.size(), CV_8U, cv::Scalar(0));</div><div class="line">    markers = fg+bg;</div><div class="line">    cv::imshow("markers", markers);</div><div class="line"></div><div class="line">    //Create watershed segmentation object</div><div class="line">    WatershedSegmenter segmenter;</div><div class="line"></div><div class="line">    // Set markers and process</div><div class="line">    segmenter.setMarkers(markers);</div><div class="line">    segmenter.process(image);</div><div class="line"></div><div class="line">    // Display segmentation result</div><div class="line">    cv::imshow("Segmentation", segmenter.getSegmentation());</div><div class="line"></div><div class="line">    // Display watersheds</div><div class="line">    cv::imshow("Watershed", segmenter.getWatersheds());</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052402.png" alt=""></p>
<h5 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h5><p>我们可以手工添加标记来防止watersheds固有的over-segment问题，是为Marker-controlled watershed。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;highgui.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include "watershedSegmentation.h"</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/tower.jpg");</div><div class="line"></div><div class="line">    // Identify background pixels</div><div class="line">    cv::Mat imageMask(image.size(), CV_8U, cv::Scalar(0));</div><div class="line">    cv::rectangle(imageMask, cv::Point(5,5), cv::Point(image.cols-5, image.rows-5), cv::Scalar(255,255,255),3);</div><div class="line">    // Identify foreground pixels(int the middle of the image)</div><div class="line">    cv::rectangle(imageMask, cv::Point(image.cols/2-10, image.rows/2-10), cv::Point(image.cols/2+10, image.rows/2+10), cv::Scalar(1),10);</div><div class="line"></div><div class="line">    // Set markers and process</div><div class="line">    WatershedSegmenter segmenter;</div><div class="line">    segmenter.setMarkers(imageMask);</div><div class="line">    segmenter.process(image);</div><div class="line"></div><div class="line">    // Display the image with markers</div><div class="line">    cv::rectangle(image, cv::Point(5,5), cv::Point(image.cols-1, image.rows-5), cv::Scalar(255,255,255), 3);</div><div class="line">    cv::rectangle(image, cv::Point(image.cols/2-10,image.rows/2-10),cv::Point(image.cols/2+10,image.rows/2+10),cv::Scalar(1,1,1),10);</div><div class="line">    cv::imshow("Image with marker", image);</div><div class="line"></div><div class="line">    // Display watersheds</div><div class="line">    cv::imshow("Watershed", segmenter.getWatersheds());</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052403.png" alt=""></p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="http://cmm.ensmp.fr/~beucher/wtshed.html#mark" target="_blank" rel="external">http://cmm.ensmp.fr/~beucher/wtshed.html#mark</a><br><a href="http://docs.opencv.org/3.1.0/d3/db4/tutorial_py_watershed.html" target="_blank" rel="external">http://docs.opencv.org/3.1.0/d3/db4/tutorial_py_watershed.html</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[背景建模]]></title>
      <url>/2017/05/19/%E8%83%8C%E6%99%AF%E5%BB%BA%E6%A8%A1/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>背景建模在视频监控等动态图像的检测上有很重要的位置.这篇文章将会逐渐学习一系列的背景建模方法.</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="简单背景差分"><a href="#简单背景差分" class="headerlink" title="简单背景差分"></a>简单背景差分</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Mat back1, back2;</div><div class="line">    back1 = imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/back1.jpg"</span>);</div><div class="line">    back2 = imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/back2.jpg"</span>);</div><div class="line"></div><div class="line">    Mat Original_img = back1.clone();</div><div class="line"></div><div class="line">    cvtColor(back1, back1, COLOR_BGR2GRAY);</div><div class="line">    cvtColor(back2, back2, COLOR_BGR2GRAY);</div><div class="line"></div><div class="line">    resize(back1, back1, Size(), <span class="number">0.1</span>, <span class="number">0.1</span>);</div><div class="line">    resize(back2, back2, Size(), <span class="number">0.1</span>, <span class="number">0.1</span>);</div><div class="line">    imshow(<span class="string">"back1"</span>, back1);</div><div class="line">    imshow(<span class="string">"back2"</span>, back2);</div><div class="line"></div><div class="line">    <span class="comment">// 直接相减</span></div><div class="line">    Mat result = back2 - back1;</div><div class="line">    imshow(<span class="string">"result"</span>, result);</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出:<br><img src="http://blog-1252464519.costj.myqcloud.com/170518/Selection_051901.png" alt=""></p>
<p>可以看到，直接相减再thresh一下，效果还是比较好的。但是在实际上，这种方法要求比较高，它要求背景图像是静止的，任何微小的背景变动都会对检测造成影响：</p>
<blockquote>
<p>In this approach, we assume that the background is static. If some parts of our background start moving, then those parts will start getting detected as new objects. So, even if the movements are minor, say a waving flag, it will cause problems in our detection algorithm. This approach is also sensitive to changes in illumination, and it cannot handle any camera movement. Needless to say, it’s a delicate approach! We need something that can handle all these things in the real world.</p>
</blockquote>
<h5 id="帧差值法"><a href="#帧差值法" class="headerlink" title="帧差值法"></a>帧差值法</h5><p>帧差值法是利用连续帧之间的差异来获取物体的移动信息。</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052101.png" alt=""></p>
<p>像这样, 重叠的部分是不会被检测到，只有边缘部分会被检测到，但是很明显，这要求物体在转化为灰度图时灰度级是近似均匀的，不然…即使重叠也还是会有差值，不能对冲掉。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">frameDiff</span><span class="params">(Mat prevFrame, Mat curFrame, Mat nextFrame)</span></span>&#123;</div><div class="line">    Mat diffFrames1, diffFrames2, output;</div><div class="line">    <span class="comment">// 计算当前帧和下一帧的绝对差值</span></div><div class="line">    absdiff(nextFrame, curFrame, diffFrames1);</div><div class="line">    <span class="comment">// 计算当前帧和前一帧的绝对差值</span></div><div class="line">    absdiff(curFrame, prevFrame, diffFrames2);</div><div class="line"></div><div class="line">    <span class="comment">// 对以上两个不同的图像进行按位“与”操作</span></div><div class="line">    bitwise_and(diffFrames1, diffFrames2, output);</div><div class="line"></div><div class="line">    <span class="comment">// 为了使得边缘更加明显，进行dilate操作</span></div><div class="line">    dilate(output, output, Mat(), Point(<span class="number">-1</span>,<span class="number">-1</span>), <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> output;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 从摄像头获取帧</span></div><div class="line"><span class="function">Mat <span class="title">getFrame</span><span class="params">(VideoCapture cap, <span class="keyword">float</span> scalingFactor)</span></span>&#123;</div><div class="line">    <span class="comment">// 浮动比例因子设为0.5</span></div><div class="line">    Mat frame, output;</div><div class="line"></div><div class="line">    <span class="comment">// 捕获当前帧</span></div><div class="line">    cap &gt;&gt; frame;</div><div class="line">    <span class="comment">// 调整大小</span></div><div class="line">    resize(frame, frame, Size(), scalingFactor, scalingFactor, INTER_AREA);</div><div class="line">    <span class="comment">// 转换为灰度</span></div><div class="line">    cvtColor(frame, output, CV_BGR2GRAY);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> output;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Mat frame, prevFrame, curFrame, nextFrame;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line"></div><div class="line">    <span class="comment">// 创建捕获对象t</span></div><div class="line">    <span class="comment">// 0-&gt;输入变量表示数据源来自摄像头</span></div><div class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 如果摄像头无法打开，停止执行</span></div><div class="line">    <span class="keyword">if</span>(!cap.isOpened())&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建GUI窗口</span></div><div class="line"><span class="comment">//    namedWindow("Frame");</span></div><div class="line"></div><div class="line">    <span class="comment">// 调整摄像头输入帧大小的缩放因子</span></div><div class="line">    <span class="keyword">float</span> scalingFactor = <span class="number">0.75</span>;</div><div class="line"></div><div class="line">    prevFrame = getFrame(cap, scalingFactor);</div><div class="line">    curFrame = getFrame(cap, scalingFactor);</div><div class="line">    nextFrame = getFrame(cap, scalingFactor);</div><div class="line"></div><div class="line">    <span class="comment">// 循环知道用户按下Esc键</span></div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">        <span class="comment">// 显示对象移动</span></div><div class="line">        imshow(<span class="string">"Object Movement"</span>, frameDiff(prevFrame, curFrame, nextFrame));</div><div class="line"></div><div class="line">        <span class="comment">// 更新变量并抓取下一帧</span></div><div class="line">        prevFrame = curFrame;</div><div class="line">        curFrame = nextFrame;</div><div class="line">        nextFrame = getFrame(cap, scalingFactor);</div><div class="line"></div><div class="line">        <span class="comment">// 获取键盘输入，并检测用户是否按下Esc键</span></div><div class="line">        <span class="comment">// 27-&gt;Esc 按钮的ASCII码</span></div><div class="line">        ch = waitKey(<span class="number">30</span>);</div><div class="line">        <span class="keyword">if</span>(ch==<span class="number">27</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cap.release();</div><div class="line">    destroyAllWindows();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>在移动时摄像头情况：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Object%20Movement_052103.png" alt=""></p>
<h5 id="混合高斯法"><a href="#混合高斯法" class="headerlink" title="混合高斯法"></a>混合高斯法</h5><p>在<em>OpenCV By Example</em>上的MOG没法使用，查了查<code>cv::bgsegm::BackgroundSubtractorMOG</code>也无法使用…查看文档好像又是<code>cv::cuda::BackgroundSubtractorMOG</code>，仍然没办法使用，可能是编译的时候没有添加支持的问题。于是就看了看官方给的demo，用的MOG2.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Global variables</span></div><div class="line">Mat frame; <span class="comment">//current frame</span></div><div class="line">Mat fgMaskMOG2; <span class="comment">//fg mask fg mask generated by MOG2 method</span></div><div class="line">Ptr&lt;BackgroundSubtractor&gt; pMOG2; <span class="comment">//MOG2 Background subtractor</span></div><div class="line"><span class="keyword">char</span> keyboard; <span class="comment">//input from keyboard</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">processVideo</span><span class="params">(<span class="keyword">char</span>* videoFilename)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">processImages</span><span class="params">(<span class="keyword">char</span>* firstFrameFilename)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span></div><div class="line">            &lt;&lt; <span class="string">"--------------------------------------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"This program shows how to use background subtraction methods provided by "</span>  &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">" OpenCV. You can process both videos (-vid) and images (-img)."</span>             &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"Usage:"</span>                                                                     &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"./bg_sub &#123;-vid &lt;video filename&gt;|-img &lt;image filename&gt;&#125;"</span>                     &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"for example: ./bg_sub -vid video.avi"</span>                                       &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"or: ./bg_sub -img /data/images/1.png"</span>                                       &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="string">"--------------------------------------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span></div><div class="line">            &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//print help information</span></div><div class="line">    help();</div><div class="line">    <span class="comment">//check for the input parameter correctness</span></div><div class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">cerr</span> &lt;&lt;<span class="string">"Incorret input list"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cerr</span> &lt;&lt;<span class="string">"exiting..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> EXIT_FAILURE;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//create GUI windows</span></div><div class="line">    namedWindow(<span class="string">"Frame"</span>);</div><div class="line">    namedWindow(<span class="string">"FG Mask MOG 2"</span>);</div><div class="line">    <span class="comment">//create Background Subtractor objects</span></div><div class="line">    pMOG2 = createBackgroundSubtractorMOG2(); <span class="comment">//MOG2 approach</span></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-vid"</span>) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//input data coming from a video</span></div><div class="line">        processVideo(argv[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-img"</span>) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//input data coming from a sequence of images</span></div><div class="line">        processImages(argv[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//error in reading input parameters</span></div><div class="line">        <span class="built_in">cerr</span> &lt;&lt;<span class="string">"Please, check the input parameters."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cerr</span> &lt;&lt;<span class="string">"Exiting..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> EXIT_FAILURE;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//destroy GUI windows</span></div><div class="line">    destroyAllWindows();</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">processVideo</span><span class="params">(<span class="keyword">char</span>* videoFilename)</span> </span>&#123;</div><div class="line">    <span class="comment">//create the capture object</span></div><div class="line">    <span class="function">VideoCapture <span class="title">capture</span><span class="params">(videoFilename)</span></span>;</div><div class="line">    <span class="keyword">if</span>(!capture.isOpened())&#123;</div><div class="line">        <span class="comment">//error in opening the video input</span></div><div class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Unable to open video file: "</span> &lt;&lt; videoFilename &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//read input data. ESC or 'q' for quitting</span></div><div class="line">    keyboard = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>( keyboard != <span class="string">'q'</span> &amp;&amp; keyboard != <span class="number">27</span> )&#123;</div><div class="line">        <span class="comment">//read the current frame</span></div><div class="line">        <span class="keyword">if</span>(!capture.read(frame)) &#123;</div><div class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Unable to read next frame."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Exiting..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//update the background model</span></div><div class="line">        pMOG2-&gt;apply(frame, fgMaskMOG2);</div><div class="line">        erode(fgMaskMOG2, fgMaskMOG2, Mat(), Point(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">1</span>);</div><div class="line">        <span class="comment">//get the frame number and write it on the current frame</span></div><div class="line">        <span class="built_in">stringstream</span> ss;</div><div class="line">        rectangle(frame, cv::Point(<span class="number">10</span>, <span class="number">2</span>), cv::Point(<span class="number">100</span>,<span class="number">20</span>),</div><div class="line">                  cv::Scalar(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="number">-1</span>);</div><div class="line">        ss &lt;&lt; capture.get(CAP_PROP_POS_FRAMES);</div><div class="line">        <span class="built_in">string</span> frameNumberString = ss.str();</div><div class="line">        putText(frame, frameNumberString.c_str(), cv::Point(<span class="number">15</span>, <span class="number">15</span>),</div><div class="line">                FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span> , cv::Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</div><div class="line">        <span class="comment">//show the current frame and the fg masks</span></div><div class="line">        imshow(<span class="string">"Frame"</span>, frame);</div><div class="line">        imshow(<span class="string">"FG Mask MOG 2"</span>, fgMaskMOG2);</div><div class="line">        <span class="comment">//get the input from the keyboard</span></div><div class="line">        keyboard = (<span class="keyword">char</span>)waitKey( <span class="number">30</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//delete capture object</span></div><div class="line">    capture.release();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">processImages</span><span class="params">(<span class="keyword">char</span>* fistFrameFilename)</span> </span>&#123;</div><div class="line">    <span class="comment">//read the first file of the sequence</span></div><div class="line">    frame = imread(fistFrameFilename);</div><div class="line">    <span class="keyword">if</span>(frame.empty())&#123;</div><div class="line">        <span class="comment">//error in opening the first image</span></div><div class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Unable to open first image frame: "</span> &lt;&lt; fistFrameFilename &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//current image filename</span></div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">fn</span><span class="params">(fistFrameFilename)</span></span>;</div><div class="line">    <span class="comment">//read input data. ESC or 'q' for quitting</span></div><div class="line">    keyboard = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>( keyboard != <span class="string">'q'</span> &amp;&amp; keyboard != <span class="number">27</span> )&#123;</div><div class="line">        <span class="comment">//update the background model</span></div><div class="line">        pMOG2-&gt;apply(frame, fgMaskMOG2);</div><div class="line">        <span class="comment">//get the frame number and write it on the current frame</span></div><div class="line">        <span class="keyword">size_t</span> index = fn.find_last_of(<span class="string">"/"</span>);</div><div class="line">        <span class="keyword">if</span>(index == <span class="built_in">string</span>::npos) &#123;</div><div class="line">            index = fn.find_last_of(<span class="string">"\\"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">size_t</span> index2 = fn.find_last_of(<span class="string">"."</span>);</div><div class="line">        <span class="built_in">string</span> prefix = fn.substr(<span class="number">0</span>,index+<span class="number">1</span>);</div><div class="line">        <span class="built_in">string</span> suffix = fn.substr(index2);</div><div class="line">        <span class="built_in">string</span> frameNumberString = fn.substr(index+<span class="number">1</span>, index2-index<span class="number">-1</span>);</div><div class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(frameNumberString)</span></span>;</div><div class="line">        <span class="keyword">int</span> frameNumber = <span class="number">0</span>;</div><div class="line">        iss &gt;&gt; frameNumber;</div><div class="line">        rectangle(frame, cv::Point(<span class="number">10</span>, <span class="number">2</span>), cv::Point(<span class="number">100</span>,<span class="number">20</span>),</div><div class="line">                  cv::Scalar(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="number">-1</span>);</div><div class="line">        putText(frame, frameNumberString.c_str(), cv::Point(<span class="number">15</span>, <span class="number">15</span>),</div><div class="line">                FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span> , cv::Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</div><div class="line">        <span class="comment">//show the current frame and the fg masks</span></div><div class="line">        imshow(<span class="string">"Frame"</span>, frame);</div><div class="line">        imshow(<span class="string">"FG Mask MOG 2"</span>, fgMaskMOG2);</div><div class="line">        <span class="comment">//get the input from the keyboard</span></div><div class="line">        keyboard = (<span class="keyword">char</span>)waitKey( <span class="number">30</span> );</div><div class="line">        <span class="comment">//search for the next image in the sequence</span></div><div class="line">        <span class="built_in">ostringstream</span> oss;</div><div class="line">        oss &lt;&lt; (frameNumber + <span class="number">1</span>);</div><div class="line">        <span class="built_in">string</span> nextFrameNumberString = oss.str();</div><div class="line">        <span class="built_in">string</span> nextFrameFilename = prefix + nextFrameNumberString + suffix;</div><div class="line">        <span class="comment">//read the next frame</span></div><div class="line">        frame = imread(nextFrameFilename);</div><div class="line">        <span class="keyword">if</span>(frame.empty())&#123;</div><div class="line">            <span class="comment">//error in opening the next image in the sequence</span></div><div class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Unable to open image frame: "</span> &lt;&lt; nextFrameFilename &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//update the path of the current frame</span></div><div class="line">        fn.assign(nextFrameFilename);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>终端运行：</p>
<blockquote>
<p>cmake .<br>make<br>./Clions -vid /home/shensir/Documents/MyPrograming/Cpp/Clions/data/BGC.avi</p>
</blockquote>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052102.png" alt=""></p>
<p>上面的demo也可以对一系列的连续的图片进行检测，只需要将所有图片按顺序命名为1.xxx， 2.xxx这样，然后运行的时候只提供第一帧的即1.xxx并使用-img即可。关于其中的字符串的操作，我们还原如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">fn</span><span class="params">(<span class="string">"/data/1.jpg"</span>)</span></span>;</div><div class="line">    <span class="keyword">size_t</span> index = fn.find_last_of(<span class="string">"/"</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Index: "</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">string</span> prefix = fn.substr(<span class="number">0</span>, index+<span class="number">1</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Prefix: "</span>&lt;&lt;prefix&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">size_t</span> index2 = fn.find_last_of(<span class="string">"."</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Index2: "</span>&lt;&lt;index2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">string</span> suffix = fn.substr(index2);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"suffix: "</span>&lt;&lt;suffix&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">string</span> frameNumberString = fn.substr(index+<span class="number">1</span>, index2-index<span class="number">-1</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"frameNUmberString: "</span>&lt;&lt;frameNumberString&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(frameNumberString)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> frameNumber = <span class="number">0</span>;</div><div class="line">    iss &gt;&gt; frameNumber;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"frameNumber: "</span>&lt;&lt;frameNumber&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">ostringstream</span> oss;</div><div class="line">    oss &lt;&lt; (frameNumber + <span class="number">1</span>);</div><div class="line">    <span class="built_in">string</span> nextFrameNumberString = oss.str();</div><div class="line">    <span class="built_in">string</span> nextFrameFilename = prefix + nextFrameNumberString + suffix;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"nextFrameFilename: "</span>&lt;&lt;nextFrameFilename&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Index: 5<br>Prefix: /data/<br>Index2: 7<br>suffix: .jpg<br>frameNUmberString: 1<br>frameNumber: 1<br>nextFrameFilename: /data/2.jpg</p>
</blockquote>
<p>开始的时候对<code>istringstream</code>的用法不太懂，查到下面一个例子，虽不懂原理，但是它的用途还是可以了解到：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>     <span class="comment">// std::cout</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>      <span class="comment">// std::istringstream</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>       <span class="comment">// std::string</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> stringvalues = <span class="string">"125 320 512 750 333"</span>;</div><div class="line">  <span class="built_in">std</span>::<span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span> <span class="params">(stringvalues)</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">5</span>; n++)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    iss &gt;&gt; val;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; val*<span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>250<br>640<br>1024<br>1500<br>666</p>
</blockquote>
<h4 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h4><p><em>OpenCV By Example</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实时视频中面具覆盖的实现]]></title>
      <url>/2017/05/18/%E5%AE%9E%E6%97%B6%E8%A7%86%E9%A2%91%E4%B8%AD%E9%9D%A2%E5%85%B7%E8%A6%86%E7%9B%96%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p><em>OpenCV By Example</em>第七章中的一个例子，识别算法是直接加载的给定的级联文件（书中的代码给提供了一份，OpenCV官方应该也能找的到）。检测到人脸之后就是面具的覆盖，这个过程类似之前的<a href="http://datahonor.com/2017/04/28/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9AROI/">logo添加</a>,就是logo(此处是facemask)和背景(此处是人脸ROI)的对称的操作，之后将两者直接合并即可。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> faceCascadeName = <span class="string">"/home/shensir/Documents/MyPrograming/Cpp/books/CV/2-ing/9781785280948_Code/B04283_07_code/code/cascadeFiles/haarcascade_frontalface_alt.xml"</span>;</div><div class="line">    CascadeClassifier faceCascade;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( !faceCascade.load(faceCascadeName) )</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error loading cascade file. Exiting!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Mat faceMask = imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/mask2.jpeg"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( !faceMask.data )</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error loading mask image. Exiting!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Current frame</span></div><div class="line">    Mat frame, frameGray;</div><div class="line">    Mat frameROI, faceMaskSmall;</div><div class="line">    Mat grayMaskSmall, grayMaskSmallThresh, grayMaskSmallThreshInv;</div><div class="line">    Mat maskedFace, maskedFrame;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line"></div><div class="line">    <span class="comment">// Create the capture object</span></div><div class="line">    <span class="comment">// 0 -&gt; input arg that specifies it should take the input from the webcam</span></div><div class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// If you cannot open the webcam, stop the execution!</span></div><div class="line">    <span class="keyword">if</span>( !cap.isOpened() )</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//create GUI windows</span></div><div class="line">    namedWindow(<span class="string">"Frame"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Scaling factor to resize the input frames from the webcam</span></div><div class="line">    <span class="keyword">float</span> scalingFactor = <span class="number">0.75</span>;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;Rect&gt; faces;</div><div class="line"></div><div class="line">    <span class="comment">// Iterate until the user presses the Esc key</span></div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Capture the current frame</span></div><div class="line">        cap &gt;&gt; frame;</div><div class="line"></div><div class="line">        <span class="comment">// Resize the frame</span></div><div class="line">        resize(frame, frame, Size(), scalingFactor, scalingFactor, INTER_AREA);</div><div class="line"></div><div class="line">        <span class="comment">// Convert to grayscale</span></div><div class="line">        cvtColor(frame, frameGray, CV_BGR2GRAY);</div><div class="line"></div><div class="line">        <span class="comment">// Equalize the histogram</span></div><div class="line">        equalizeHist(frameGray, frameGray);</div><div class="line"></div><div class="line">        <span class="comment">// Detect faces</span></div><div class="line">        faceCascade.detectMultiScale(frameGray, faces, <span class="number">1.1</span>, <span class="number">2</span>, <span class="number">0</span>|CV_HAAR_SCALE_IMAGE, Size(<span class="number">30</span>, <span class="number">30</span>) );</div><div class="line"></div><div class="line">        <span class="comment">// Draw green rectangle around the face</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; faces.size(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="function">Rect <span class="title">faceRect</span><span class="params">(faces[i].x, faces[i].y, faces[i].width, faces[i].height)</span></span>;</div><div class="line">            rectangle(frame, faceRect, Scalar(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Custom parameters to make the mask fit your face. You may have to play around with them to make sure it works.</span></div><div class="line">            <span class="keyword">int</span> x = faces[i].x - <span class="keyword">int</span>(<span class="number">0.1</span>*faces[i].width);</div><div class="line">            <span class="keyword">int</span> y = faces[i].y - <span class="keyword">int</span>(<span class="number">0.0</span>*faces[i].height);</div><div class="line">            <span class="keyword">int</span> w = <span class="keyword">int</span>(<span class="number">1.3</span> * faces[i].width);</div><div class="line">            <span class="keyword">int</span> h = <span class="keyword">int</span>(<span class="number">1.3</span> * faces[i].height);</div><div class="line"></div><div class="line">            <span class="comment">// Extract region of interest (ROI) covering your face</span></div><div class="line">            frameROI = frame(Rect(x,y,w,h));</div><div class="line"></div><div class="line">            <span class="comment">// Resize the face mask image based on the dimensions of the above ROI</span></div><div class="line">            resize(faceMask, faceMaskSmall, Size(w,h));</div><div class="line"></div><div class="line">            <span class="comment">// Convert the above image to grayscale</span></div><div class="line">            <span class="comment">// 灰度化</span></div><div class="line">            cvtColor(faceMaskSmall, grayMaskSmall, CV_BGR2GRAY);</div><div class="line"></div><div class="line">            <span class="comment">// Threshold the above image to isolate the pixels associated only with the face mask</span></div><div class="line">            <span class="comment">// 二值化，grayMaskSmallThresh在面具主体为白，其余为黑色</span></div><div class="line">            threshold(grayMaskSmall, grayMaskSmallThresh, <span class="number">230</span>, <span class="number">255</span>, CV_THRESH_BINARY_INV);</div><div class="line"></div><div class="line">            <span class="comment">// Create mask by inverting the above image (because we don't want the background to affect the overlay)</span></div><div class="line">            <span class="comment">// grayMaskSmallThreshInv在面具主体为黑色，其余为白色</span></div><div class="line">            bitwise_not(grayMaskSmallThresh, grayMaskSmallThreshInv);</div><div class="line"></div><div class="line">            <span class="comment">// Use bitwise "AND" operator to extract precise boundary of face mask</span></div><div class="line">            <span class="comment">// 扣取面具主体，周围为黑色</span></div><div class="line">            bitwise_and(faceMaskSmall, faceMaskSmall, maskedFace, grayMaskSmallThresh);</div><div class="line">            imshow(<span class="string">"maskedFace"</span>, maskedFace);</div><div class="line"></div><div class="line">            <span class="comment">// Use bitwise "AND" operator to overlay face mask</span></div><div class="line">            <span class="comment">// 挖去ROI中的脸部图像，变为黑色，其余保持不变</span></div><div class="line">            bitwise_and(frameROI, frameROI, maskedFrame, grayMaskSmallThreshInv);</div><div class="line">            imshow(<span class="string">"maskedFrame"</span>, maskedFrame);</div><div class="line"></div><div class="line">            <span class="comment">// Add the above masked images and place it in the original frame ROI to create the final image</span></div><div class="line">            <span class="comment">// 面具部分覆盖脸部主体，其余部分合成后保持不变</span></div><div class="line">            add(maskedFace, maskedFrame, frame(Rect(x,y,w,h)));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Show the current frame</span></div><div class="line">        imshow(<span class="string">"Frame"</span>, frame);</div><div class="line"></div><div class="line">        <span class="comment">// Get the keyboard input and check if it's 'Esc'</span></div><div class="line">        <span class="comment">// 27 -&gt; ASCII value of 'Esc' key</span></div><div class="line">        ch = waitKey( <span class="number">30</span> );</div><div class="line">        <span class="keyword">if</span> (ch == <span class="number">27</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Release the video capture object</span></div><div class="line">    cap.release();</div><div class="line"></div><div class="line">    <span class="comment">// Close all windows</span></div><div class="line">    destroyAllWindows();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170518/Selection_051805.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习目标分类]]></title>
      <url>/2017/05/18/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>还是<em>OpenCV By Example</em>， 承接上文的目标分割和检测，这里用SVM进行了分类的学习。由于从PACKT下载的代码是基于QT的，而我。。开始编译OpenCV没有选QT支持，重新编译也一致出错，就暂时没去用QT的按钮那些功能，也就没QT进行编译了。。扯多了，回到正题。代码应该是有一些bug的，折腾了一下午才调试好…</p>
<p>原理还是比较简单的，处理的流程也较为清晰。对图片主要是进行了中值滤波，去除光纹，和灰度二值化提取轮廓的操作。抽取螺丝环，螺母，螺丝钉的面积和长宽比这两个特征进行训练，测试误差在2%以下，看书上的截图，原作的误差在7%左右…可能和OpenCV的改进有关吧。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//</div><div class="line">// Created by shensir on 17-5-17.</div><div class="line">//</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include "opencv2/highgui.hpp"</div><div class="line">#include "opencv2/imgproc.hpp"</div><div class="line">#include "opencv2/ml.hpp"</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">using namespace cv;</div><div class="line">using namespace cv::ml;</div><div class="line"></div><div class="line">// 一些全局变量</div><div class="line">Mat light_pattern;</div><div class="line">Ptr&lt;SVM&gt; svm;</div><div class="line">Scalar green(0,255,0), blue (255,0,0), red (0,0,255);</div><div class="line"></div><div class="line">// 光纹去除</div><div class="line">Mat removeLight(Mat img, Mat pattern)</div><div class="line">&#123;</div><div class="line">    Mat aux;</div><div class="line">    // Require change our image to 32 float for division</div><div class="line">    Mat img32, pattern32;</div><div class="line">    img.convertTo(img32, CV_32F);</div><div class="line">    pattern.convertTo(pattern32, CV_32F);</div><div class="line">    // Divide the imabe by the pattern</div><div class="line">    aux= 255*(1-(img32/pattern32));</div><div class="line">    // Convert 8 bits format</div><div class="line">    aux.convertTo(aux, CV_8U);</div><div class="line"></div><div class="line">    return aux;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 特征抽取，这里抽取面积及宽高比</div><div class="line">vector&lt;vector&lt;float&gt; &gt; ExtractFeatures(Mat img, vector&lt;int&gt;*left=NULL, vector&lt;int&gt;*top=NULL)</div><div class="line">&#123;</div><div class="line">//    count_num +=1;</div><div class="line">    vector&lt;vector&lt;float&gt;&gt; output;</div><div class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</div><div class="line">    Mat input = img.clone();</div><div class="line"></div><div class="line">    vector&lt;Vec4i&gt;hierarchy;</div><div class="line">    findContours(input, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);</div><div class="line">    // 检查被检测到的物体个数</div><div class="line">    if(contours.size() == 0) return output;</div><div class="line"></div><div class="line">    for(int i=0; i&lt;contours.size(); i++)&#123;</div><div class="line">        Mat mask = Mat::zeros(img.rows, img.cols, CV_8UC1);</div><div class="line">        drawContours(mask, contours, i, Scalar(1), FILLED, LINE_8, hierarchy, 1);</div><div class="line">        Scalar area_s = sum(mask);</div><div class="line">        float area = area_s[0];</div><div class="line"></div><div class="line">        if(area&gt;500)&#123;// 如果area大于面积最小阀值</div><div class="line">            RotatedRect r = minAreaRect(contours[i]);</div><div class="line">            float width = r.size.width;</div><div class="line">            float height = r.size.height;</div><div class="line">            float ar = (width&lt;height)?height/width:width/height;</div><div class="line"></div><div class="line">            // 存储特征数据</div><div class="line">            vector&lt;float&gt; row;</div><div class="line">            row.push_back(area);</div><div class="line">            row.push_back(ar);</div><div class="line">            output.push_back(row);</div><div class="line">            // 用于添加文字时候的定位</div><div class="line">            if(left!=NULL)&#123;</div><div class="line">                left-&gt;push_back(int(r.center.x));</div><div class="line">            &#125;</div><div class="line">            if(top!=NULL)&#123;</div><div class="line">                top-&gt;push_back(int(r.center.y));</div><div class="line">            &#125;</div><div class="line">            // 显示特征抽取的结果</div><div class="line">            imshow("Extract Features", mask*255);</div><div class="line">            waitKey(10);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return output;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 图片预处理</div><div class="line">Mat preprocessImage(Mat input)</div><div class="line">&#123;</div><div class="line">    // 灰度化</div><div class="line">    if(input.channels()!=1)</div><div class="line">        cvtColor(input, input, COLOR_BGR2GRAY);</div><div class="line"></div><div class="line">    Mat result;</div><div class="line">    // Remove noise</div><div class="line">    Mat img_noise;</div><div class="line">    medianBlur(input, img_noise, 3);</div><div class="line">    //Apply the light pattern</div><div class="line">    Mat img_no_light;</div><div class="line">    img_noise.copyTo(img_no_light);</div><div class="line">    // 去除光纹</div><div class="line">    img_no_light= removeLight(img_noise, light_pattern);</div><div class="line"></div><div class="line"></div><div class="line">    // Binarize image for segment</div><div class="line">    threshold(img_no_light, result, 30, 255, THRESH_BINARY);</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 从文件批量读取图片，并进行特征抽取</div><div class="line">bool readFolderAndExtractFeatures(string folder, int label, int num_for_test,</div><div class="line">                                    vector&lt;float&gt;&amp;trainingData, vector&lt;int&gt;&amp;responeseData,</div><div class="line">                                    vector&lt;float&gt;&amp;testData, vector&lt;float&gt;&amp;testResponsesData)</div><div class="line">&#123;</div><div class="line">    VideoCapture images(folder);</div><div class="line">    if(images.open(folder) == false)&#123;</div><div class="line">        cout&lt;&lt;"Can not open the folder images"&lt;&lt;endl;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Mat frame;</div><div class="line">    int img_index=0;</div><div class="line">    while(images.read(frame))&#123;</div><div class="line"></div><div class="line">        // 预处理图像</div><div class="line">        images&gt;&gt;frame;  //  书上参考代码没有这句，貌似bug...</div><div class="line">        if(!frame.empty())&#123;</div><div class="line"></div><div class="line">            // 预处理</div><div class="line">            Mat pre = preprocessImage(frame);</div><div class="line">            // 提取特征</div><div class="line">            vector&lt;vector&lt;float&gt;&gt; features = ExtractFeatures(pre);</div><div class="line">            for(int i=0; i&lt;features.size(); i++)&#123;</div><div class="line">                if(img_index &gt;= num_for_test)&#123;</div><div class="line">                    trainingData.push_back(features[i][0]);</div><div class="line">                    trainingData.push_back(features[i][1]);</div><div class="line">                    responeseData.push_back(label);</div><div class="line"></div><div class="line">                &#125;else&#123;</div><div class="line">                    testData.push_back(features[i][0]);</div><div class="line">                    testData.push_back(features[i][1]);</div><div class="line">                    testResponsesData.push_back(float(label));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            img_index ++;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">// 做图</div><div class="line">void plotTrainData(Mat trainData, Mat labels, float *error=NULL)</div><div class="line">&#123;</div><div class="line">    float area_max, ar_max, area_min, ar_min;</div><div class="line">    area_max= ar_max= 0;</div><div class="line">    area_min= ar_min= 99999999;</div><div class="line">    // Get the min and max of each feature for normalize plot image</div><div class="line">    for(int i=0; i&lt; trainData.rows; i++)&#123;</div><div class="line">        float area= trainData.at&lt;float&gt;(i,0);</div><div class="line">        float ar= trainData.at&lt;float&gt;(i,1);</div><div class="line">        if(area &gt; area_max)</div><div class="line">            area_max= area;</div><div class="line">        if( ar &gt; ar_max )</div><div class="line">            ar_max= ar;</div><div class="line">        if(area &lt; area_min)</div><div class="line">            area_min= area;</div><div class="line">        if(ar &lt; ar_min)</div><div class="line">            ar_min= ar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Create Image for plot</div><div class="line">    Mat plot= Mat::zeros(512,512,CV_8UC3);</div><div class="line">    // Plot each of two features in a 2D graph using an image</div><div class="line">    // where x is area and y is aspect ratio</div><div class="line">    for(int i=0; i&lt; trainData.rows; i++)&#123;</div><div class="line">        // Set the X y pos for each data</div><div class="line">        float area= trainData.at&lt;float&gt;(i,0);</div><div class="line">        float ar= trainData.at&lt;float&gt;(i,1);</div><div class="line">        int x= (int)(512.0f*((area-area_min)/(area_max-area_min)));</div><div class="line">        int y= (int)(512.0f*((ar-ar_min)/(ar_max-ar_min)));</div><div class="line"></div><div class="line">        // Get label</div><div class="line">        int label= labels.at&lt;int&gt;(i);</div><div class="line">        // Set color depend of label</div><div class="line">        Scalar color;</div><div class="line">        if(label==0)</div><div class="line">            color= green; // NUT</div><div class="line">        else if(label==1)</div><div class="line">            color= blue; // ring</div><div class="line">        else if(label==2)</div><div class="line">            color= red; // SCREW</div><div class="line"></div><div class="line">        circle( plot,  Point(x, y), 3,  color, -1, 8);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if(error!=NULL)&#123;</div><div class="line">        stringstream ss;</div><div class="line">        ss &lt;&lt; "Error: " &lt;&lt; *error &lt;&lt; "%";</div><div class="line">        putText(plot, ss.str().c_str(), Point(20,512-40), FONT_HERSHEY_SIMPLEX, 0.75, Scalar(200,200,200), 1, LINE_AA);</div><div class="line">    &#125;</div><div class="line">    imshow("plot", plot);</div><div class="line">//    waitKey(0);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 训练并测试误差</div><div class="line">void trainAndTest() &#123;</div><div class="line">    vector&lt;float&gt; trainingData;</div><div class="line">    vector&lt;int&gt; responsesData;</div><div class="line">    vector&lt;float&gt; testData;</div><div class="line">    vector&lt;float&gt; testResponsesData;</div><div class="line"></div><div class="line">    int num_for_test = 20;</div><div class="line"></div><div class="line"></div><div class="line">    // 获取螺母图像</div><div class="line">    readFolderAndExtractFeatures("/home/shensir/Documents/MyPrograming/Cpp/books/CV/2-ing/9781785280948_Code/"</div><div class="line">                                         "B04283_06_code/data/nut/tuerca_%04d.pgm", 0,</div><div class="line">                                 num_for_test, trainingData, responsesData, testData, testResponsesData);</div><div class="line"></div><div class="line">    // 获取螺丝圈图像</div><div class="line">    readFolderAndExtractFeatures("/home/shensir/Documents/MyPrograming/Cpp/books/CV/2-ing/9781785280948_Code/"</div><div class="line">                                         "B04283_06_code/data/ring/arandela_%04d.pgm", 1,</div><div class="line">                                 num_for_test, trainingData, responsesData, testData, testResponsesData);</div><div class="line"></div><div class="line"></div><div class="line">    // 获取并处理螺丝</div><div class="line">    readFolderAndExtractFeatures("/home/shensir/Documents/MyPrograming/Cpp/books/CV/2-ing/"</div><div class="line">                                         "9781785280948_Code/B04283_06_code/data/screw/tornillo_%04d.pgm", 2,</div><div class="line">                                 num_for_test, trainingData, responsesData, testData, testResponsesData);</div><div class="line"></div><div class="line">    cout&lt;&lt;"Num of train samples: "&lt;&lt;responsesData.size()&lt;&lt;endl;</div><div class="line"></div><div class="line">    cout&lt;&lt;"Num of test samples: "&lt;&lt;testResponsesData.size()&lt;&lt;endl;</div><div class="line"></div><div class="line">    // 合并</div><div class="line">    // Mat(int rows, int cols, int type, void* data, size_t step=AUTO_STEP);</div><div class="line"></div><div class="line">    Mat trainingDataMat(trainingData.size()/2 ,2, CV_32FC1, &amp;trainingData[0]);</div><div class="line">    Mat responses(responsesData.size(), 1, CV_32SC1, &amp;responsesData[0]);</div><div class="line"></div><div class="line">    Mat testDataMat(testData.size()/2, 2, CV_32FC1, &amp;testData[0]);</div><div class="line">    Mat testRespones(testResponsesData.size(), 1, CV_32FC1, &amp;testResponsesData[0]);</div><div class="line"></div><div class="line">    svm = SVM::create();</div><div class="line">    svm-&gt;setType(SVM::C_SVC);</div><div class="line">    svm-&gt;setKernel(SVM::CHI2);</div><div class="line">    svm-&gt;setTermCriteria(TermCriteria(TermCriteria::MAX_ITER, 100, 1e-6));</div><div class="line"></div><div class="line">    svm-&gt;train(trainingDataMat, ROW_SAMPLE, responses);</div><div class="line"></div><div class="line">    if(testResponsesData.size() &gt;0)&#123;</div><div class="line">        cout&lt;&lt;"Evaluation"&lt;&lt;endl;</div><div class="line">        cout&lt;&lt;"============"&lt;&lt;endl;</div><div class="line">        // test the ML model</div><div class="line">        Mat testPredict;</div><div class="line">        svm-&gt;predict(testDataMat, testPredict);</div><div class="line">        cout&lt;&lt;"Prediction Done"&lt;&lt;endl;</div><div class="line">        // error handle</div><div class="line">        Mat errorMat = testPredict != testRespones;</div><div class="line">        float error = 100.0f * countNonZero(errorMat) / testResponsesData.size();</div><div class="line">        cout&lt;&lt;"Error: "&lt;&lt;error&lt;&lt;"%"&lt;&lt;endl;</div><div class="line">        //plot data</div><div class="line">        plotTrainData(trainingDataMat, responses, &amp;error);</div><div class="line"></div><div class="line">    &#125;else&#123;</div><div class="line">        plotTrainData(trainingDataMat, responses);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int main( int argc, const char** argv )</div><div class="line">&#123;</div><div class="line"></div><div class="line">    // Load image to process</div><div class="line">    Mat img= imread("/home/shensir/Documents/MyPrograming/Cpp/books/CV/2-ing/9781785280948_Code/B04283_06_code/data/test.pgm", IMREAD_GRAYSCALE);</div><div class="line">    if(img.data==NULL)&#123;</div><div class="line">        cout &lt;&lt; "Error loading image "&lt;&lt; endl;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    imshow("img", img);</div><div class="line"></div><div class="line"></div><div class="line">    // Load image to process</div><div class="line">    light_pattern= imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/light.pgm", 0);</div><div class="line">    if(light_pattern.data==NULL)&#123;</div><div class="line">        // Calculate light pattern</div><div class="line">        cout &lt;&lt; "ERROR: Not light patter loaded" &lt;&lt; endl;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    medianBlur(light_pattern, light_pattern, 3);</div><div class="line"></div><div class="line">    trainAndTest();</div><div class="line"></div><div class="line">    //// Preprocess image</div><div class="line">    Mat pre= preprocessImage(img);</div><div class="line">    ////End preprocess</div><div class="line"></div><div class="line">    // Extract features</div><div class="line">    vector&lt;int&gt; pos_top, pos_left;</div><div class="line">    vector&lt; vector&lt;float&gt; &gt; features= ExtractFeatures(pre, &amp;pos_left, &amp;pos_top);</div><div class="line"></div><div class="line">    cout &lt;&lt; "Num objects extracted features " &lt;&lt; features.size() &lt;&lt; endl;</div><div class="line"></div><div class="line">    Mat img_output= img.clone();</div><div class="line">    cvtColor(img_output, img_output, COLOR_GRAY2BGR);</div><div class="line"></div><div class="line">    for(int i=0; i&lt; features.size(); i++)&#123;</div><div class="line"></div><div class="line">        cout &lt;&lt; "Data Area AR: " &lt;&lt; features[i][0] &lt;&lt; " " &lt;&lt; features[i][1] &lt;&lt; endl;</div><div class="line"></div><div class="line">        Mat trainingDataMat(1, 2, CV_32FC1, &amp;features[i][0]);</div><div class="line">        cout &lt;&lt; "Features to predict: " &lt;&lt; trainingDataMat &lt;&lt; endl;</div><div class="line">        float result= svm-&gt;predict(trainingDataMat);</div><div class="line">        cout &lt;&lt; result &lt;&lt; endl;</div><div class="line"></div><div class="line"></div><div class="line">        stringstream ss;</div><div class="line">        Scalar color;</div><div class="line">        if(result==0)&#123;</div><div class="line">            color= green; // NUT</div><div class="line">            ss &lt;&lt; "NUT";</div><div class="line">        &#125;</div><div class="line">        else if(result==1)&#123;</div><div class="line">            color= blue; // RING</div><div class="line">            ss &lt;&lt; "RING" ;</div><div class="line">        &#125;</div><div class="line">        else if(result==2)&#123;</div><div class="line">            color= red; // SCREW</div><div class="line">            ss &lt;&lt; "SCREW";</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        putText(img_output,</div><div class="line">                ss.str(),</div><div class="line">                Point2d(pos_left[i], pos_top[i]),</div><div class="line">                FONT_HERSHEY_SIMPLEX,</div><div class="line">                0.4,</div><div class="line">                color);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    //vector&lt;int&gt; results= evaluate(features);</div><div class="line"></div><div class="line">    // Show images</div><div class="line">    imshow("Binary image", pre);</div><div class="line">    imshow("Result", img_output);</div><div class="line">    waitKey(0);</div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<blockquote>
<p>此处的测试结果还是不错的，5个部件全部识别成功了。</p>
</blockquote>
<p>输出：</p>
<pre><code>Num of train samples: 146
Num of test samples: 67
Evaluation
============
Prediction Done
Error: 1.49254%
Num objects extracted features 5
Data Area AR: 2084 1.54013
Features to predict: [2084, 1.54013]
2
Data Area AR: 1171 1.12195
Features to predict: [1171, 1.1219512]
0
Data Area AR: 1045 1.97279
Features to predict: [1045, 1.9727893]
0
Data Area AR: 1486 1.12069
Features to predict: [1486, 1.1206896]
2
Data Area AR: 1620 1
Features to predict: [1620, 1]
1
</code></pre><p><img src="http://blog-1252464519.costj.myqcloud.com/170518/Selection_051804.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自动光学检测，目标分割和检测]]></title>
      <url>/2017/05/18/%E8%87%AA%E5%8A%A8%E5%85%89%E5%AD%A6%E6%A3%80%E6%B5%8B%EF%BC%8C%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2%E5%92%8C%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>在复习CookBook的闲暇，看了看<em>OpenCV By Example</em>, 里面的示例很不错，这里做下记录。此处实现了目标的背景去除，目标的分割和检测，以工厂螺母为例。就是下面的图啦。</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170518/light.png" alt=""><br><img src="http://blog-1252464519.costj.myqcloud.com/170518/test.png" alt=""></p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">//</div><div class="line">// Created by shensir on 17-5-17.</div><div class="line">//</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include "opencv2/highgui.hpp"</div><div class="line">#include "opencv2/imgproc.hpp"</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">using namespace cv;</div><div class="line"></div><div class="line">// 光纹去除</div><div class="line">Mat removeLight(Mat img, Mat pattern, int method)&#123;</div><div class="line">    Mat aux;</div><div class="line">    // 如果方法是归一化</div><div class="line">    if(method==1)&#123;</div><div class="line">        // 相除时需要将图像改为32位浮点型</div><div class="line">        Mat img32, pattern32;</div><div class="line">        img.convertTo(img32, CV_32F);</div><div class="line">        pattern.convertTo(pattern32, CV_32F);</div><div class="line">        // 图像相除模式</div><div class="line">        aux = 255*(1-(img32/pattern32));</div><div class="line">        // 换回8bit</div><div class="line">        aux.convertTo(aux, CV_8U);</div><div class="line">    &#125;</div><div class="line">    else&#123;</div><div class="line">        aux = pattern - img;</div><div class="line">    &#125;</div><div class="line">    return aux;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 估计背景图像，大尺寸核矩阵模糊</div><div class="line">Mat calculateLightPattern(Mat img)&#123;</div><div class="line">    Mat pattern;</div><div class="line">    blur(img, pattern, Size(img.cols/3, img.rows/3));</div><div class="line">    return pattern;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 先进行形态学操作[在背景色是核函数模糊得到的时候，很有必要]，再二值化</div><div class="line">Mat getBinary(Mat img_no_light, int method_light)&#123;</div><div class="line">    Mat img_thr;</div><div class="line">    if(method_light!=2)&#123;</div><div class="line">        threshold(img_no_light, img_thr, 30, 255, THRESH_BINARY);</div><div class="line">    &#125; else&#123;</div><div class="line">        threshold(img_no_light, img_thr, 140, 255, THRESH_BINARY_INV);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 进行形态学操作去除边缘不规则噪点</div><div class="line">    cv::Mat closed;</div><div class="line">    cv::Mat element5(5 ,5, CV_8U, cv::Scalar(1));</div><div class="line">    cv::morphologyEx(img_thr, closed,   // input and output</div><div class="line">                     cv::MORPH_CLOSE,  // operator code</div><div class="line">                     element5);  // structuring element</div><div class="line"></div><div class="line">    // Opening</div><div class="line">    cv::Mat opening;</div><div class="line">    cv::morphologyEx(closed, opening,   // input and output</div><div class="line">                     cv::MORPH_OPEN,  // operator code</div><div class="line">                     element5);  // structuring element</div><div class="line"></div><div class="line"></div><div class="line">    imshow("img_thr_closed-opening", opening);</div><div class="line"></div><div class="line">    return opening;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static Scalar randomColor( RNG&amp; rng )</div><div class="line">&#123;</div><div class="line">    int icolor = (unsigned) rng;</div><div class="line">    return Scalar( icolor&amp;255, (icolor&gt;&gt;8)&amp;255, (icolor&gt;&gt;16)&amp;255 );</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 连通区域算法</div><div class="line">void ConnectedComponents(Mat img)&#123;</div><div class="line">    // 使用连通区域分离符合要求部分图像Mat标签</div><div class="line">    Mat labels;</div><div class="line">    int num_objects = connectedComponents(img, labels);</div><div class="line">    // 检查检测到的目标数目</div><div class="line">    if(num_objects&lt;2)&#123;</div><div class="line">        cout&lt;&lt;"No objects detected"&lt;&lt;endl;</div><div class="line">        return;</div><div class="line">    &#125; else&#123;</div><div class="line">        cout&lt;&lt;"Number of objects detected: "&lt;&lt; num_objects-1&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">    // 创建彩色目标的输出图像</div><div class="line">    Mat output=Mat::zeros(img.rows, img.cols, CV_8UC3);</div><div class="line">    RNG rng(0xFFFFFFFF);</div><div class="line">    for(int i=1; i&lt;num_objects; i++)&#123;</div><div class="line">        Mat mask = labels==i;</div><div class="line">        output.setTo(randomColor(rng), mask);</div><div class="line">    &#125;</div><div class="line">    imshow("Result", output);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 连通区域算法</div><div class="line">void ConnectedComponentsStats(Mat img)&#123;</div><div class="line">    // 连通区域统计信息</div><div class="line">    Mat labels, stats, centroids;</div><div class="line">    int num_objects = connectedComponentsWithStats(img, labels, stats, centroids);</div><div class="line"></div><div class="line">    // 检测物体数目判别</div><div class="line">    if(num_objects&lt;2)&#123;</div><div class="line">        cout&lt;&lt;"No objects detedcted"&lt;&lt;endl;</div><div class="line">        return;</div><div class="line">    &#125; else&#123;</div><div class="line">        cout&lt;&lt;"Number of objects detected: "&lt;&lt;num_objects-1&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">    // 创建彩色对象的输出图像并显示区域</div><div class="line">    Mat output = Mat::zeros(img.rows, img.cols, CV_8UC3);</div><div class="line">    RNG rng(0xFFFFFFFF);</div><div class="line"></div><div class="line">    for(int i=1; i&lt;num_objects; i++)&#123;</div><div class="line">        cout&lt;&lt;"Object "&lt;&lt;i&lt;&lt;" with pos: "&lt;&lt;centroids.at&lt;Point2d&gt;(i)</div><div class="line">                                         &lt;&lt;" with area "&lt;&lt;stats.at&lt;int&gt;(i, CC_STAT_AREA)&lt;&lt;endl;</div><div class="line">        Mat mask = labels==i;</div><div class="line">        output.setTo(randomColor(rng), mask);</div><div class="line"></div><div class="line">        // 使用区域绘制文本</div><div class="line">        stringstream ss;</div><div class="line">        ss&lt;&lt;"area: "&lt;&lt;stats.at&lt;int&gt;(i, CC_STAT_AREA);</div><div class="line"></div><div class="line">        putText(output, ss.str(), centroids.at&lt;Point2d&gt;(i), FONT_HERSHEY_SIMPLEX, 0.4, Scalar(255,255,255));</div><div class="line">    &#125;</div><div class="line">    imshow("Result", output);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//  边缘检测算法</div><div class="line">void FindContoursBasic(Mat img)&#123;</div><div class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</div><div class="line">    findContours(img, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</div><div class="line">    Mat output = Mat::zeros(img.rows, img.cols, CV_8UC3);</div><div class="line">    // 检查检测到的对象的数目</div><div class="line">    if(contours.size() == 0)&#123;</div><div class="line">        cout&lt;&lt;"No objects detected"&lt;&lt;endl;</div><div class="line">        return;</div><div class="line">    &#125; else&#123;</div><div class="line">        cout&lt;&lt;"Number of objects detected: "&lt;&lt;contours.size()&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    RNG rng(0xFFFFFFFF);</div><div class="line">    for(int i=0;i&lt;contours.size();i++)&#123;</div><div class="line">        drawContours(output, contours, i, randomColor(rng));</div><div class="line">    &#125;</div><div class="line">    imshow("Contours", output);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    Mat img = imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/industry.pgm", IMREAD_GRAYSCALE);</div><div class="line">    imshow("Original Image", img);</div><div class="line"></div><div class="line">    Mat pattern = imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/light.pgm",0);</div><div class="line">    imshow("Back", pattern);</div><div class="line">//    Mat pattern = calculateLightPattern(img);</div><div class="line">    Mat img_no_light = removeLight(img, pattern, 1);</div><div class="line">    imshow("removelight--minus", img_no_light);</div><div class="line"></div><div class="line">    Mat img_thr = getBinary(img_no_light,1);</div><div class="line">//    ConnectedComponents(img_thr);</div><div class="line">    ConnectedComponentsStats(img_thr);</div><div class="line"></div><div class="line">    FindContoursBasic(img_thr);</div><div class="line">    waitKey(0);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Number of objects detected: 4<br>Object 1 with pos: [160.203, 143.822] with area 2315<br>Object 2 with pos: [263.535, 131.804] with area 1820<br>Object 3 with pos: [52.7045, 143.926] with area 1171<br>Object 4 with pos: [68.233, 202.819] with area 1618<br>Number of objects detected: 4</p>
</blockquote>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170518/Selection_051801.png" alt=""></p>
<h4 id="待改进的地方"><a href="#待改进的地方" class="headerlink" title="待改进的地方"></a>待改进的地方</h4><p>在没有背景色图的时候，我们直接通过大尺寸核矩阵模糊化得到的效果很差，得到的objects大于50左右，后面自己加上了形态学的操作，降到了5个，但是还是多了一个。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十九：Morphalogical Operations]]></title>
      <url>/2017/05/15/Morphalogical-Operations/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>一些图像的形态学操作，主要包括Erosion, Dilation, Closing 和 Opening.</p>
<p>它们之间有一些巧妙的关系：</p>
<p>Erosion and Dilation:</p>
<blockquote>
<p>The erosion of an image is equivalent to the complement of the<br>dilation of the complement image<br>The dilation of an image is equivalent to the complement of the<br>erosion of the complement image</p>
</blockquote>
<p>Closing and Opening:</p>
<blockquote>
<p>The opening and closing filters are simply defined in terms of the basic<br>erosion and dilation operations. Closing is defined as the erosion of the<br>dilation of an image. Opening is defined as the dilation of the erosion of<br>an image.</p>
</blockquote>
<p>最后注意下Idempotent：</p>
<blockquote>
<p>Note that applying the same opening (and similarly the closing) operator on an image several times has no effect. Indeed, as the holes have been filled by the first opening filter, an additional application of the same filter will not produce any other changes to the image. In mathematical terms, these operators are said to be idempotent.</p>
</blockquote>
<p>对这些概念的理解可以参考Youtube的一套视频，讲的挺好(自备梯子:-)：</p>
<p><a href="https://www.youtube.com/watch?v=BldfktFW1bQ" target="_blank" rel="external">传送门</a></p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Erosion-and-Dilation"><a href="#Erosion-and-Dilation" class="headerlink" title="Erosion and Dilation"></a>Erosion and Dilation</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;highgui.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line"></div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/binary.bmp");</div><div class="line">    cv::imshow("Original image", image);</div><div class="line">    // Erode the image</div><div class="line">    // with the default 3x3 structuring element (SE)</div><div class="line">    cv::Mat eroded;  // the destination image</div><div class="line">    cv::erode(image, eroded, cv::Mat());</div><div class="line">    cv::imshow("eroded", eroded);</div><div class="line"></div><div class="line">    // Erode the image with a larger SE</div><div class="line">    // create a 7x7 mat with containing all ls</div><div class="line">    cv::Mat element(7, 7, CV_8U, cv::Scalar(1));</div><div class="line">    // erode the image with that SE</div><div class="line">    cv::erode(image, eroded, element);</div><div class="line">    cv::imshow("Eroded by 7x7 elements", eroded);</div><div class="line"></div><div class="line">    // Erode the image 3 times</div><div class="line">    cv::erode(image, eroded, cv::Mat(), cv::Point(-1,-1), 3);</div><div class="line">    cv::imshow("eroded 3 times", eroded);</div><div class="line"></div><div class="line">    // Dilate the image</div><div class="line">    cv:: Mat dilate;</div><div class="line">    cv::dilate(image, dilate, cv::Mat());</div><div class="line">    cv::imshow("dilate", dilate);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170515/Selection_051502.png" alt=""></p>
<h5 id="Closing-and-Opening"><a href="#Closing-and-Opening" class="headerlink" title="Closing and Opening"></a>Closing and Opening</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;highgui.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/binary.bmp");</div><div class="line"></div><div class="line">    cv::imshow("Original image", image);</div><div class="line">    // Close the image</div><div class="line">    cv::Mat element5(5 ,5, CV_8U, cv::Scalar(1));</div><div class="line">    cv::Mat closed;</div><div class="line">    cv::morphologyEx(image, closed,   // input and output</div><div class="line">                     cv::MORPH_CLOSE,  // operator code</div><div class="line">                     element5);  // structuring element</div><div class="line"></div><div class="line">    cv::imshow("Cloed", closed);</div><div class="line"></div><div class="line">    // Opening the image</div><div class="line">    cv::Mat opening;</div><div class="line">    cv::morphologyEx(image, opening,   // input and output</div><div class="line">                     cv::MORPH_OPEN,  // operator code</div><div class="line">                     element5);  // structuring element</div><div class="line">    cv::imshow("opening", opening);</div><div class="line"></div><div class="line"></div><div class="line">    // opening first, then closing</div><div class="line">    cv::Mat open_closed;</div><div class="line">    cv::morphologyEx(image, open_closed, cv::MORPH_OPEN, element5);</div><div class="line">    cv::morphologyEx(open_closed, open_closed, cv::MORPH_CLOSE, element5);</div><div class="line">    cv::imshow("open_closed", open_closed);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170515/Selection_051503.png" alt=""></p>
<h5 id="morphological-operators-on-gray-level-images"><a href="#morphological-operators-on-gray-level-images" class="headerlink" title="morphological operators on gray-level images"></a>morphological operators on gray-level images</h5><p>关于灰度图的形态学操作：</p>
<blockquote>
<p>A good way to understand the effect of morphological operators on a<br>gray-level image is to consider an image as a topological relief in which<br>the gray levels correspond to elevation (or altitude). </p>
</blockquote>
<p>图像梯度与顶帽变换：</p>
<blockquote>
<p>morphological gradient: extracting the edges of an image<br>top-hat transform:  extract local small foreground objects </p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;highgui.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png", 0);</div><div class="line">    cv::imshow("Original image", image);</div><div class="line"></div><div class="line">    // Get the gradient image using a 3x3 structuring element</div><div class="line">    cv::Mat result;</div><div class="line">    cv::morphologyEx(image, result, cv::MORPH_GRADIENT, cv::Mat());</div><div class="line">    cv::imshow("gradient", result);</div><div class="line"></div><div class="line">    // Apply the black top-hat transform using 7x7 structuring element</div><div class="line">    image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/book.png", 0);</div><div class="line">    cv::Mat element7(7, 7, CV_8U, cv::Scalar(1));</div><div class="line">    cv::morphologyEx(image, result, cv::MORPH_BLACKHAT, element7);</div><div class="line">    cv::imshow("black hat", result);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/1705/Selection_052401.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV计算结果保存--YAML/XML]]></title>
      <url>/2017/05/15/OpenCV%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C%E4%BF%9D%E5%AD%98-YAML/</url>
      <content type="html"><![CDATA[<p>在图像的操作与识别等过程中，我们很多时候要保存一些计算结果，方便后续的使用。OpenCV为我们提供了XML/YAML持久化层来完成这个任务。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 写入操作</span></div><div class="line">    <span class="function">FileStorage <span class="title">fs</span><span class="params">(<span class="string">"Test.yml"</span>, FileStorage::WRITE)</span></span>;</div><div class="line">    <span class="comment">// save as int</span></div><div class="line">    <span class="keyword">int</span> fps = <span class="number">5</span>;</div><div class="line">    fs&lt;&lt;<span class="string">"fps"</span>&lt;&lt;fps;</div><div class="line"></div><div class="line">    <span class="comment">// mat</span></div><div class="line">    Mat m1 = Mat::eye(<span class="number">2</span>, <span class="number">3</span>, CV_32F);</div><div class="line">    Mat m2 = Mat::ones(<span class="number">3</span>, <span class="number">2</span>, CV_32F);</div><div class="line">    Mat result = (m1+<span class="number">1</span>).mul(m1+<span class="number">3</span>);</div><div class="line">    fs&lt;&lt;<span class="string">"Result"</span>&lt;&lt;result;</div><div class="line"></div><div class="line">    fs.release();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 读取操作</span></div><div class="line">    <span class="function">FileStorage <span class="title">fs_r</span><span class="params">(<span class="string">"Test.yml"</span>, FileStorage::READ)</span></span>;</div><div class="line"></div><div class="line">    Mat r;</div><div class="line">    fs_r[<span class="string">"Result"</span>] &gt;&gt; r;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; r&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    fs_r.release();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>[8, 3, 3;<br> 3, 8, 3]</p>
</blockquote>
<p>此时，查看Test.YML文件：</p>
<pre><code>%YAML:1.0
---
fps: 5
Result: !!opencv-matrix
   rows: 2
   cols: 3
   dt: f
   data: [ 8., 3., 3., 3., 8., 3. ]
</code></pre><p>同样地，我们将上面文件的拓展名改为.xml，再次运行我们可以得到Test.xml文件：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;opencv_storage&gt;
&lt;fps&gt;5&lt;/fps&gt;
&lt;Result type_id=&quot;opencv-matrix&quot;&gt;
  &lt;rows&gt;2&lt;/rows&gt;
  &lt;cols&gt;3&lt;/cols&gt;
  &lt;dt&gt;f&lt;/dt&gt;
  &lt;data&gt;
    8. 3. 3. 3. 8. 3.&lt;/data&gt;&lt;/Result&gt;
&lt;/opencv_storage&gt;
</code></pre><p>参考：<em>OpenCV By Example</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十八：Visual tracking using histograms]]></title>
      <url>/2017/05/15/Visual-tracking-using-histograms/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>在之前，我们介绍了Intergral Image， 还有通过mean shift算法搜索物体。这里，来学习下利用Intergral Image，通过比较histogram来追踪物体。</p>
<p>代码里面比较难理解的就是先将灰度图转化为多通道二进制图的部分。关于这里我也迷惑好久，再次仔细读书，其实书上已经写的比较清楚了：</p>
<blockquote>
<p>The cv::integral function also works for multichannel images. You can take advantage of this fact to compute histograms of image subregions using integral images. You simply need to convert your image into a multichannel image made of binary planes; each of these planes is associated to a bin of your histogram and shows you which pixels have a value that falls into this bin.</p>
</blockquote>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include "grayhistogram.h"</div><div class="line">#include "integral.h"</div><div class="line">using namespace std;</div><div class="line"></div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    // Open image</div><div class="line">    cv::Mat image= cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/bike55.bmp",0);</div><div class="line">    // define image roi</div><div class="line">    int xo=97, yo=112;</div><div class="line">    int width=25, height=30;</div><div class="line">    cv::Mat roi(image,cv::Rect(xo,yo,width,height));</div><div class="line"></div><div class="line">    // compute sum</div><div class="line">    // returns a Scalar to work with multi-channel images</div><div class="line">    cv::Scalar sum= cv::sum(roi);</div><div class="line">    std::cout &lt;&lt; sum[0] &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    // compute integral image</div><div class="line">    cv::Mat integralImage;</div><div class="line">    cv::integral(image,integralImage,CV_32S);</div><div class="line">    // get sum over an area using three additions/subtractions</div><div class="line">    int sumInt= integralImage.at&lt;int&gt;(yo+height,xo+width)</div><div class="line">                -integralImage.at&lt;int&gt;(yo+height,xo)</div><div class="line">                -integralImage.at&lt;int&gt;(yo,xo+width)</div><div class="line">                +integralImage.at&lt;int&gt;(yo,xo);</div><div class="line">    std::cout &lt;&lt; sumInt &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    // histogram of 16 bins</div><div class="line">    Histogram1D h;</div><div class="line">    h.setNBins(16);</div><div class="line">    // compute histogram over image roi</div><div class="line">    cv::Mat refHistogram= h.getHistogram(roi);</div><div class="line"></div><div class="line">    cv::imshow("Reference Histogram",h.getHistogramImage(roi,16));</div><div class="line"></div><div class="line">    // first create 16-plane binary image</div><div class="line">    cv::Mat planes;</div><div class="line">    convertToBinaryPlanes(image,planes,16);</div><div class="line">    // then compute integral image</div><div class="line">    IntegralImage&lt;float,16&gt; intHisto(planes);</div><div class="line"></div><div class="line"></div><div class="line">    // for testing compute a histogram of 16 bins with integral image</div><div class="line">    cv::Vec&lt;float,16&gt; histogram= intHisto(xo,yo,width,height);</div><div class="line">//    std::cout&lt;&lt;" integral image histogram "&lt;&lt; histogram &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    cv::Mat im= h.getImageOfHistogram(cv::Mat(histogram),16);</div><div class="line">    cv::imshow("IM", im);</div><div class="line"></div><div class="line"></div><div class="line">    // search in second image</div><div class="line">    cv::Mat secondImage= cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/bike65.bmp",0);</div><div class="line">    if (!secondImage.data)</div><div class="line">        return 0;</div><div class="line"></div><div class="line">    // first create 16-plane binary image</div><div class="line">    convertToBinaryPlanes(secondImage,planes,16);</div><div class="line"></div><div class="line">    // then compute integral image</div><div class="line">    IntegralImage&lt;float,16&gt; intHistogram(planes);</div><div class="line"></div><div class="line">    // compute histogram of 16 bins with integral image (testing)</div><div class="line">    histogram= intHistogram(135,114,width,height);</div><div class="line"></div><div class="line">    cv::Mat im2= h.getImageOfHistogram(cv::Mat(histogram),16);</div><div class="line"></div><div class="line">    std::cout &lt;&lt; "Distance= " &lt;&lt; cv::compareHist(refHistogram,histogram, cv::HISTCMP_INTERSECT) &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    double maxSimilarity=0.0;</div><div class="line">    int xbest, ybest;</div><div class="line">    // loop over a horizontal strip around girl location in initial image</div><div class="line">    for (int y=110; y&lt;120; y++) &#123;</div><div class="line">        for (int x=0; x&lt;secondImage.cols-width; x++) &#123;</div><div class="line"></div><div class="line"></div><div class="line">            // compute histogram of 16 bins using integral image</div><div class="line">            histogram= intHistogram(x,y,width,height);</div><div class="line">            // compute distance with reference histogram</div><div class="line">            double distance= cv::compareHist(refHistogram,histogram, cv::HISTCMP_INTERSECT);</div><div class="line">            // find position of most similar histogram</div><div class="line">            if (distance&gt;maxSimilarity) &#123;</div><div class="line"></div><div class="line">                xbest= x;</div><div class="line">                ybest= y;</div><div class="line">                maxSimilarity= distance;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            std::cout &lt;&lt; "Distance(" &lt;&lt; x &lt;&lt; "," &lt;&lt; y &lt;&lt; ")=" &lt;&lt; distance &lt;&lt; std::endl;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    std::cout &lt;&lt; "Best solution= (" &lt;&lt; xbest &lt;&lt; "," &lt;&lt; ybest &lt;&lt; ")=" &lt;&lt; maxSimilarity &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    // draw a rectangle around target object</div><div class="line">    cv::rectangle(image,cv::Rect(xo,yo,width,height),0);</div><div class="line">    cv::namedWindow("Initial Image");</div><div class="line">    cv::imshow("Initial Image",image);</div><div class="line"></div><div class="line">    cv::namedWindow("New Image");</div><div class="line">    cv::imshow("New Image",secondImage);</div><div class="line"></div><div class="line">    // draw rectangle at best location</div><div class="line">    cv::rectangle(secondImage,cv::Rect(xbest,ybest,width,height),0);</div><div class="line">    // draw rectangle around search area</div><div class="line">    cv::rectangle(secondImage,cv::Rect(0,110,secondImage.cols,height+10),255);</div><div class="line">    cv::namedWindow("Object location");</div><div class="line">    cv::imshow("Object location",secondImage);</div><div class="line"></div><div class="line">    cv::waitKey(0);</div><div class="line"></div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170515/Selection_051501.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十七：Adaptive thresholding]]></title>
      <url>/2017/05/15/Adaptive-thresholding/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>在介绍Adaptive thresholding之前，让我们来看看Integral Image的概念：</p>
<blockquote>
<p>Integral images have been introduced as an efficient way of summing<br>pixels in image regions of interest. They are widely used in applications<br>that involve, for example, computations over sliding windows at multiple<br>scales.</p>
</blockquote>
<p>可以看到，Integral Image是避免重复计算多个ROI像素值和的一种方法。接下来，我们实现的就是简单的矩形ROI，使得Integral Image上的每一个点的值为：该点和图像左上角形成的矩形区域像素值之和。</p>
<p>而Adaptive thresholding 是相对于fixed thresholding而言的。fixed就是我们之前常用的固定阀值，而Adaptive的阀值是由一个固定阀值和一个变化的均值决定的，这个均值，就是某像素点周围一些像素点的均值。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="integral-h"><a href="#integral-h" class="headerlink" title="integral.h"></a>integral.h</h5><p>实际上，OpenCV已经提供了计算Integral Image的函数<code>cv::integral</code>，但是书上也自己实现了一边，我们这里也贴上。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined IINTEGRAL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IINTEGRAL</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</div><div class="line"><span class="keyword">class</span> IntegralImage &#123;</div><div class="line"></div><div class="line">      cv::Mat integralImage;</div><div class="line"></div><div class="line">  <span class="keyword">public</span>:</div><div class="line"></div><div class="line">      IntegralImage(cv::Mat image) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// (costly) computation of the integral image</span></div><div class="line">        cv::integral(image,integralImage,cv::DataType&lt;T&gt;::type);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// compute sum over sub-regions of any size from 4 pixel access</span></div><div class="line">      cv::Vec&lt;T,N&gt; <span class="keyword">operator</span>()(<span class="keyword">int</span> xo, <span class="keyword">int</span> yo, <span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123;</div><div class="line"></div><div class="line">          <span class="comment">// window at (xo,yo) of size width by height</span></div><div class="line">          <span class="keyword">return</span> (integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(yo+height,xo+width)</div><div class="line">                  -integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(yo+height,xo)</div><div class="line">                  -integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(yo,xo+width)</div><div class="line">                  +integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(yo,xo));</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// compute sum over sub-regions of any size from 4 pixel access</span></div><div class="line">      cv::Vec&lt;T,N&gt; <span class="keyword">operator</span>()(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius) &#123;</div><div class="line"></div><div class="line">          <span class="comment">// square window centered at (x,y) of size 2*radius+1</span></div><div class="line">          <span class="keyword">return</span> (integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(y+radius+<span class="number">1</span>,x+radius+<span class="number">1</span>)</div><div class="line">                  -integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(y+radius+<span class="number">1</span>,x-radius)</div><div class="line">                  -integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(y-radius,x+radius+<span class="number">1</span>)</div><div class="line">                  +integralImage.at&lt;cv::Vec&lt;T,N&gt; &gt;(y-radius,x-radius));</div><div class="line">      &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// convert to a multi-channel image made of binary planes</span></div><div class="line"><span class="comment">// nPlanes must be a power of 2</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">convertToBinaryPlanes</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; input, cv::Mat&amp; output, <span class="keyword">int</span> nPlanes)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// number of bits to mask out</span></div><div class="line">        <span class="keyword">int</span> n= <span class="number">8</span>-<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(nPlanes))/<span class="built_in">log</span>(<span class="number">2.0</span>));</div><div class="line">        <span class="comment">// mask used to eliminate least significant bits</span></div><div class="line">        uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. for div=16, mask= 0xF0</span></div><div class="line"></div><div class="line">        <span class="comment">// create a vector of 16 binary images</span></div><div class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt; planes;</div><div class="line">        <span class="comment">// reduce to nBins bins by eliminating least significant bits</span></div><div class="line">        cv::Mat reduced= input&amp;mask;</div><div class="line"></div><div class="line">        <span class="comment">// compute each binary image plane</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nPlanes; i++) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 1 for each pixel equals to i&lt;&lt;shift</span></div><div class="line">            planes.push_back((reduced==(i&lt;&lt;n))&amp;<span class="number">0x1</span>);  <span class="comment">// i&lt;&lt;n  --&gt; 16, 32, 48, ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// create multi-channel image</span></div><div class="line">        cv::merge(planes,output);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h5><p>这里介绍了，OpenCV自带的fixed thresholding， Adaptive thresholding, boxFilter的用法，同时运用Integral Image重新实现了一遍Adaptive thresholding.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;highgui.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"integral.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/book.png"</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// display original image</span></div><div class="line">    cv::namedWindow(<span class="string">"Original Image"</span>);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// using a fixed threshold</span></div><div class="line">    cv::Mat binaryFixed;</div><div class="line">    cv::Mat binaryAdaptive;</div><div class="line">    cv::threshold(image, binaryFixed,<span class="number">70</span>,<span class="number">255</span>,cv::THRESH_BINARY);</div><div class="line"></div><div class="line">    <span class="comment">//using as adaptive threshold</span></div><div class="line">    <span class="keyword">int</span> blockSize=<span class="number">21</span>;  <span class="comment">//size of the neighborhood</span></div><div class="line">    <span class="keyword">int</span> threshold=<span class="number">10</span>;  <span class="comment">// pixel will be compare to (mean-threshold)</span></div><div class="line"></div><div class="line">    int64 time;</div><div class="line">    time = cv::getTickCount();</div><div class="line">    cv::adaptiveThreshold(</div><div class="line">            image,  <span class="comment">//input image</span></div><div class="line">            binaryAdaptive, <span class="comment">// output binary image</span></div><div class="line">            <span class="number">255</span>,  <span class="comment">//max value for output</span></div><div class="line">            cv::ADAPTIVE_THRESH_GAUSSIAN_C, <span class="comment">// adaptive method</span></div><div class="line">            cv::THRESH_BINARY, <span class="comment">//threshold type</span></div><div class="line">            blockSize,</div><div class="line">            threshold</div><div class="line">    );</div><div class="line"></div><div class="line"></div><div class="line">    time = cv::getTickCount() - time;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"time (adaptiveThreshold) =  "</span>&lt;&lt;time&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// compute integral image</span></div><div class="line">    IntegralImage&lt;<span class="keyword">int</span>, <span class="number">1</span>&gt;integral(image);</div><div class="line"></div><div class="line">    <span class="comment">// test integral image</span></div><div class="line"><span class="comment">//    cout&lt;&lt;"sum = "&lt;&lt;integral(18, 45,30, 50)&lt;&lt;endl;</span></div><div class="line"><span class="comment">//    cv::Mat test(image, cv::Rect(18,45,30,50));</span></div><div class="line"><span class="comment">//    cv::Scalar t = cv::sum(test);</span></div><div class="line"><span class="comment">//    cout&lt;&lt;"sum test = "&lt;&lt;t[0]&lt;&lt;endl;</span></div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Fixed Threshold"</span>);</div><div class="line">    cv::imshow(<span class="string">"Fixed Threshold"</span>, binaryFixed);</div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Adaptive Threshold"</span>);</div><div class="line">    cv::imshow(<span class="string">"Adaptive Threshold"</span>, binaryAdaptive);</div><div class="line"></div><div class="line">    cv::Mat binary = image.clone();</div><div class="line">    time = cv::getTickCount();</div><div class="line">    <span class="keyword">int</span> nl = binary.rows; <span class="comment">// number of lines</span></div><div class="line">    <span class="keyword">int</span> nc = binary.cols; <span class="comment">// total number of elements per line</span></div><div class="line"></div><div class="line">    <span class="comment">// compute integral image</span></div><div class="line">    cv::Mat iimage;</div><div class="line">    cv::integral(image, iimage, CV_32S);</div><div class="line"></div><div class="line">    <span class="comment">//for each row</span></div><div class="line">    <span class="keyword">int</span> halfSize = blockSize/<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=halfSize; j&lt;nl - halfSize <span class="number">-1</span>;j++ )&#123;</div><div class="line">        <span class="comment">// get the address of row j</span></div><div class="line">        uchar* data = binary.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">int</span>* idata1 = iimage.ptr&lt;<span class="keyword">int</span>&gt;(j-halfSize); <span class="comment">// 滑动窗口上边</span></div><div class="line">        <span class="keyword">int</span>* idata2 = iimage.ptr&lt;<span class="keyword">int</span>&gt;(j+halfSize+<span class="number">1</span>); <span class="comment">// 滑动窗口下边</span></div><div class="line"></div><div class="line">        <span class="comment">//for pixel of a line</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=halfSize; i&lt;nc-halfSize<span class="number">-1</span>;i++)&#123;</div><div class="line">            <span class="comment">//compute pix_mean</span></div><div class="line">            <span class="keyword">int</span> pix_mean = (idata2[i+halfSize+<span class="number">1</span>]-idata2[i-halfSize]-idata1[i+halfSize+<span class="number">1</span>]</div><div class="line">            +idata1[i-halfSize])/(blockSize*blockSize);</div><div class="line"></div><div class="line">            <span class="comment">//apply adaptive threshold</span></div><div class="line">            <span class="keyword">if</span>(data[i]&lt;(pix_mean-threshold))</div><div class="line">                data[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                data[i]  =<span class="number">255</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// add white border</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;halfSize;j++)&#123;</div><div class="line">        uchar *data = binary.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;binary.cols;i++)</div><div class="line">            data[i] = <span class="number">255</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=binary.rows-halfSize<span class="number">-1</span>;j&lt;binary.rows;j++)&#123;</div><div class="line">        uchar * data = binary.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;binary.cols;i++)&#123;</div><div class="line">            data[i] = <span class="number">255</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=halfSize;j&lt;nl-halfSize<span class="number">-1</span>;j++)&#123;</div><div class="line">        uchar* data = binary.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;halfSize;i++)</div><div class="line">            data[i] = <span class="number">255</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=binary.cols-halfSize<span class="number">-1</span>;i&lt;binary.cols;i++)</div><div class="line">            data[i] = <span class="number">255</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    time = cv::getTickCount()-time;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"time integral= "</span>&lt;&lt;time&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Adaptive Threshold (integral)"</span>);</div><div class="line">    cv::imshow(<span class="string">"Adaptive Threshold (integral)"</span>, binary);</div><div class="line"></div><div class="line">    <span class="comment">// adaptive threshold using image operators</span></div><div class="line">    time = cv::getTickCount();</div><div class="line">    cv::Mat filtered;</div><div class="line">    cv::Mat binaryFiltered;</div><div class="line">    <span class="comment">// box filter compute avg of pixels over a rectangle region</span></div><div class="line">    cv::boxFilter(image, filtered, CV_8U, cv::Size(blockSize,blockSize));</div><div class="line">    <span class="comment">// check if pixel greater than (mean+shreshold)</span></div><div class="line">    binaryFiltered = image&gt;=(filtered-threshold);</div><div class="line">    time = cv::getTickCount()-time;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"time filtered= "</span>&lt;&lt;time&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Adaptive filtered"</span>);</div><div class="line">    cv::imshow(<span class="string">"Adaptive filtered"</span>, binaryFiltered);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170515/AdF.png" alt=""></p>
<blockquote>
<p>time (adaptiveThreshold) =  2305893<br>time integral= 7118664<br>time filtered= 1179760</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Queue]]></title>
      <url>/2017/05/11/Queue/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>前面学习的栈是后进先出[LIFO]，与之相对的是队列的先进先出[FIFO]。这里我们通过两种方式实现Queue,分别是Array和List。在Array实现的时候要注意，实际上，整个过程都是在一维的数组上操作的，但是，为了在enqueue[插入]和dequeue[弹出]数据的时候有效地利用空间，我们将其看作一个圆环，这样，前面dequeue留下的空间，还可以共之后enqueue使用。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Array实现–genArrayQueue-h"><a href="#Array实现–genArrayQueue-h" class="headerlink" title="Array实现–genArrayQueue.h"></a>Array实现–genArrayQueue.h</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-5-10.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_GENARRAYQUEUE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_GENARRAYQUEUE_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">int</span> size=<span class="number">100</span>&gt;</div><div class="line"><span class="keyword">class</span> ArrayQueue&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> first, last;</div><div class="line">    T storage[size];</div><div class="line">    <span class="keyword">int</span> total_num=<span class="number">0</span>;  <span class="comment">// 用于计数，方便打印</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    ArrayQueue()&#123;</div><div class="line">        first = last = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">dequeue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> first==<span class="number">0</span> &amp;&amp; last==size<span class="number">-1</span> || first == last+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> first == <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 由于dequeue只是移动首部的位置，并不是真正的删除，所以打印的时候不能直接循环打印</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt; total_num+first; i++) &#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;storage[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">int</span> size&gt;</div><div class="line"><span class="keyword">void</span> ArrayQueue&lt;T,size&gt;::enqueue(T el) &#123;</div><div class="line">    total_num += <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(!isFull())&#123;</div><div class="line">        <span class="keyword">if</span>(last==size<span class="number">-1</span> || last == <span class="number">-1</span>)&#123;</div><div class="line">            storage[<span class="number">0</span>] = el;</div><div class="line">            last = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(first == <span class="number">-1</span>)</div><div class="line">                first = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> storage[++last] = el;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Full queue.\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">int</span> size&gt;</div><div class="line">T ArrayQueue&lt;T, size&gt;::dequeue() &#123;</div><div class="line">    total_num -= <span class="number">1</span>;</div><div class="line">    T tmp;</div><div class="line">    tmp = storage[first];</div><div class="line">    <span class="keyword">if</span>(first == last)</div><div class="line">        last = first = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(first == size<span class="number">-1</span>)</div><div class="line">        first = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> first++;</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_GENARRAYQUEUE_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"genArrayQueue.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ArrayQueue&lt;<span class="keyword">int</span>&gt; AQ;</div><div class="line">    AQ.enqueue(<span class="number">2</span>);</div><div class="line">    AQ.enqueue(<span class="number">3</span>);</div><div class="line">    AQ.enqueue(<span class="number">4</span>);</div><div class="line"></div><div class="line">    AQ.dequeue();</div><div class="line"></div><div class="line">    AQ.printQueue();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>3 4 </p>
</blockquote>
<h5 id="List实现–genQueue-h"><a href="#List实现–genQueue-h" class="headerlink" title="List实现–genQueue.h"></a>List实现–genQueue.h</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-5-11.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_GENQUEUE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_GENQUEUE_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Queue&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">list</span>&lt;T&gt;lst;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Queue()&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">        lst.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lst.empty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> lst.front();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">dequeue</span><span class="params">()</span></span>&#123;</div><div class="line">        T el = lst.front();</div><div class="line">        lst.pop_front();</div><div class="line">        <span class="keyword">return</span> el;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">const</span> T&amp; el)</span></span>&#123;</div><div class="line">        lst.push_back(el);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printListQueue</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">typename</span> <span class="built_in">list</span>&lt;T&gt;::iterator i = lst.begin(); i != lst.end(); i++)&#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*i&lt;&lt;<span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_GENQUEUE_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"genQueue.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Queue&lt;<span class="keyword">int</span>&gt; AQ;</div><div class="line">    AQ.enqueue(<span class="number">2</span>);</div><div class="line">    AQ.enqueue(<span class="number">3</span>);</div><div class="line">    AQ.enqueue(<span class="number">4</span>);</div><div class="line"></div><div class="line">    AQ.dequeue();</div><div class="line"></div><div class="line">    AQ.printListQueue();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>3 4 </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Stacks]]></title>
      <url>/2017/05/10/Stacks/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>继前面单双链表之后，再来学习下Stacks.教材还是参考<em>Data Structure and Algorithms in c++</em>。下面是普通栈的实现和list在栈的应用。最后，实现了书中提到的大数的相加算法。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h5><h6 id="genStack-h"><a href="#genStack-h" class="headerlink" title="genStack.h"></a>genStack.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-5-10.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_GENSTACK_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_GENSTACK_H</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">int</span> capacity=<span class="number">30</span>&gt;</div><div class="line"><span class="keyword">class</span> Stack&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;T&gt;pool;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Stack()&#123;</div><div class="line">        pool.reserve(capacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">        pool.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !pool.back();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T&amp; <span class="title">topEl</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> pool.back();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(pool.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            T el = pool.back();</div><div class="line">            pool.pop_back();</div><div class="line">            <span class="keyword">return</span> el;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; el)</span></span>&#123;</div><div class="line">        pool.push_back(el);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打印stack</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printstack</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Stack: \n"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;::iterator i = pool.end()<span class="number">-1</span>; i != pool.begin()<span class="number">-1</span>; i--)&#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*i&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取stack长度</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getsize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> pool.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_GENSTACK_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"genStack.h"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Stack&lt;<span class="keyword">int</span>&gt;S;</div><div class="line">    S.push(<span class="number">1</span>);</div><div class="line">    S.push(<span class="number">2</span>);</div><div class="line">    S.push(<span class="number">3</span>);</div><div class="line">    S.printstack();</div><div class="line"></div><div class="line">    S.pop();</div><div class="line">    S.printstack();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Stack:<br>3<br>2<br>1<br>Stack:<br>2<br>1</p>
</blockquote>
<h5 id="List-Stacks"><a href="#List-Stacks" class="headerlink" title="List Stacks"></a>List Stacks</h5><h6 id="genListStack-h"><a href="#genListStack-h" class="headerlink" title="genListStack.h"></a>genListStack.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-5-10.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_GENLISTSTACK_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_GENLISTSTACK_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> LLStack&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">list</span>&lt;T&gt;lst;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    LLStack()&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">        lst.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lst.empty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T&amp; <span class="title">topEl</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> lst.back();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">        T el = lst.back();</div><div class="line">        lst.pop_back();</div><div class="line">        <span class="keyword">return</span> el;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp;el)</span></span>&#123;</div><div class="line">        lst.push_back(el);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printLLStack</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">list</span>&lt;T&gt;reverse_lst = lst;</div><div class="line">        reverse_lst.reverse();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">typename</span> <span class="built_in">list</span>&lt;T&gt;::iterator i = reverse_lst.begin(); i != reverse_lst.end(); i++)&#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*i&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_GENLISTSTACK_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"genListStack.h"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">    LLStack&lt;<span class="keyword">int</span>&gt; lst;</div><div class="line"></div><div class="line">    lst.push(<span class="number">2</span>);</div><div class="line">    lst.push(<span class="number">3</span>);</div><div class="line"></div><div class="line">    lst.printLLStack();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>3<br>2</p>
</blockquote>
<h5 id="Application1-Big-numbers’-adding"><a href="#Application1-Big-numbers’-adding" class="headerlink" title="Application1: Big numbers’ adding"></a>Application1: Big numbers’ adding</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include "genStack.h"</div><div class="line">#include "genListStack.h"</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line"></div><div class="line">void pushStringToStack(Stack&lt;int&gt;&amp;num, string s)&#123;</div><div class="line">    for(int i=0; i&lt;s.length(); i++)&#123;</div><div class="line">        num.push(int(s[i])-48);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">void printvector(vector&lt;int&gt;v)&#123;</div><div class="line">    for (int i = 0; i &lt; v.size(); ++i) &#123;</div><div class="line">        cout&lt;&lt;v[i]&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">string getNumFromVector(vector&lt;int&gt;v)&#123;</div><div class="line">    string number_str;</div><div class="line">    for (int i = v.size()-1; i &gt;= 0; i--) &#123;</div><div class="line">        number_str += std::to_string(v[i]);</div><div class="line">    &#125;</div><div class="line">    return number_str;</div><div class="line">&#125;</div><div class="line"></div><div class="line">vector&lt;int&gt; bigNumPlus(string m, string n)&#123;</div><div class="line">    // 分别将字符串放入数组</div><div class="line">    Stack&lt;int&gt; num1, num2;</div><div class="line">    pushStringToStack(num1, m);</div><div class="line">    pushStringToStack(num2, n);</div><div class="line"></div><div class="line">    int max_len = max(num1.getsize(), num2.getsize());</div><div class="line">    vector&lt;int&gt; result;</div><div class="line"></div><div class="line">    bool next_plus_one = false;</div><div class="line"></div><div class="line">    for(int i=0; i&lt;max_len; i++)&#123;</div><div class="line">        int x1 = num1.pop();</div><div class="line">        int x2 = num2.pop();</div><div class="line">        cout&lt;&lt;x1&lt;&lt;"  "&lt;&lt;x2;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        int x12;</div><div class="line">        if(next_plus_one) x12 = x1 + x2 + 1;</div><div class="line">        else x12 = x1 + x2;</div><div class="line">        cout&lt;&lt;" "&lt;&lt;x12&lt;&lt;endl;</div><div class="line"></div><div class="line">        // 是否进位</div><div class="line">        if(x12 &gt;= 10)&#123;</div><div class="line">            next_plus_one = true;</div><div class="line">            x12 -= 10;</div><div class="line">        &#125;</div><div class="line">        else next_plus_one = false;  //重置</div><div class="line"></div><div class="line">        result.push_back(x12);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return result;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line"></div><div class="line">    string m("123456789"), n("12345678910");</div><div class="line">    vector&lt;int&gt; result = bigNumPlus(m, n);</div><div class="line"></div><div class="line">//    printvector(result);</div><div class="line">    string number_str = getNumFromVector(result);</div><div class="line">    cout&lt;&lt;number_str&lt;&lt;endl;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>9  0 9<br>8  1 9<br>7  9 16<br>6  8 15<br>5  7 13<br>4  6 11<br>3  5 9<br>2  4 6<br>1  3 4<br>0  2 2<br>0  1 1<br>12469135699</p>
</blockquote>
<h5 id="Application2-Reverse-the-string"><a href="#Application2-Reverse-the-string" class="headerlink" title="Application2:Reverse the string"></a>Application2:Reverse the string</h5><p>这里，我们介绍两种应用stack来反转字符串的方法，第一种借助stack（未用自己写的，用的STL）；第二种是通过两个变量来标记字符串的方法。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-5-26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// Time-complexity O(n)</span></div><div class="line"><span class="comment">// sapce-complexity O(n)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyReverseS</span><span class="params">(<span class="keyword">char</span> C[])</span></span>&#123;</div><div class="line">    <span class="comment">// get length</span></div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(C);</div><div class="line"></div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt;S;</div><div class="line">    <span class="comment">// push</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        S.push(C[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// pop</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        C[i] = S.top();</div><div class="line">        S.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Time-complexity O(n)</span></div><div class="line"><span class="comment">// sapce-complexity O(1)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyReverseS_plus</span><span class="params">(<span class="keyword">char</span> C[])</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="built_in">strlen</span>(C)<span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i, j; i&lt;=j; i++, j--)&#123;<span class="comment">// 这里终止条件不能为i!=j,在长度为偶数时会出错</span></div><div class="line">        <span class="keyword">char</span> temp = C[i];</div><div class="line">        C[i] = C[j];</div><div class="line">        C[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> MyStrting[<span class="number">50</span>];</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter a string: "</span>;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; MyStrting;</div><div class="line">    MyReverseS_plus(MyStrting);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Output = "</span>&lt;&lt;MyStrting&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>运行：</p>
<blockquote>
<p>Enter a string: datahonoe<br>Output = eonohatad</p>
</blockquote>
<p>同样地，我们也可以使用stack反转一个linked list.</p>
<h5 id="Application3-check-for-balanced-parentheses"><a href="#Application3-check-for-balanced-parentheses" class="headerlink" title="Application3: check for balanced parentheses"></a>Application3: check for balanced parentheses</h5><p>我们也可以用stack写一个检查括号是否平衡的程序：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-5-26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// 是不是左括号</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkclosing</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> c==<span class="string">'('</span> or c==<span class="string">'['</span> or c==<span class="string">'&#123;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 是不是右括号</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkenclosing</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> c==<span class="string">')'</span> or c==<span class="string">']'</span> or c==<span class="string">'&#125;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 是否匹配</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Match</span><span class="params">(<span class="keyword">char</span> c1, <span class="keyword">char</span> c2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (c1==<span class="string">'('</span> &amp;&amp; c2== <span class="string">')'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c1==<span class="string">'['</span> &amp;&amp; c2== <span class="string">']'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c1==<span class="string">'&#123;'</span> &amp;&amp; c2== <span class="string">'&#125;'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 是否平衡</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">CheckBalance</span><span class="params">(<span class="keyword">char</span> C[])</span></span>&#123;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt;S;</div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(C);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (checkclosing(C[i])) &#123;</div><div class="line">            S.push(C[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (checkenclosing(C[i]))&#123;</div><div class="line">            <span class="keyword">if</span>(S.empty() || !Match(S.top(), C[i])) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> S.pop();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (S.empty()) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// get the string</span></div><div class="line">    <span class="keyword">char</span> Mstring[<span class="number">50</span>];</div><div class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"Enter a string: "</span>;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; Mstring;</div><div class="line">    <span class="keyword">int</span> result = CheckBalance(Mstring);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, result);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>运行：</p>
<blockquote>
<p>Enter a string: datahonor<br>1</p>
</blockquote>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.youtube.com/watch?v=hNP72JdOIgY&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=17" target="_blank" rel="external">YouTube</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[About if __name__=='__main__' in Python]]></title>
      <url>/2017/05/08/About-if-name-main-in-Python/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>关于<code>if __name__ == &#39;__main__&#39;</code>,一直想写个笔记，但是老忘，这里总结下。</p>
<p>总的来说，这句代码的作用是<strong>既能保证当前的py文件直接运行，也能保证其可以作为模块被其他py文件导入</strong>。</p>
<p>怎么理解这句话呢？我们通过几个小例子来看下。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><h6 id="name"><a href="#name" class="headerlink" title="__name__"></a>__name__</h6><p>首先任意创建一个py文件，仅输入一行代码</p>
<p><code>print(__name__)</code></p>
<p>然后运行，输出：</p>
<blockquote>
<p><strong>main</strong></p>
</blockquote>
<p>这说明，<code>__name__</code>本身是一个变量，但是不是一般的变量。它是在程序执行前就创建并赋值的，而赋值的机制是这里的关键。</p>
<p>在当前程序被当作主程序被执行的时候，<code>__name__</code>自动被赋值为固定的字符串<code>__main__</code>，当作为模块被其他文件调用的时候，自动被赋值为模块所在的文件名。</p>
<p>看下面一段程序,新建name_main.py文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printHello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello World!"</span>)</div><div class="line">    print(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ ==  <span class="string">'__main__'</span>:</div><div class="line">    printHello()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Hello World!<br><strong>main</strong></p>
</blockquote>
<p>那么，我们知道<code>__name__</code>此处是被赋值为<code>__main__</code>的，那么程序的逻辑就很清楚了。先是定义了一个函数，然后判断语句，最后判断通过执行函数。也许会问，不要这个判断，程序不是一样执行吗？当然，一样是可以的，我们完全可以写成下面这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printHello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello World!"</span>)</div><div class="line">    print(__name__)</div><div class="line"></div><div class="line">printHello()</div><div class="line"></div></pre></td></tr></table></figure>
<p>但是，问题就在与，当其作为模块被调用的时候。看下面一节的解释。</p>
<h6 id="from-xxx-import-xxx"><a href="#from-xxx-import-xxx" class="headerlink" title="from xxx import xxx"></a>from xxx import xxx</h6><p>保持name_main.py文件没有if语句，新建main_name1.py文件，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> name_main <span class="keyword">import</span> printHello</div><div class="line">printHello()</div><div class="line"></div></pre></td></tr></table></figure>
<p>想一下，会发生什么？先看输出：</p>
<blockquote>
<p>Hello World!<br>name_main<br>Hello World!<br>name_main</p>
</blockquote>
<p>首先，我们知道，作为模块调入，<code>—__name__</code> 自动被赋值为模块所在文件名，这点在意料之中。但是，我们明显看到，函数被执行了两次，这就关键所在！因为，在没有判断语句的时候，name_main在被调入的过程中就自动执行了一次（因为name_main本身就包含执行函数的部分），被调入后我们又主动调用一次，所以是两次。</p>
<p>那么，现在if语句的作用已经十分明确了，就是保证不重复执行函数。也就有了下面py文件的一般写法：</p>
<p><strong>name_main.py</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printHello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello World!"</span>)</div><div class="line">    print(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ ==  <span class="string">'__main__'</span>:</div><div class="line">    printHello()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p><strong>name_main1.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> name_main <span class="keyword">import</span> printHello</div><div class="line">printHello()</div><div class="line"></div></pre></td></tr></table></figure>
<p>这样，我们单独运行name_main.py:</p>
<blockquote>
<p>Hello World!<br><strong>main</strong></p>
</blockquote>
<p>单独运行name_main1.py:</p>
<blockquote>
<p>Hello World!<br>name_main</p>
</blockquote>
<p>可以看到，printHello函数都可以正常执行！这就是<code>if __name__== &#39;__main__&#39;</code>语句的作用。<br>它保证我们既可以单独调试一个文件的函数和类等，有不影响其他文件的调用。</p>
<p>再次看下开头的那句话：</p>
<p><strong>既能保证当前的py文件直接运行，也能保证其可以作为模块被其他py文件导入</strong></p>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do" target="_blank" rel="external">stackoverflow</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Octave in Ubuntu]]></title>
      <url>/2017/05/06/Octave-IN-Ubuntu/</url>
      <content type="html"><![CDATA[<p>关于Ubuntu16.04LTS下Octave的安装和使用。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><blockquote>
<p>sudo add-apt-repository ppa:octave/stable<br>sudo apt-get update<br>sudo apt-get install octave</p>
</blockquote>
<p>参考<a href="https://askubuntu.com/questions/645600/how-to-install-octave-4-0-0-in-ubuntu-14-04" target="_blank" rel="external">这里</a></p>
<p>之后运行报错：</p>
<blockquote>
<p>The settings file /home/user/.config/octave/qt-settings does not exist and can not be created.<br>Make sure you have read and write permissions to /home/user/.config/octave Octave GUI must be closed now.</p>
</blockquote>
<p>解决办法：</p>
<blockquote>
<p>cd .config/octave<br>sudo chown user qt-settings</p>
</blockquote>
<p>其中user改为自己的用户名。chown为更改拥有者的命令。</p>
<p>参考<a href="https://unix.stackexchange.com/questions/292721/error-running-octave-in-ubuntu-16-04" target="_blank" rel="external">这里</a></p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h6><p>安装包的下载列表在<a href="https://octave.sourceforge.io/packages.php" target="_blank" rel="external">这里</a>,直接下载即可。</p>
<p>尝试：</p>
<blockquote>
<p>pkg install /home/shensir/Documents/MyPrograming/octave/struct-1.0.14.tar.gz</p>
</blockquote>
<p>报错：</p>
<blockquote>
<p>pkg: please install the Debian package “liboctave-dev” to get the mkoctfile command<br>error: called from ‘<strong>gripe_missing_component</strong>‘ in file /usr/share/octave/4.0.2/m/help/<strong>gripe_missing_component</strong>.m near line 53, column 3</p>
</blockquote>
<p>解决报错：</p>
<blockquote>
<p>sudo apt-get install liboctave-dev</p>
</blockquote>
<p>安装成功：</p>
<blockquote>
<p>For information about changes from previous versions of the struct package, run ‘news struct’.</p>
</blockquote>
<p>查看已经安装的包：</p>
<blockquote>
<p>pkg list</p>
<p>Package Name  | Version | Installation directory<br>optim  |   1.5.0 | /home/shensir/octave/optim-1.5.0<br>struct  |  1.0.14 | /home/shensir/octave/struct-1.0.14<br>symbolic  |   2.5.0 | /home/shensir/octave/symbolic-2.5.0</p>
</blockquote>
<p>调用安装的包：</p>
<blockquote>
<p>pkg load symbolic<br>sym x</p>
</blockquote>
<p>嗯，报错了。。。</p>
<pre><code>Traceback (most recent call last):
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
ImportError: No module named sympy
OctSymPy v2.5.0: this is free software without warranty, see source.
Initializing communication with SymPy using a popen2() pipe.
error: Python cannot import SymPy: have you installed SymPy?
error: called from
    assert_have_python_and_sympy at line 37 column 5
    python_ipc_popen2 at line 78 column 5
    python_ipc_driver at line 58 column 13
    python_cmd at line 164 column 9
    sym at line 340 column 9
</code></pre><p>貌似说python没有装sympy，检查了下，已经装了。注意到可能是Python路径设置的问题，就查了查官方给的symbolic的<a href="https://octave.sourceforge.io/symbolic/NEWS.html" target="_blank" rel="external">文档</a>.</p>
<pre><code>* The environment variable `PYTHON` controls which Python executable is
  used.  The command
       `sympref python C:\bin\python`
  has been deprecated; instead please use:
       `setenv PYTHON C:\bin\python`
</code></pre><p>于是[这里用的anaconda]：</p>
<blockquote>
<p>setenv PYTHON /home/shensir/anaconda3/bin/python</p>
</blockquote>
<p>搞定。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Octave </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十六：Using the mean shift algorithm to find an object]]></title>
      <url>/2017/05/04/Using-the-mean-shift-algorithm-to-find-an-object/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>在上一篇笔记<a href="http://datahonor.com/2017/05/04/Backprojecting-a-histogram-to/">OpenCV系列笔记十五：Backprojecting a histogram to detect specific image content </a>，我们了解了histogram backprojection的原理及用法。这里，我们在backprojection的基础上介绍一种新的算法，即mean shift。他用来在给定的模糊范围，精确定位一个已知histogram[从给定的ROI得到]的物体。来看下参考书的介绍：</p>
<blockquote>
<p>The result of a histogram backprojection is a probability map that expresses the probability that a given piece of image content is found at a specific image location. Suppose we now know the approximate location of an object in an image; the probability map can be used to find the exact location of the object. The most probable location will be the one that maximizes this probability inside a given window. Therefore, if we start from an initial location and iteratively move around in an attempt to increase the local probability measure, it should be possible to find the exact object location. This is what is accomplished by the <strong>mean shift algorithm</strong>.</p>
</blockquote>
<p>在看下文档对mean shift的介绍：</p>
<pre><code>/** @brief Finds an object on a back projection image.

@param probImage Back projection of the object histogram. See calcBackProject for details.
@param window Initial search window.
@param criteria Stop criteria for the iterative search algorithm.
returns
:   Number of iterations CAMSHIFT took to converge.
The function implements the iterative object search algorithm. It takes the input back projection of
an object and the initial position. The mass center in window of the back projection image is
computed and the search window center shifts to the mass center. The procedure is repeated until the
specified number of iterations criteria.maxCount is done or until the window center shifts by less
than criteria.epsilon. The algorithm is used inside CamShift and, unlike CamShift , the search
window size or orientation do not change during the search. You can simply pass the output of
calcBackProject to this function. But better results can be obtained if you pre-filter the back
projection and remove the noise. For example, you can do this by retrieving connected components
with findContours , throwing away contours with small area ( contourArea ), and rendering the
remaining contours with drawContours.

@note
-   A mean-shift tracking sample can be found at opencv_source_code/samples/cpp/camshiftdemo.cpp
 */
CV_EXPORTS_W int meanShift( InputArray probImage, CV_IN_OUT Rect&amp; window, TermCriteria criteria );
</code></pre><p>mean shift算法是根据已经生成的backprojection map，在给定的初始位置开始进行迭代搜索，直到前后centroid差值小于给定的阀值或者达到预先设定的最大迭代次数时停止迭代, 函数返回达到收敛时迭代的次数。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>[colorhistogram.h和contentfinder.h在前一篇笔记已经给出]</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"colorhistogram.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"contentfinder.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// Read reference image</span></div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/baboon01.jpg"</span>);</div><div class="line">    <span class="comment">// initial window position</span></div><div class="line">    cv::<span class="function">Rect <span class="title">rect</span><span class="params">(<span class="number">110</span>, <span class="number">45</span>, <span class="number">35</span>, <span class="number">45</span>)</span></span>;</div><div class="line">    cv::rectangle(image, rect, cv::Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</div><div class="line">    <span class="comment">// Baboon's face ROI</span></div><div class="line">    cv::Mat imageROI = image(rect);</div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Image1"</span>);</div><div class="line">    cv::imshow(<span class="string">"Image1"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// Get the Hue histogram of baboon's face</span></div><div class="line">    <span class="keyword">int</span> minSat = <span class="number">65</span>;</div><div class="line">    ColorHistogram hc;</div><div class="line">    cv::Mat colorhist = hc.getHueHistogram(imageROI, minSat);</div><div class="line"></div><div class="line">    ContentFinder finder;</div><div class="line">    finder.setHistogram(colorhist);</div><div class="line"></div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/baboon02.jpg"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Convert to HSV space</span></div><div class="line">    cv::Mat hsv;</div><div class="line">    cv::cvtColor(image, hsv, CV_BGR2HSV);</div><div class="line">    <span class="comment">// Get back-projection of hue histogram</span></div><div class="line">    <span class="keyword">int</span> ch[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    finder.setThreshold(<span class="number">-1.0</span>f); <span class="comment">// no thresholding</span></div><div class="line">    cv::Mat result = finder.find(hsv, <span class="number">0.0f</span>, <span class="number">180.0f</span>, ch);</div><div class="line"></div><div class="line">    <span class="comment">// initial window position</span></div><div class="line">    cv::rectangle(image, rect, cv::Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</div><div class="line"></div><div class="line">    cv::Rect* prect = &amp;rect;</div><div class="line">    <span class="comment">// Search object with mean shift</span></div><div class="line">    cv::<span class="function">TermCriteria <span class="title">criteria</span><span class="params">(</span></span></div><div class="line">            cv::TermCriteria::MAX_ITER | cv::TermCriteria::EPS,</div><div class="line">            <span class="number">10</span>, <span class="comment">// iterate max 10 times</span></div><div class="line">            <span class="number">1</span>); <span class="comment">// or until the change in centroid position is less than 1px</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"meanshif= "</span>&lt;&lt;cv::meanShift(result, *prect, criteria)&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    cv::rectangle(image, *prect , cv::Scalar(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>));</div><div class="line"></div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"image 2"</span>);</div><div class="line">    cv::imshow(<span class="string">"image 2"</span>, image);</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170504/Selection_050415%3A35%3A28.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十五：Backprojecting a histogram to detect specific image content]]></title>
      <url>/2017/05/04/Backprojecting-a-histogram-to/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>之前，我们在 <a href="http://datahonor.com/2017/04/28/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B9%9D%EF%BC%9AComparing-colors-using-the-Strategy-design-pattern/">OpenCV系列笔记九：Comparing colors using the Strategy design pattern</a><br>, 和<a href="http://datahonor.com/2017/05/02/Using-colors-for-detection-skin-tone-detection/">OpenCV系列笔记十二：Using colors for detection - skin tone detection</a>里面分别介绍了在不同的颜色空间下，通过计算颜色距离，来进行the detection of specific image content.这里，我们将要介绍的histogram backprojection是一种新的进行detection的方法。</p>
<blockquote>
<p>A histogram is an important characteristic of an image’s content. If you look at an image area that shows a particular texture or a particular object, then the histogram of this area can be seen as a function that gives the probability that a given pixel belongs to this specific texture or object.</p>
</blockquote>
<p>简单讲就是说，我们通过指定一块具有代表性的区域，来检测图片中具有相同特征的所有区域。而检测的根据就是直方图，根据直方图的相似度来进行判别。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><h6 id="colorhistogram-h"><a href="#colorhistogram-h" class="headerlink" title="colorhistogram.h"></a>colorhistogram.h</h6><p>可以看到这里面很多函数在此处是用不到的，但是还是贴出来，好进一步的学习。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CLIONS_COLORHISTOGRAM_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIONS_COLORHISTOGRAM_H</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> ColorHistogram &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span>:</div><div class="line"></div><div class="line">    <span class="keyword">int</span> histSize[<span class="number">3</span>];        <span class="comment">// size of each dimension</span></div><div class="line">    <span class="keyword">float</span> hranges[<span class="number">2</span>];       <span class="comment">// range of values (same for the 3 dimensions)</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* ranges[<span class="number">3</span>]; <span class="comment">// array of ranges for each dimension</span></div><div class="line">    <span class="keyword">int</span> channels[<span class="number">3</span>];        <span class="comment">// channel to be considered</span></div><div class="line"></div><div class="line">  <span class="keyword">public</span>:</div><div class="line"></div><div class="line">    ColorHistogram() &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Prepare default arguments for a color histogram</span></div><div class="line">        <span class="comment">// each dimension has equal size and range</span></div><div class="line">        histSize[<span class="number">0</span>]= histSize[<span class="number">1</span>]= histSize[<span class="number">2</span>]= <span class="number">256</span>;</div><div class="line">        hranges[<span class="number">0</span>]= <span class="number">0.0</span>;    <span class="comment">// BRG range from 0 to 256</span></div><div class="line">        hranges[<span class="number">1</span>]= <span class="number">256.0</span>;</div><div class="line">        ranges[<span class="number">0</span>]= hranges; <span class="comment">// in this class,</span></div><div class="line">        ranges[<span class="number">1</span>]= hranges; <span class="comment">// all channels have the same range</span></div><div class="line">        ranges[<span class="number">2</span>]= hranges;</div><div class="line">        channels[<span class="number">0</span>]= <span class="number">0</span>;		<span class="comment">// the three channels: B</span></div><div class="line">        channels[<span class="number">1</span>]= <span class="number">1</span>;     <span class="comment">// G</span></div><div class="line">        channels[<span class="number">2</span>]= <span class="number">2</span>;     <span class="comment">// R</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// set histogram size for each dimension</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// each dimension has equal size</span></div><div class="line">        histSize[<span class="number">0</span>]= histSize[<span class="number">1</span>]= histSize[<span class="number">2</span>]= size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Computes the histogram.</span></div><div class="line">    cv::<span class="function">Mat <span class="title">getHistogram</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span> </span>&#123;</div><div class="line"></div><div class="line">        cv::Mat hist;</div><div class="line"></div><div class="line">        <span class="comment">// BGR color histogram</span></div><div class="line">        hranges[<span class="number">0</span>]= <span class="number">0.0</span>;    <span class="comment">// BRG range</span></div><div class="line">        hranges[<span class="number">1</span>]= <span class="number">256.0</span>;</div><div class="line">        channels[<span class="number">0</span>]= <span class="number">0</span>;		<span class="comment">// the three channels</span></div><div class="line">        channels[<span class="number">1</span>]= <span class="number">1</span>;</div><div class="line">        channels[<span class="number">2</span>]= <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Compute histogram</span></div><div class="line">        cv::calcHist(&amp;image,</div><div class="line">            <span class="number">1</span>,			<span class="comment">// histogram of 1 image only</span></div><div class="line">            channels,	<span class="comment">// the channel used</span></div><div class="line">            cv::Mat(),	<span class="comment">// no mask is used</span></div><div class="line">            hist,		<span class="comment">// the resulting histogram</span></div><div class="line">            <span class="number">3</span>,			<span class="comment">// it is a 3D histogram</span></div><div class="line">            histSize,	<span class="comment">// number of bins</span></div><div class="line">            ranges		<span class="comment">// pixel value range</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> hist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Computes the histogram.</span></div><div class="line">    cv::<span class="function">SparseMat <span class="title">getSparseHistogram</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span> </span>&#123;</div><div class="line"></div><div class="line">        cv::<span class="function">SparseMat <span class="title">hist</span><span class="params">(<span class="number">3</span>,        <span class="comment">// number of dimensions</span></span></span></div><div class="line">                           histSize, <span class="comment">// size of each dimension</span></div><div class="line">                           CV_32F);</div><div class="line"></div><div class="line">        <span class="comment">// BGR color histogram</span></div><div class="line">        hranges[<span class="number">0</span>]= <span class="number">0.0</span>;    <span class="comment">// BRG range</span></div><div class="line">        hranges[<span class="number">1</span>]= <span class="number">256.0</span>;</div><div class="line">        channels[<span class="number">0</span>]= <span class="number">0</span>;		<span class="comment">// the three channels</span></div><div class="line">        channels[<span class="number">1</span>]= <span class="number">1</span>;</div><div class="line">        channels[<span class="number">2</span>]= <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Compute histogram</span></div><div class="line">        cv::calcHist(&amp;image,</div><div class="line">            <span class="number">1</span>,			<span class="comment">// histogram of 1 image only</span></div><div class="line">            channels,	<span class="comment">// the channel used</span></div><div class="line">            cv::Mat(),	<span class="comment">// no mask is used</span></div><div class="line">            hist,		<span class="comment">// the resulting histogram</span></div><div class="line">            <span class="number">3</span>,			<span class="comment">// it is a 3D histogram</span></div><div class="line">            histSize,	<span class="comment">// number of bins</span></div><div class="line">            ranges		<span class="comment">// pixel value range</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> hist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Computes the 1D Hue histogram.</span></div><div class="line">    <span class="comment">// BGR source image is converted to HSV</span></div><div class="line">    <span class="comment">// Pixels with low saturation are ignored</span></div><div class="line">    cv::<span class="function">Mat <span class="title">getHueHistogram</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image,</span></span></div><div class="line">                             <span class="keyword">int</span> minSaturation=<span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        cv::Mat hist;</div><div class="line"></div><div class="line">        <span class="comment">// Convert to HSV colour space</span></div><div class="line">        cv::Mat hsv;</div><div class="line">        cv::cvtColor(image, hsv, CV_BGR2HSV);</div><div class="line"></div><div class="line">        <span class="comment">// Mask to be used (or not)</span></div><div class="line">        cv::Mat mask;</div><div class="line">        <span class="comment">// creating the mask if required</span></div><div class="line">        <span class="keyword">if</span> (minSaturation&gt;<span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Spliting the 3 channels into 3 images</span></div><div class="line">            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt; v;</div><div class="line">            cv::split(hsv,v);</div><div class="line"></div><div class="line">            <span class="comment">// Mask out the low saturated pixels</span></div><div class="line">            cv::threshold(v[<span class="number">1</span>],mask,minSaturation,<span class="number">255</span>,</div><div class="line">                                 cv::THRESH_BINARY);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Prepare arguments for a 1D hue histogram</span></div><div class="line">        hranges[<span class="number">0</span>]= <span class="number">0.0</span>;    <span class="comment">// range is from 0 to 180</span></div><div class="line">        hranges[<span class="number">1</span>]= <span class="number">180.0</span>;</div><div class="line">        channels[<span class="number">0</span>]= <span class="number">0</span>;    <span class="comment">// the hue channel</span></div><div class="line"></div><div class="line">        <span class="comment">// Compute histogram</span></div><div class="line">        cv::calcHist(&amp;hsv,</div><div class="line">            <span class="number">1</span>,			<span class="comment">// histogram of 1 image only</span></div><div class="line">            channels,	<span class="comment">// the channel used</span></div><div class="line">            mask,		<span class="comment">// binary mask</span></div><div class="line">            hist,		<span class="comment">// the resulting histogram</span></div><div class="line">            <span class="number">1</span>,			<span class="comment">// it is a 1D histogram</span></div><div class="line">            histSize,	<span class="comment">// number of bins</span></div><div class="line">            ranges		<span class="comment">// pixel value range</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> hist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Computes the 2D ab histogram.</span></div><div class="line">    <span class="comment">// BGR source image is converted to Lab</span></div><div class="line">    cv::<span class="function">Mat <span class="title">getabHistogram</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span> </span>&#123;</div><div class="line"></div><div class="line">        cv::Mat hist;</div><div class="line"></div><div class="line">        <span class="comment">// Convert to Lab color space</span></div><div class="line">        cv::Mat lab;</div><div class="line">        cv::cvtColor(image, lab, CV_BGR2Lab);</div><div class="line"></div><div class="line">        <span class="comment">// Prepare arguments for a 2D color histogram</span></div><div class="line">        hranges[<span class="number">0</span>]= <span class="number">0</span>;</div><div class="line">        hranges[<span class="number">1</span>]= <span class="number">256.0</span>;</div><div class="line">        channels[<span class="number">0</span>]= <span class="number">1</span>; <span class="comment">// the two channels used are ab</span></div><div class="line">        channels[<span class="number">1</span>]= <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Compute histogram</span></div><div class="line">        cv::calcHist(&amp;lab,</div><div class="line">            <span class="number">1</span>,			<span class="comment">// histogram of 1 image only</span></div><div class="line">            channels,	<span class="comment">// the channel used</span></div><div class="line">            cv::Mat(),	<span class="comment">// no mask is used</span></div><div class="line">            hist,		<span class="comment">// the resulting histogram</span></div><div class="line">            <span class="number">2</span>,			<span class="comment">// it is a 2D histogram</span></div><div class="line">            histSize,	<span class="comment">// number of bins</span></div><div class="line">            ranges		<span class="comment">// pixel value range</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> hist;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CLIONS_COLORHISTOGRAM_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="contenfinder-h"><a href="#contenfinder-h" class="headerlink" title="contenfinder.h"></a>contenfinder.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CLIONS_CONTENTFINDER_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIONS_CONTENTFINDER_H</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;highgui.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> ContentFinder&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// histogram parameters</span></div><div class="line">    <span class="keyword">float</span> hranges[<span class="number">2</span>];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* ranges[<span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> channels[<span class="number">3</span>];</div><div class="line">    <span class="keyword">float</span> threshold; <span class="comment">//decision threshold</span></div><div class="line">    cv::Mat histogram;  <span class="comment">// input histogram</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ContentFinder():threshold(<span class="number">0.1f</span>)&#123;</div><div class="line">        <span class="comment">// in this class, all channels have the same range</span></div><div class="line">        ranges[<span class="number">0</span>] = hranges;</div><div class="line">        ranges[<span class="number">1</span>] = hranges;</div><div class="line">        ranges[<span class="number">2</span>] = hranges;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Sets the refrence histogram</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHistogram</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; h)</span></span>&#123;</div><div class="line">        histogram = h;</div><div class="line">        cv::normalize(histogram, histogram, <span class="number">1.0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Sets the threshold</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">float</span> f)</span></span>&#123;</div><div class="line">        threshold = f;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Simplified version in which</span></div><div class="line">    <span class="comment">//all channels used, with range[0,256]</span></div><div class="line">    cv::<span class="function">Mat <span class="title">find</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; image)</span></span>&#123;</div><div class="line">        cv::Mat result;</div><div class="line">        hranges[<span class="number">0</span>] = <span class="number">0.0</span>;</div><div class="line">        hranges[<span class="number">1</span>] = <span class="number">256.0</span>;</div><div class="line">        channels[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        channels[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        channels[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> find(image, hranges[<span class="number">0</span>], hranges[<span class="number">1</span>], channels);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Finds the pixel belonging to the histogram</span></div><div class="line">    cv::<span class="function">Mat <span class="title">find</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; image, <span class="keyword">float</span> minValue, <span class="keyword">float</span> maxValue, <span class="keyword">int</span> * channels)</span></span>&#123;</div><div class="line">        cv::Mat result;</div><div class="line">        hranges[<span class="number">0</span>] = minValue;</div><div class="line">        hranges[<span class="number">1</span>] = maxValue;</div><div class="line">        <span class="comment">// histogram dim matches channel list</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;histogram.dims; i++)</div><div class="line">            <span class="keyword">this</span>-&gt;channels[i]=channels[i];</div><div class="line"></div><div class="line">        cv::calcBackProject(&amp;image, <span class="number">1</span>,</div><div class="line">                            channels,</div><div class="line">                            histogram,</div><div class="line">                            result,</div><div class="line">                            ranges, <span class="number">255.0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(threshold&gt;<span class="number">0.0</span>)</div><div class="line">            cv::threshold(result, result, <span class="number">255.0</span>*threshold, <span class="number">255.0</span>,cv::THRESH_BINARY);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CLIONS_CONTENTFINDER_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgcodecs.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"colorhistogram.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"contentfinder.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ColorHistogram hc;</div><div class="line">    cv::Mat color = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/waves.jpg"</span>);</div><div class="line"></div><div class="line">    cv::Mat imageROI;</div><div class="line">    imageROI = color(cv::Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">45</span>)); <span class="comment">// sky region</span></div><div class="line"></div><div class="line">      <span class="comment">//image with rectangle</span></div><div class="line">    cv::rectangle(color, cv::Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">45</span>), cv::Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</div><div class="line">    cv::imshow(<span class="string">"image with rect"</span>, color);</div><div class="line"></div><div class="line">    <span class="comment">// Get 3D color histogram (8 bins per channel)</span></div><div class="line">    hc.setSize(<span class="number">8</span>);</div><div class="line">    cv::Mat shist = hc.getHistogram(imageROI);</div><div class="line"></div><div class="line">    <span class="comment">// Create the content finder</span></div><div class="line">    ContentFinder finder;</div><div class="line">    <span class="comment">// set histogram to be bask-projected</span></div><div class="line">    finder.setHistogram(shist);</div><div class="line">    finder.setThreshold(<span class="number">0.05f</span>);</div><div class="line"></div><div class="line">    <span class="comment">//Get back-projection of color histogram</span></div><div class="line">    cv::Mat result = finder.find(color);</div><div class="line">    cv::imshow(<span class="string">"Color Detection Result"</span>, result);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170504/Selection_050415%3A23%3A52.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十四：Look-up tables]]></title>
      <url>/2017/05/04/Look-up-tables/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>在处理图像的时候，我们可能需要对所有的像素点，根据其像素值的大小，统一进行一个映射的操作，这个时候我们就需要look-up tables来完成这项工作。</p>
<blockquote>
<p>A look-up table is a simple one-to-one (or many-to-one) function that defines how pixel values are transformed into new values. It is a 1D array with, in the case of regular gray-level images, 256 entries.</p>
<p>Entry i of the table gives you the new intensity value of the corresponding gray level, which is expressed as follows:<br> <code>newIntensity= lookup[oldIntensity];</code></p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><h6 id="一般的使用方法"><a href="#一般的使用方法" class="headerlink" title="一般的使用方法"></a>一般的使用方法</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgcodecs.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"></div><div class="line">cv::<span class="function">Mat <span class="title">getlut</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::<span class="function">Mat <span class="title">lut</span><span class="params">(<span class="number">1</span>, <span class="number">256</span>, CV_8U)</span></span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)&#123;</div><div class="line"><span class="comment">//0 becomes 255, 1 becomes 254, etc</span></div><div class="line">        lut.at&lt;uchar&gt;(i) = <span class="number">255</span>-i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lut;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">cv::<span class="function">Mat <span class="title">getStrechlut</span><span class="params">(cv::Mat image, cv::Mat hist)</span></span>&#123;</div><div class="line">    <span class="comment">//number of pixel in percentile</span></div><div class="line">    <span class="keyword">float</span> percentile = <span class="number">0.01</span>;</div><div class="line">    <span class="keyword">float</span> number = image.total()*percentile;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> imin = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> count=<span class="number">0.0</span>;imin&lt;<span class="number">256</span>;imin++)&#123;</div><div class="line">        <span class="keyword">if</span>((count+=hist.at&lt;<span class="keyword">float</span>&gt;(imin)) &gt;= number)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> imax=<span class="number">255</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">float</span> count = <span class="number">0.0</span>; imax &gt;= <span class="number">0</span>; imax--)&#123;</div><div class="line">        <span class="keyword">if</span>((count+=hist.at&lt;<span class="keyword">float</span>&gt;(imax)) &gt;= number)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cv::<span class="function">Mat <span class="title">lut</span><span class="params">(<span class="number">1</span>, <span class="number">256</span>, CV_8U)</span></span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)&#123;</div><div class="line">        lut.at&lt;uchar&gt;(i) = <span class="number">255.0</span>*(i-imin)/(imax-imin);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lut;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/cattle.png"</span>,<span class="number">0</span>); <span class="comment">// gray</span></div><div class="line"></div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line">    <span class="comment">// The histogram object</span></div><div class="line">    Histogram1D h;</div><div class="line">    cv::imshow(<span class="string">"Original Histogram"</span>, h.getHistogramImage(image));</div><div class="line"></div><div class="line">    <span class="comment">//Compute the histogram</span></div><div class="line">    cv::Mat histo = h.getHistogram(image);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//get lut and apply</span></div><div class="line">    cv::Mat lut = getlut();</div><div class="line">    cv::Mat result = h.applyLookUp(image, lut);</div><div class="line">    cv::imshow(<span class="string">"inverse lut image"</span>, result);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//get strech lut and apply</span></div><div class="line">    cv::Mat strechlut = getStrechlut(image, histo);</div><div class="line">    cv::Mat strechresult = h.applyLookUp(image, strechlut);</div><div class="line"></div><div class="line">    cv::imshow(<span class="string">"strech lut histo"</span>, h.getHistogramImage(strechresult));</div><div class="line">    cv::imshow(<span class="string">"strech lut image"</span>, strechresult);</div><div class="line"></div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170504/Selection_050414%3A18%3A23.png" alt=""></p>
<h6 id="对之前颜色空间缩减的改进"><a href="#对之前颜色空间缩减的改进" class="headerlink" title="对之前颜色空间缩减的改进"></a>对之前颜色空间缩减的改进</h6><p>之前<a href="http://datahonor.com/2017/04/09/OPenCV-%E5%9B%BE%E7%89%87%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E7%BC%A9%E5%87%8F%E4%B8%8E%E9%81%8D%E5%8E%86/">颜色空间缩减</a> 时，我们用了手动遍历的方法进行修改对应的像素值，我们可以用look-up tables进行简化。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgcodecs.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce</span><span class="params">(cv::Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span></span>&#123;</div><div class="line">    <span class="comment">//creating the 1d lookup table</span></div><div class="line">    cv::<span class="function">Mat <span class="title">lookup</span><span class="params">(<span class="number">1</span>,<span class="number">256</span>, CV_8U)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//defining the color reduction lookup</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</div><div class="line">        lookup.at&lt;uchar&gt;(i) = i/div*div+div/<span class="number">2</span>;</div><div class="line">    <span class="comment">//lookip table applied on all channels;</span></div><div class="line">    cv::LUT(image, lookup, image);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 使用Clone,保护原来图像不受损坏</span></div><div class="line">    cv::Mat imageClone = image.clone();</div><div class="line">    colorReduce(imageClone, <span class="number">64</span>);</div><div class="line">    cv::namedWindow(<span class="string">"Result"</span>);</div><div class="line">    cv::imshow(<span class="string">"Result"</span>, imageClone);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十三：Computing an image histogram]]></title>
      <url>/2017/05/02/Computing-an-image-histogram/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>我们经常从图像像素点的直方图来获取一些数据，所以绘制直方图也是需要掌握的。</p>
<blockquote>
<p>An image is made of pixels that have different values. For example, in a 1-channel gray-level image, each pixel has an integer value between 0 (black) and 255 (white). Depending on the picture content, you will find different amounts of each gray shade laid out inside the image. A histogram is a simple table that gives you the number of pixels that have a given value in an image (or sometimes, a set of images). The histogram of a gray-level image will, therefore, have 256 entries (or bins). Bin 0 gives you the number of pixels that have the value 0, bin 1 gives you the number of pixels that have the value 1, and so on. Obviously, if you sum all of the entries of a histogram, you should get the total number of pixels. Histograms can also be normalized so that the sum of the bins equals 1. In this case, each bin gives you the percentage of pixels that have this specific value in the image.</p>
</blockquote>
<p>下面我们分别给出单通道[灰度图]和三通道图像直方图的绘制，前者来自这系列笔记的参考书，后者来自官方文档，其实基本思路是一致的。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="单通道-灰度图"><a href="#单通道-灰度图" class="headerlink" title="单通道[灰度图]"></a>单通道[灰度图]</h5><h6 id="grayhistogram-h"><a href="#grayhistogram-h" class="headerlink" title="grayhistogram.h"></a>grayhistogram.h</h6><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#ifndef CLIONS_GRAYHISTOGRAM_H</div><div class="line">#define CLIONS_GRAYHISTOGRAM_H</div><div class="line"></div><div class="line">#include &lt;cv.h&gt;</div><div class="line">#include &lt;highgui.h&gt;</div><div class="line">#include &lt;opencv2/imgcodecs.hpp&gt;</div><div class="line">#include &lt;opencv/cv.hpp&gt;</div><div class="line"></div><div class="line">class Histogram1D&#123;</div><div class="line">private:</div><div class="line">    int histSize[1]; // numbers of bins in histogram</div><div class="line">    float hranges[2];  // range of values</div><div class="line">    const float* ranges[1];  // pointer to the value ranges</div><div class="line">    int channels[1]; // channel number to be examined</div><div class="line">public:</div><div class="line">    Histogram1D()&#123;</div><div class="line">        // Prepare default arguments for 1D histogram</div><div class="line">        histSize[0] = 256;  // 256bins</div><div class="line">        hranges[0] = 0.0;  // from 0 (inclusive)</div><div class="line">        hranges[1] = 256.0;  // to 256 (exclusive)</div><div class="line">        ranges[0] = hranges;</div><div class="line">        channels[0] = 0; // we look at channel 0</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void setNBins(int size)&#123;</div><div class="line">        histSize[0] = size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Computes the 1D histogram</div><div class="line">    cv::Mat getHistogram(const cv::Mat &amp;image)&#123;</div><div class="line">        cv::Mat hist;</div><div class="line">        //Compute 1D histogram with calcHist</div><div class="line">        cv::calcHist(&amp;image,1,channels,cv::Mat(),</div><div class="line">                     hist, 1, histSize, ranges);</div><div class="line">        return  hist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    // Compute the 1D histogram and returns an image of it</div><div class="line">    cv::Mat getHistogramImage(const cv::Mat &amp;image, int zoom=1)&#123;</div><div class="line">        // Compute histogram first</div><div class="line">        cv::Mat hist = getHistogram(image);</div><div class="line">        // Create imaeg</div><div class="line">        return getImageOfHistogram(hist, zoom);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Create an image representing a histogram (static method)</div><div class="line">    static cv::Mat getImageOfHistogram(const cv::Mat &amp;hist, int zoom)&#123;</div><div class="line">        // Get min and max bin values</div><div class="line">        double maxVal = 0;</div><div class="line">        double minVal = 0;</div><div class="line">        cv::minMaxLoc(hist, &amp;minVal, &amp;maxVal, 0, 0);</div><div class="line"></div><div class="line">        //get histogram size</div><div class="line">        int histSize = hist.rows;</div><div class="line"></div><div class="line">        //Square image on which to display histogram</div><div class="line">        cv::Mat histImg(histSize*zoom, histSize*zoom, CV_8U, cv::Scalar(255));</div><div class="line">        // set highest point at 90% of nbins (i.e. image height)</div><div class="line">        int hpt = static_cast&lt;int&gt;(0.9*histSize);</div><div class="line"></div><div class="line">        //Draw vertical line for each bin</div><div class="line">        for(int h=0; h&lt;histSize; h++)&#123;</div><div class="line">            float binVal = hist.at&lt;float&gt;(h);</div><div class="line">            if(binVal&gt;0)&#123;</div><div class="line">                int intensity = static_cast&lt;int&gt;(binVal*hpt/maxVal);</div><div class="line">                cv::line(histImg, cv::Point(h*zoom, histSize*zoom), cv::Point(h*zoom, (histSize - intensity)*zoom),cv::Scalar(0),zoom);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return histImg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">#endif //CLIONS_GRAYHISTOGRAM_H</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"imageInfo.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/cattle.png"</span>,<span class="number">0</span>); <span class="comment">// gray</span></div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line">    <span class="comment">// The histogram object</span></div><div class="line">    Histogram1D h;</div><div class="line"></div><div class="line">    <span class="comment">//Compute the histogram</span></div><div class="line">    cv::Mat histo = h.getHistogram(image);</div><div class="line"></div><div class="line">    <span class="comment">// Loop over each bin</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)&#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Value "</span>&lt;&lt;i&lt;&lt;<span class="string">" = "</span></div><div class="line">                              &lt;&lt;histo.at&lt;<span class="keyword">float</span>&gt;(i)&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    cv::imshow(<span class="string">"Histogram"</span>, h.getHistogramImage(image));</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Value 0 = 73<br>Value 1 = 94<br>Value 2 = 288<br>Value 3 = 157<br>…</p>
</blockquote>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170502/hist1.png" alt=""></p>
<h5 id="多通道-彩色"><a href="#多通道-彩色" class="headerlink" title="多通道[彩色]"></a>多通道[彩色]</h5><h6 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h6><p>这里，为了更好地展示图片，我们仿照上面的方法，对文档代码进行了修改。主要就是动态限制了直方图高度。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include "opencv2/highgui.hpp"</div><div class="line">#include "opencv2/imgcodecs.hpp"</div><div class="line">#include "opencv2/imgproc.hpp"</div><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">using namespace cv;</div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    Mat src, dst;</div><div class="line">    src = imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/cattle.png", IMREAD_COLOR);</div><div class="line"></div><div class="line">    if(src.empty()) return  -1;</div><div class="line">    else imshow("Original Image", src);</div><div class="line"></div><div class="line">    vector&lt;Mat&gt;bgr_planes;</div><div class="line">    split(src, bgr_planes);</div><div class="line"></div><div class="line">    int histSize[1];</div><div class="line">    histSize[0] = 256;</div><div class="line"></div><div class="line">    float range[] = &#123;0, 256&#125;;</div><div class="line">    const float* histRange[2] = &#123;range&#125;;</div><div class="line"></div><div class="line">    bool uniform = true;</div><div class="line">    bool accumulate = false;</div><div class="line"></div><div class="line">    Mat b_hist, g_hist, r_hist;</div><div class="line"></div><div class="line">    calcHist(&amp;bgr_planes[0], 1, 0, Mat(), b_hist, 1, histSize, histRange, uniform, accumulate);</div><div class="line">    calcHist(&amp;bgr_planes[1], 1, 0, Mat(), g_hist, 1, histSize, histRange, uniform, accumulate);</div><div class="line">    calcHist(&amp;bgr_planes[2], 1, 0, Mat(), r_hist, 1, histSize, histRange, uniform, accumulate);</div><div class="line"></div><div class="line">    // Draw the histograms for B, G, and R</div><div class="line">    double maxVal = 0;</div><div class="line">    double minVal = 0;</div><div class="line">    cv::minMaxLoc(b_hist, &amp;minVal, &amp;maxVal, 0, 0);</div><div class="line">    cv::minMaxLoc(g_hist, &amp;minVal, &amp;maxVal, 0, 0);</div><div class="line">    cv::minMaxLoc(r_hist, &amp;minVal, &amp;maxVal, 0, 0);</div><div class="line"></div><div class="line">    int hpt = static_cast&lt;int&gt;(0.9*histSize[0]);</div><div class="line"></div><div class="line">    int hist_w = 512; int hist_h = 400;</div><div class="line">    int bin_w = cvRound((double)hist_w / histSize[0]);</div><div class="line">    Mat histImage(hist_h, hist_w, CV_8UC3, Scalar(0,0,0));</div><div class="line"></div><div class="line">    // normalization</div><div class="line">    normalize(b_hist, b_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());</div><div class="line">    normalize(b_hist, b_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());</div><div class="line">    normalize(b_hist, b_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat());</div><div class="line"></div><div class="line">    for(int i=1; i&lt;histSize[0]; i++)</div><div class="line">    &#123;</div><div class="line">        line(histImage, Point(bin_w*(i-1), hist_h - cvRound(b_hist.at&lt;float&gt;(i-1)*hpt/maxVal)),</div><div class="line">                        Point(bin_w*i, hist_h - cvRound(b_hist.at&lt;float&gt;(i)*hpt/maxVal)),</div><div class="line">                        Scalar(255, 0, 0), 2, 8, 0);</div><div class="line"></div><div class="line">        line(histImage, Point(bin_w*(i-1), hist_h - cvRound(g_hist.at&lt;float&gt;(i-1)*hpt/maxVal)),</div><div class="line">             Point(bin_w*i, hist_h - cvRound(g_hist.at&lt;float&gt;(i)*hpt/maxVal)),</div><div class="line">             Scalar(0, 255, 0), 2, 8, 0);</div><div class="line"></div><div class="line">        line(histImage, Point(bin_w*(i-1), hist_h - cvRound(r_hist.at&lt;float&gt;(i-1)*hpt/maxVal)),</div><div class="line">             Point(bin_w*i, hist_h - cvRound(r_hist.at&lt;float&gt;(i)*hpt/maxVal)),</div><div class="line">             Scalar(0, 0, 255), 2, 8, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    imshow("calcHist", histImage);</div><div class="line">    waitKey(0);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170502/hist2.png" alt=""></p>
<h5 id="直方图的修正"><a href="#直方图的修正" class="headerlink" title="直方图的修正"></a>直方图的修正</h5><p>先来看下什么是图像增强技术：</p>
<blockquote>
<p>图像增强技术是一大类基本的图像处理技术，目的是对一幅图像进行 加工，突出图像中的某些信息，削弱或除去某些不需要的信息，以得 到对具体应用来说视觉效果更好、更有用的图像，或转换成一种更适<br>合人或机器进行分析处理的形式。</p>
</blockquote>
<p>而图像增强方法分为空间域法和频率域法，空间域法是指在空间域内直接对像素的灰度值进行运算处理，我们这里将要介绍的直方图的修正，还有在下一篇笔记<a href="http://datahonor.com/2017/05/04/Look-up-tables/">look-ip table</a><br>里面用到了灰度变换都属于常用的空间域法。与之对应的频率域法是一种间接的处理方法。它是在图像的某种变换宇内，对图像的变换值进行增强处理，然后通过逆变换获得增强图像。</p>
<h6 id="直方图的均衡化-histogram-equalization"><a href="#直方图的均衡化-histogram-equalization" class="headerlink" title="直方图的均衡化(histogram equalization)"></a>直方图的均衡化(histogram equalization)</h6><p>均衡化的原理是使得变换后的图像灰度的概率密度均匀分布，即变换后的图像是衣服灰度级均匀分布的图像，这意味着图像灰度的动态范围得到了增加，从而可提高图像的对比度。<br>转换过程类似这种形式：<br><img src="/2017/05/02/Computing-an-image-histogram/" alt=""></p>
<p>简单讲就是转换为其累计密度分布的形式。具体的推导过程见参考资料。</p>
<p>在OpenCV中已经有了相应的函数，我们来看下它的效果：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    cv::Mat image;</div><div class="line">    Histogram1D h;</div><div class="line"></div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/dark.jpeg"</span>, <span class="number">0</span>);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line">    cv::imshow(<span class="string">"Original Hist"</span>, h.getHistogramImage(image));</div><div class="line"></div><div class="line">    cv::Mat equed;</div><div class="line">    cv::equalizeHist(image, equed);</div><div class="line">    cv::imshow(<span class="string">"Equed"</span>, equed);</div><div class="line">    cv::imshow(<span class="string">"Equed Hist"</span>, h.getHistogramImage(equed));</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170505/Selection_050511%3A02%3A11.png" alt=""></p>
<h6 id="直方图的规定化-histogram-specification-matching"><a href="#直方图的规定化-histogram-specification-matching" class="headerlink" title="直方图的规定化(histogram specification/matching)"></a>直方图的规定化(histogram specification/matching)</h6><p>定义：</p>
<blockquote>
<p>是指将一幅图像通过灰度变换后，使其具有特定的直方图形式，如使图像与某一标准图像具有相同的直方图，或使图像具有某一特定函数形式的直方图。</p>
</blockquote>
<p>可以看到规定化是将原来的直方图转化为指定的形式。先将两个图像都进行均衡化处理，之后让被转化的直方图向目标直方图靠拢来得到目的。</p>
<p>在OpenCV中没有特定函数实现规定化，我从Scribd找来实现的代码，参考一下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line">cv::<span class="function">Mat <span class="title">grayImgSpecification</span><span class="params">(cv::Mat &amp;img1, cv::Mat &amp;img2)</span></span>&#123;</div><div class="line">    cv::Mat img_new = img1.clone();</div><div class="line">    <span class="keyword">int</span> grayLevel = <span class="number">256</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Histogram</span></div><div class="line">    Histogram1D h;</div><div class="line">    cv::Mat histogram1 = h.getHistogram(img1);</div><div class="line">    cv::Mat histogram2 = h.getHistogram(img2);</div><div class="line"><span class="comment">//    cv::imshow("img1-original histogram", h.getHistogramImage(img1));</span></div><div class="line"><span class="comment">//    cv::imshow("img2-original histogram", h.getHistogramImage(img2));</span></div><div class="line"></div><div class="line">    <span class="comment">// Specifuication</span></div><div class="line">    <span class="keyword">float</span> * prImg1 = <span class="keyword">new</span> <span class="keyword">float</span>[grayLevel];</div><div class="line">    <span class="keyword">float</span> * mapImg1 = <span class="keyword">new</span> <span class="keyword">float</span>[grayLevel];</div><div class="line">    <span class="keyword">float</span> * prImg2 = <span class="keyword">new</span> <span class="keyword">float</span>[grayLevel];</div><div class="line"></div><div class="line">    <span class="keyword">float</span> n1 = img1.rows * img1.cols;</div><div class="line">    <span class="keyword">float</span> n2 = img2.rows * img2.cols;</div><div class="line"></div><div class="line">    <span class="comment">// 不同灰度级所占的比例</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;grayLevel; i++ )&#123;</div><div class="line">        <span class="keyword">float</span> nk = histogram1.at&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">        prImg1[i] = nk/n1;</div><div class="line"></div><div class="line">        nk = histogram2.at&lt;<span class="keyword">float</span>&gt;(i);</div><div class="line">        prImg2[i] = nk/n2;</div><div class="line"></div><div class="line">        mapImg1[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 累加</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;grayLevel; i++)&#123;</div><div class="line">        prImg1[i] = prImg1[i<span class="number">-1</span>] + prImg1[i];</div><div class="line">        prImg2[i] = prImg2[i<span class="number">-1</span>] + prImg2[i];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    prImg1[grayLevel - <span class="number">1</span>] = prImg2[grayLevel - <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Mapping</span></div><div class="line">    <span class="keyword">int</span> currentID = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;grayLevel; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">bool</span> mapped = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">while</span>(mapped== <span class="literal">false</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(prImg1[i] &lt;= prImg2[currentID])</div><div class="line">            &#123;</div><div class="line">                mapImg1[i] = currentID;</div><div class="line">                mapped = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                currentID++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// new Image</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;img_new.rows; i++)&#123;</div><div class="line">        uchar* data = img_new.ptr&lt;uchar&gt;(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;img_new.cols;j++)&#123;</div><div class="line">            <span class="keyword">int</span> grayVale = (<span class="keyword">int</span>)data[j*img_new.channels()+<span class="number">0</span>];</div><div class="line">            <span class="keyword">float</span> val = mapImg1[grayVale];</div><div class="line">            data[j*img_new.channels()+<span class="number">0</span>] = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> img_new;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// Read image</span></div><div class="line">    cv::Mat img1 = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/desert.jpg"</span>);</div><div class="line">    cv::Mat img2 = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/sea.jpg"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// split</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt;img1_bgrplanes;</div><div class="line">    cv::split(img1, img1_bgrplanes);</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt;img2_bgrplanes;</div><div class="line">    cv::split(img2, img2_bgrplanes);</div><div class="line"></div><div class="line">    cv::Mat img_new0 = grayImgSpecification(img1_bgrplanes[<span class="number">0</span>], img2_bgrplanes[<span class="number">0</span>]);</div><div class="line">    cv::Mat img_new1 = grayImgSpecification(img1_bgrplanes[<span class="number">1</span>], img2_bgrplanes[<span class="number">1</span>]);</div><div class="line">    cv::Mat img_new2 = grayImgSpecification(img1_bgrplanes[<span class="number">2</span>], img2_bgrplanes[<span class="number">2</span>]);</div><div class="line"></div><div class="line">    cv::Mat img_news;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt;img_new_planes;</div><div class="line">    img_new_planes= &#123;img_new0, img_new1, img_new2&#125;;</div><div class="line">    cv::merge(img_new_planes, img_news);</div><div class="line">    cv::imshow(<span class="string">"Img_news"</span>, img_news);</div><div class="line">    cv::imwrite(<span class="string">"specification.jpg"</span>, img_news);</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170505/Selection_050512%3A26%3A29.png" alt=""></p>
<p>根据上面已经提到的，我们来获取原来的图片和新生成图片的彩色直方图：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170505/Selection_050501.png" alt=""></p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170505/Selection_050502.png" alt=""></p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170505/Selection_050503.png" alt=""></p>
<p>可以看到，最后生成的直方图和目标直方图(sea-hist)是基本一致的，这样就是达到了正规化的目的。</p>
<h4 id="直方图比较"><a href="#直方图比较" class="headerlink" title="直方图比较"></a>直方图比较</h4><p>我们也可以通过比较直方图来检测图像的相似度</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grayhistogram.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"colorhistogram.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> ImageCompparator&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    cv::Mat refH;  <span class="comment">// reference histogram</span></div><div class="line">    cv::Mat inputH;  <span class="comment">// histogram of input image</span></div><div class="line"></div><div class="line">    ColorHistogram hist;  <span class="comment">// to generate the histograms number of bins used in each color channel</span></div><div class="line">    <span class="keyword">int</span> nBins;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ImageCompparator():nBins(<span class="number">8</span>)&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// set and compute histogram of reference image</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setReferenceImage</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span></span>&#123;</div><div class="line">        hist.setSize(nBins);</div><div class="line">        refH = hist.getHistogram(image);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// comapre the image using their BGR histograms</span></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span></span>&#123;</div><div class="line">        inputH = hist.getHistogram(image);</div><div class="line"></div><div class="line">        <span class="comment">//histogram comparison using intersection</span></div><div class="line">        <span class="keyword">return</span> cv::compareHist(refH, inputH, cv::HISTCMP_INTERSECT);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image;</div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/waves.jpg"</span>);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    ImageCompparator c;</div><div class="line">    c.setReferenceImage(image);</div><div class="line"></div><div class="line">    cv::Mat wave, beach, cattle;</div><div class="line">    wave = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/waves.jpg"</span>);  <span class="comment">// 和自身比较</span></div><div class="line">    beach = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/beach.jpg"</span>);  <span class="comment">// 和较为相似的比较</span></div><div class="line">    cattle = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/cattle.png"</span>);  <span class="comment">// 和不相似的比较</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">double</span> waves = c.compare(wave);</div><div class="line">    cv::imshow(<span class="string">"wave's score: "</span>+<span class="built_in">std</span>::to_string(waves), wave);</div><div class="line">    <span class="keyword">double</span> beachs = c.compare(beach);</div><div class="line">    cv::imshow(<span class="string">"beach's score: "</span>+<span class="built_in">std</span>::to_string(beachs), beach);</div><div class="line">    <span class="keyword">double</span> cattles = c.compare(cattle);</div><div class="line">    cv::imshow(<span class="string">"cattle's score: "</span>+<span class="built_in">std</span>::to_string(cattles), cattle);</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170505/cmphists.png" alt=""></p>
<h4 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h4><p><a href="https://www.scribd.com/document/106790597/OPENCV-Topic-04-Histogram-Specification" target="_blank" rel="external">Scribd代码</a></p>
<p><a href="http://bj3s.pku.edu.cn/activity/subjects/lesson6.pdf" target="_blank" rel="external">北大遥感课件</a></p>
<p>山东科大《数字图像处理》</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十二：Using colors for detection - skin tone detection]]></title>
      <url>/2017/05/02/Using-colors-for-detection-skin-tone-detection/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>关于颜色空间，除了经常用的RGB和之前用于颜色比较的Lab,还有其他很多不同用途的种类。这里我们要检测皮肤，用到的颜色空间是<a href="https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" target="_blank" rel="external">HSV</a>. 原因如下：</p>
<blockquote>
<p>In general, to detect an object using color, you first need to collect a large database of image samples that contain the object captured from different viewing conditions. These will be used to define the parameters of your classifier. You also need to select the color representation that you will use for classification. For skin tone detection, many studies have shown that skin color from the diverse ethnical groups clusters well in the hue/saturation space. For this reason, we will simply use the hue and saturation values to identify the skin tones in the following image.</p>
</blockquote>
<p>显然，在下面的程序里出现的一些阀值也是来自于一些经验数据。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;opencv2/core.hpp&gt;</div><div class="line">#include &lt;opencv2/highgui.hpp&gt;</div><div class="line">#include &lt;opencv2/imgproc.hpp&gt;</div><div class="line">#include "imageInfo.h"</div><div class="line"></div><div class="line">void detectHScolor(const cv::Mat&amp; image,</div><div class="line">                   double minHue, double maxHue,</div><div class="line">                   double minSat, double maxSat,</div><div class="line">                   cv::Mat&amp; mask)&#123;</div><div class="line">    cv::Mat hsv;</div><div class="line">    cv::cvtColor(image, hsv, CV_BGR2HSV);</div><div class="line">    std::vector&lt;cv::Mat&gt;channels;</div><div class="line">    cv::split(hsv, channels);</div><div class="line"></div><div class="line">    // Hue masking</div><div class="line">    cv::Mat mask1;</div><div class="line">    cv::threshold(channels[0], mask1, maxHue, 255,cv::THRESH_BINARY_INV);  // 0~maxhue</div><div class="line">    cv::Mat mask2;</div><div class="line">    cv::threshold(channels[0], mask2, minHue, 255, cv::THRESH_BINARY);  // minhue~180</div><div class="line"></div><div class="line">    cv::Mat hueMask;</div><div class="line">    if(minHue&lt;maxHue)</div><div class="line">        hueMask = mask1 &amp; mask2;  // minhue~maxhue</div><div class="line">    else // if interval crossed the zero-degrees axis</div><div class="line">        hueMask = mask1 | mask2;  // 上面的注释是书上的，一时搞不懂这个else是什么意思...知道的朋友可留言告知...</div><div class="line"></div><div class="line">    // Saturation masking</div><div class="line">    // between minSat and maxSat</div><div class="line">    cv::Mat satMask;</div><div class="line">    cv::inRange(channels[1], minSat, maxSat, satMask);</div><div class="line"></div><div class="line">    // combined mask</div><div class="line">    mask = hueMask &amp; satMask;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/girl.png");</div><div class="line">    cv::imshow("Original Image", image);</div><div class="line">    //detect skin tone</div><div class="line">    cv::Mat mask;</div><div class="line">    detectHScolor(image, 160,10,25,166, mask);</div><div class="line">    cv::Mat detected(image.size(),CV_8UC3,cv::Scalar(0,0,0));</div><div class="line">    image.copyTo(detected,mask);</div><div class="line"></div><div class="line">    cv::imshow("Detected", detected);</div><div class="line">    cv::waitKey(0);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170502/Selection_004.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十：Converting color reprentations]]></title>
      <url>/2017/05/02/Converting-color-reprentations/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>在第九篇中，我们通过计算颜色范围来提取出ROI（上例为蓝天部分），我们是在BGR颜色空间进行的，但是在这个颜色空间并不是很好。原因是：</p>
<blockquote>
<p>Unfortunately, computing the distance between the colors using the<br>RGB color space is not the best way to measure the similarity between<br>two given colors. Indeed, RGB is not a perceptually uniform color<br>space. This means that two colors at a given distance might look very<br>similar, while two other colors separated by the same distance might<br>look very different.</p>
</blockquote>
<p>所以：</p>
<blockquote>
<p>To solve this problem, other color representations that have the property<br>of being perceptually uniform have been introduced. In particular, the<br>CIE L<em>a</em>b* is one such color model. By converting our images to this<br>representation, the Euclidean distance between an image pixel and the<br>target color will then be a meaningful measure of the visual similarity<br>between the two colors.</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>这里核心的程序就是转换到另一个颜色空间进行颜色比较和颜色范围的界定。</p>
<p>主要改动就是process这里：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cv::Mat ColorDetector::process(<span class="keyword">const</span> cv::Mat &amp;image)&#123;</div><div class="line">    <span class="comment">// re-allocate binary map if necessary</span></div><div class="line">    <span class="comment">// same size as input image, but 1-channel</span></div><div class="line">    result.create(image.size(), CV_8U);</div><div class="line"></div><div class="line">    <span class="comment">// Converting to Lab color space</span></div><div class="line">    cv::cvtColor(image, converted, CV_BGR2Lab);</div><div class="line"></div><div class="line">    <span class="comment">// processing</span></div><div class="line">    <span class="comment">// get the iterators</span></div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::const_iterator it = converted.begin&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::const_iterator itend = converted.end&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;uchar&gt;::iterator itout = result.begin&lt;uchar&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// for each pixel</span></div><div class="line">    <span class="keyword">for</span>(; it!=itend;++it, ++itout)&#123;</div><div class="line">        <span class="comment">// compute distance from target color</span></div><div class="line">        <span class="keyword">if</span>(getColorDitanceToTargetColor(*it) &lt;= maxDist)&#123;</div><div class="line">            *itout = <span class="number">255</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            *itout = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>为了方便运行，这里也贴下完整的代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"imageInfo.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> ColorDetector&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// minimun accptable distance</span></div><div class="line">    <span class="keyword">int</span> maxDist;</div><div class="line">    <span class="comment">// target color</span></div><div class="line">    cv::Vec3b target;</div><div class="line"></div><div class="line">    <span class="comment">// image containing resulting binary map</span></div><div class="line">    cv::Mat result, converted;</div><div class="line"></div><div class="line">    <span class="comment">// empty constructor</span></div><div class="line">    <span class="comment">// default parameter initialization here</span></div><div class="line">    ColorDetector():maxDist(<span class="number">15</span>),target(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// another constructor with target and distance</span></div><div class="line">    ColorDetector(uchar blue, uchar green, uchar red, <span class="keyword">int</span> mxDist)&#123;&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Sets the color distance threshold</span></div><div class="line">    <span class="comment">// Threshold must be positive,</span></div><div class="line">    <span class="comment">// otherwise distance threshold is set to 0.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColorDistanceThreshold</span><span class="params">(<span class="keyword">int</span> distance)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(distance&lt;<span class="number">0</span>)</div><div class="line">            distance = <span class="number">0</span>;</div><div class="line">        maxDist = distance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Gets the color distance threshold</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getColorDistanceThreshold</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> maxDist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Sets the color to be detected</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTargetColor</span><span class="params">(uchar blue, uchar green, uchar red)</span></span>&#123;</div><div class="line">        <span class="comment">// Temporary 1-pixel image</span></div><div class="line">        cv::<span class="function">Mat <span class="title">tmp</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,CV_8UC3)</span></span>;</div><div class="line">        tmp.at&lt;cv::Vec3b&gt;(<span class="number">0</span>,<span class="number">0</span>) = cv::Vec3b(blue, green, red);</div><div class="line"></div><div class="line">        <span class="comment">// Converting the target to Lab color space</span></div><div class="line">        cv::cvtColor(tmp, tmp, CV_BGR2Lab);</div><div class="line"></div><div class="line">        target = tmp.at&lt;cv::Vec3b&gt;(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Sets the color to be detected</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTargetColor</span><span class="params">(cv::Vec3b color)</span></span>&#123;</div><div class="line">        target = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Gets the color to be detected</span></div><div class="line">    cv::<span class="function">Vec3b <span class="title">getTargetColor</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cv::<span class="function">Mat <span class="title">process</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span></span>;</div><div class="line">    cv::<span class="function">Mat <span class="title">process_bycv</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getColorDitanceToTargetColor</span><span class="params">(<span class="keyword">const</span> cv::Vec3b&amp; color)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getColorDistance(color, target);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Compute the city-block distance between two colors</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getColorDistance</span><span class="params">(<span class="keyword">const</span> cv::Vec3b&amp;color1, <span class="keyword">const</span> cv::Vec3b&amp; color2)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(color1[<span class="number">0</span>]-color2[<span class="number">0</span>]+</div><div class="line">                   <span class="built_in">abs</span>(color1[<span class="number">1</span>])-color2[<span class="number">1</span>]+</div><div class="line">                   <span class="built_in">abs</span>(color1[<span class="number">2</span>]-color2[<span class="number">2</span>]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">cv::Mat ColorDetector::process(<span class="keyword">const</span> cv::Mat &amp;image)&#123;</div><div class="line">    <span class="comment">// re-allocate binary map if necessary</span></div><div class="line">    <span class="comment">// same size as input image, but 1-channel</span></div><div class="line">    result.create(image.size(), CV_8U);</div><div class="line"></div><div class="line">    <span class="comment">// Converting to Lab color space</span></div><div class="line">    cv::cvtColor(image, converted, CV_BGR2Lab);</div><div class="line"></div><div class="line">    <span class="comment">// processing</span></div><div class="line">    <span class="comment">// get the iterators</span></div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::const_iterator it = converted.begin&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::const_iterator itend = converted.end&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;uchar&gt;::iterator itout = result.begin&lt;uchar&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// for each pixel</span></div><div class="line">    <span class="keyword">for</span>(; it!=itend;++it, ++itout)&#123;</div><div class="line">        <span class="comment">// compute distance from target color</span></div><div class="line">        <span class="keyword">if</span>(getColorDitanceToTargetColor(*it) &lt;= maxDist)&#123;</div><div class="line">            *itout = <span class="number">255</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            *itout = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//1. Create image processor object</span></div><div class="line">    ColorDetector cdetect;</div><div class="line">    <span class="comment">//2. Read input image</span></div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line">    <span class="keyword">if</span>(image.empty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">//3. Set input parameters</span></div><div class="line">    cdetect.setTargetColor(<span class="number">230</span>, <span class="number">220</span>, <span class="number">130</span>);</div><div class="line"></div><div class="line">    <span class="comment">//4. Process the image and display the result</span></div><div class="line">    cv::Mat result = cdetect.process(image);</div><div class="line">    cv::imshow(<span class="string">"Process Result"</span>, result);</div><div class="line"></div><div class="line">    cv::Mat masked, result_inv;</div><div class="line">    cv::bitwise_not(result, result_inv);</div><div class="line"></div><div class="line">    image.copyTo(masked, result_inv);</div><div class="line">    cv::add(masked, cv::Scalar(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>), masked, result);</div><div class="line">    cv::imshow(<span class="string">"Masked"</span>, masked);</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170502/Selection_003.png" alt=""></p>
<p>貌似，效果差不多…</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记十一：Segmenting an image with the GrabCut algorithm]]></title>
      <url>/2017/05/02/Segmenting-an-image-with-the-GrabCut-algorithm/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>如上篇所述，所关注的物体有较为独特的颜色时，我们可以通过一个颜色范围过滤出想要的物体。但是有些时候所要抽取的物体并不总是有鲜明的颜色特征。这里，我们介绍另一种根据图片特征进行分类的算法，即为GrabCut.</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>先看一下实现代码和效果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;opencv2/core.hpp&gt;</div><div class="line">#include &lt;opencv2/highgui.hpp&gt;</div><div class="line">#include &lt;opencv2/imgproc.hpp&gt;</div><div class="line">#include "imageInfo.h"</div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png");</div><div class="line">    cv::Rect rectangle(50,30,240,170);</div><div class="line"></div><div class="line">    // show the ractangle</div><div class="line">    cv::Mat imageclone = image.clone();</div><div class="line">    cv::rectangle(imageclone, rectangle, 255, 2);</div><div class="line">    cv::imshow("Image with Ractangle", imageclone);</div><div class="line"></div><div class="line">    cv::Mat result;</div><div class="line">    cv::Mat bgMOdel, fgModel;</div><div class="line">    cv::grabCut(image, result, rectangle, bgMOdel, fgModel, 5, cv::GC_INIT_WITH_RECT);</div><div class="line"></div><div class="line">//    打印可以看到result是由1，2，3，4组成，即为四种模式</div><div class="line">//    std::cout&lt;&lt;result&lt;&lt;std::endl;</div><div class="line">//    std::cout&lt;&lt;cv::GC_PR_FGD&lt;&lt;std::endl;</div><div class="line"></div><div class="line">    cv::compare(result, cv::GC_PR_FGD, result, cv::CMP_EQ);</div><div class="line">    cv::Mat foreground(image.size(), CV_8UC3,cv::Scalar(255,255,255));</div><div class="line">    image.copyTo(foreground, result);</div><div class="line"></div><div class="line">    cv::imshow("foreground", foreground);</div><div class="line">    cv::waitKey(0);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170502/Selection_002.png" alt=""></p>
<p>简单解释下上面的程序：</p>
<ul>
<li><p>[ ] <strong>cv::grubCut</strong><br>先看下文档的参数解释：<br><img src="http://blog-1252464519.costj.myqcloud.com/170502/Selection_001.png" alt=""></p>
<blockquote>
<p>中文解释，参考<a href="http://blog.csdn.net/zouxy09/article/details/8535087" target="_blank" rel="external">这里</a><br>这个解释还是挺不错的，但是在mask和rect这里好像和文档有些出入。第一个是mask这里，即使不手工标记，也会有GCD_BGD存在，因为rect之外的部分默认被视为背景，我们上面的实验结果result也是未进行人工标注，其包含0，2，3.</p>
</blockquote>
</li>
<li><p>[ ] <strong>models</strong><br>看文档强调在处理同一张图片时，不要修改两个models,即bgdModel和fgdModel.这是因为运行grubCut之后，里面保存了一些之前迭代的数据，如果得到的结果不理想，我们可以再次利用这两个models继续迭代，省去重复迭代。</p>
<blockquote>
<p>This explains the argument of the function where the user can specify<br>the number of iterations to be applied. The two internal models<br>maintained by the algorithm are passed as an argument of the function<br>(and returned). Therefore, it is possible to call the function with the<br>models of the last run again if one wishes to improve the segmentation<br>result by performing additional iterations.</p>
</blockquote>
</li>
<li><p>[ ] <strong>cv::GC_PR_FGD and cv::GC_FGD</strong><br>在我们上面的程序，<code>cv::compare(result, cv::GC_PR_FGD, result, cv::CMP_EQ);</code>可以看出，我们提取的是，可能的前景图，并没有提取确定的前景图。我们可以将这一行代码换为<code>result = result&amp;1</code>来达到同时提取的目的。<br>因为，</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//! class of the pixel in GrabCut algorithm</span></div><div class="line"><span class="keyword">enum</span> GrabCutClasses &#123;</div><div class="line">    GC_BGD    = <span class="number">0</span>,  <span class="comment">//!&lt; an obvious background pixels</span></div><div class="line">    GC_FGD    = <span class="number">1</span>,  <span class="comment">//!&lt; an obvious foreground (object) pixel</span></div><div class="line">    GC_PR_BGD = <span class="number">2</span>,  <span class="comment">//!&lt; a possible background pixel</span></div><div class="line">    GC_PR_FGD = <span class="number">3</span>   <span class="comment">//!&lt; a possible foreground pixel</span></div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure>
<blockquote>
<p>所以，1&amp;1, 1&amp;3 均为1，0&amp;1， 2&amp;1均为0.这里因为没有事先标记GC_FGD，所以同时获取得到的结果和之前是一样的。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记九：Comparing colors using the Strategy design pattern]]></title>
      <url>/2017/04/28/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B9%9D%EF%BC%9AComparing-colors-using-the-Strategy-design-pattern/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>介绍通过比较颜色来检测一片区域，并进行处理的方法，采用了Strategy design pattern.</p>
<blockquote>
<p>Let’s say we want to build a simple algorithm that will identify all of the<br>pixels in an image that have a given color. For this, the algorithm has to<br>accept an image and a color as input and will return a binary image<br>showing the pixels that have the specified color. The tolerance with<br>which we want to accept a color will be another parameter to be<br>specified before running the algorithm.</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>代码通过两种方式来进行颜色的比较， 一种是自己实现的，另一种是应用了OpenCV提供的函数absdiff等。最后将这种算法的效果和floodfill进行比较。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Comparing colors using the Strategy design pattern</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> ColorDetector&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// minimun accptable distance</span></div><div class="line">    <span class="keyword">int</span> maxDist;</div><div class="line">    <span class="comment">// target color</span></div><div class="line">    cv::Vec3b target;</div><div class="line"></div><div class="line">    <span class="comment">// image containing resulting binary map</span></div><div class="line">    cv::Mat result;</div><div class="line"></div><div class="line">    <span class="comment">// empty constructor</span></div><div class="line">    <span class="comment">// default parameter initialization here</span></div><div class="line">    ColorDetector():maxDist(<span class="number">50</span>),target(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// full constructor with target and distance</span></div><div class="line">    <span class="comment">// functor</span></div><div class="line">    ColorDetector(uchar blue, uchar green, uchar red, <span class="keyword">int</span> maxDist=<span class="number">50</span>):</div><div class="line">            maxDist(maxDist)&#123;</div><div class="line">        setTargetColor(blue, green, red);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// functor--&gt; ()</span></div><div class="line">    cv::<span class="function">Mat <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> process_bycv(image);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Sets the color distance threshold</span></div><div class="line">    <span class="comment">// Threshold must be positive,</span></div><div class="line">    <span class="comment">// otherwise distance threshold is set to 0.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColorDistanceThreshold</span><span class="params">(<span class="keyword">int</span> distance)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(distance&lt;<span class="number">0</span>)</div><div class="line">            distance = <span class="number">0</span>;</div><div class="line">        maxDist = distance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Gets the color distance threshold</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getColorDistanceThreshold</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> maxDist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Sets the color to be detected</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTargetColor</span><span class="params">(uchar blue, uchar green, uchar red)</span></span>&#123;</div><div class="line">        <span class="comment">// BGR order</span></div><div class="line">        target = cv::Vec3b(blue, green, red);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Sets the color to be detected</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTargetColor</span><span class="params">(cv::Vec3b color)</span></span>&#123;</div><div class="line">        target = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Gets the color to be detected</span></div><div class="line">    cv::<span class="function">Vec3b <span class="title">getTargetColor</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// process the image</span></div><div class="line">    cv::<span class="function">Mat <span class="title">process</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span></span>;</div><div class="line">    cv::<span class="function">Mat <span class="title">process_bycv</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getColorDitanceToTargetColor</span><span class="params">(<span class="keyword">const</span> cv::Vec3b&amp; color)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getColorDistance(color, target);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Compute the city-block distance between two colors</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getColorDistance</span><span class="params">(<span class="keyword">const</span> cv::Vec3b&amp;color1, <span class="keyword">const</span> cv::Vec3b&amp; color2)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(color1[<span class="number">0</span>]-color2[<span class="number">0</span>]+</div><div class="line">                   <span class="built_in">abs</span>(color1[<span class="number">1</span>])-color2[<span class="number">1</span>]+</div><div class="line">                   <span class="built_in">abs</span>(color1[<span class="number">2</span>]-color2[<span class="number">2</span>]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">cv::Mat ColorDetector::process(<span class="keyword">const</span> cv::Mat &amp;image)&#123;</div><div class="line">    <span class="comment">// re-allocate binary map if necessary</span></div><div class="line">    <span class="comment">// same size as input image, but 1-channel</span></div><div class="line">    result.create(image.size(), CV_8U);</div><div class="line"></div><div class="line">    <span class="comment">// processing</span></div><div class="line">    <span class="comment">// get the iterators</span></div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::const_iterator it = image.begin&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::const_iterator itend = image.end&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;uchar&gt;::iterator itout = result.begin&lt;uchar&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// for each pixel</span></div><div class="line">    <span class="keyword">for</span>(; it!=itend;++it, ++itout)&#123;</div><div class="line">        <span class="comment">// compute distance from target color</span></div><div class="line">        <span class="keyword">if</span>(getColorDitanceToTargetColor(*it) &lt;= maxDist)&#123;</div><div class="line">            *itout = <span class="number">255</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            *itout = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">cv::Mat ColorDetector::process_bycv(<span class="keyword">const</span> cv::Mat &amp;image) &#123;</div><div class="line">    cv::Mat output;</div><div class="line">    <span class="comment">// compute abssolute difference with tarfet color</span></div><div class="line">    cv::absdiff(image, cv::Scalar(target) ,output);</div><div class="line"></div><div class="line">    <span class="comment">//split the channels into 3 images;</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt; images;</div><div class="line">    cv::split(output, images);</div><div class="line"></div><div class="line">    <span class="comment">// add the 3 channels (saturation might occurs here)</span></div><div class="line">    output = images[<span class="number">0</span>] + images[<span class="number">1</span>] + images[<span class="number">2</span>];</div><div class="line">    <span class="comment">// apply threshold</span></div><div class="line">    cv::threshold(output, output, maxDist, <span class="number">255</span>, cv::THRESH_BINARY_INV);</div><div class="line">    <span class="keyword">return</span> output;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//1. Create image processor object</span></div><div class="line">    ColorDetector cdetect;</div><div class="line">    <span class="comment">//2. Read input image</span></div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line">    <span class="keyword">if</span>(image.empty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">//3. Set input parameters</span></div><div class="line">    cdetect.setTargetColor(<span class="number">230</span>, <span class="number">190</span>, <span class="number">130</span>);</div><div class="line"></div><div class="line">    <span class="comment">//4. Process the image and display the result</span></div><div class="line">    cv::Mat result1 = cdetect.process(image);</div><div class="line">    cv::imshow(<span class="string">"process"</span>, result1);</div><div class="line"></div><div class="line">    cv::Mat result2 = cdetect.process_bycv(image);</div><div class="line">    cv::imshow(<span class="string">"process_bycv"</span>, result2);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// another way</span></div><div class="line">    <span class="function">ColorDetector <span class="title">colordetector</span><span class="params">(<span class="number">230</span>, <span class="number">190</span>, <span class="number">130</span>)</span></span>;</div><div class="line">    cv::Mat result = colordetector(image);</div><div class="line">    cv::imshow(<span class="string">"colordetector result"</span>, result);</div><div class="line"></div><div class="line">    <span class="comment">// show the result in original image</span></div><div class="line">    cv::Mat image_masked, mask_inv;</div><div class="line">    mask_inv = <span class="number">255</span> - result;</div><div class="line">    cv::bitwise_and(image, image, image_masked, mask_inv);</div><div class="line">    cv::add(image_masked, cv::Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), image_masked, result);</div><div class="line">    cv::imshow(<span class="string">"image_masked"</span>, image_masked);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//floodFill的用法</span></div><div class="line"></div><div class="line">    cv::floodFill(image, cv::Point(<span class="number">100</span>,<span class="number">50</span>),cv::Scalar(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),</div><div class="line">                  (cv::Rect*)<span class="number">0</span>, cv::Scalar(<span class="number">35</span>,<span class="number">35</span>,<span class="number">35</span>), cv::Scalar(<span class="number">35</span>,<span class="number">35</span>,<span class="number">35</span>),</div><div class="line">                  cv::FLOODFILL_FIXED_RANGE);</div><div class="line">    cv::imshow(<span class="string">"Flood fill"</span>, image);</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170427/9.png" alt=""></p>
<p>关于floodfill和原算法的不同之处：</p>
<blockquote>
<p>Our ColorDetector class identifies the pixels in an image that have a<br>color similar to a given target color. The decision to accept or not a pixel<br>is simply made on a per-pixel basis. The cv::floodFill function<br>proceeds in a very similar way with one important difference: in this<br>case, the decision to accept a pixel also depends on the state of its<br>neighbors. The idea is to identify a connected area of a certain color.<br>The user specifies a starting pixel location and tolerance parameters that<br>determine color similarity.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记八：Remapping]]></title>
      <url>/2017/04/28/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E5%85%AB%EF%BC%9ARemapping/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>关于Remapping, <a href="http://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/remap/remap.html" target="_blank" rel="external">官方文档</a>已经解释的十分清楚了。</p>
<blockquote>
<p>It is the process of taking pixels from one place in the image and locating them in another position in a new image.</p>
<p>To accomplish the mapping process, it might be necessary to do some interpolation for non-integer pixel locations, since there will not always be a one-to-one-pixel correspondence between source and destination images.</p>
<p>We can express the remap for every pixel location (x,y) as:<br><code>g(x,y) = f ( h(x,y) )</code><br>where g() is the remapped image, f() the source image and h(x,y) is the mapping function that operates on (x,y)</p>
</blockquote>
<p>注意这里对函数的理解，也就是remapping的过程，举个简单的例子，当remapping函数为h(x,y)=(x+1, y+1)时， 新的图像g(3,4) = f(h(3, 4)) = f(4, 5), 也就是说新得到的图像(3,4)处的像素点原来是在原图像的(4, 5)处。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>这里是书上的一段代码，很简短，官方文档给的例子比较好些。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"imageInfo.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// remapping an image by createing wave effects</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wave</span><span class="params">(<span class="keyword">const</span> cv::Mat &amp;image, cv::Mat &amp;result)</span></span>&#123;</div><div class="line">    <span class="comment">//the mao function</span></div><div class="line">    cv::<span class="function">Mat <span class="title">srcX</span><span class="params">(image.rows, image.cols, CV_32F)</span></span>;</div><div class="line">    cv::<span class="function">Mat <span class="title">srcY</span><span class="params">(image.rows, image.cols, CV_32F)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// creating the mapping</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; image.rows; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; image.cols; j++) &#123;</div><div class="line">            <span class="comment">// new location of pixel at (i, j)</span></div><div class="line">            srcX.at&lt;<span class="keyword">float</span>&gt;(i,j)=j;</div><div class="line">            srcY.at&lt;<span class="keyword">float</span>&gt;(i,j) = i+<span class="number">5</span>*<span class="built_in">sin</span>(j/<span class="number">10.0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// applying the mapping</span></div><div class="line">    cv::remap(image,result, srcX, srcY,cv::INTER_LINEAR);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image1 = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line">    getImageInfo(image1);</div><div class="line">    cv::Mat result;</div><div class="line">    wave(image1, result);</div><div class="line">    cv::imshow(<span class="string">"result"</span>, result);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170427/7.png" alt=""></p>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><a href="http://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/remap/remap.html" target="_blank" rel="external">Remapping</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记七：Neighbor access]]></title>
      <url>/2017/04/28/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9ANeighbor-access/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>前面介绍了几种获取特定位置像素点的方法，但是有些时候我们也需要同时获取其周围的像素点的值，这时候，我们仿照前面的做法，只需要多加上几个位置指针即可。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">void sharpen(const cv::Mat &amp;image, cv::Mat &amp;result)&#123;</div><div class="line">    // allocate if necessary</div><div class="line">    result.create(image.size(), image.type());</div><div class="line">    int nchannels = image.channels();</div><div class="line"></div><div class="line">    // for all rows(except first and last</div><div class="line">    for (int j = 0; j &lt; image.rows - 1; j++) &#123;</div><div class="line">        const uchar * previous = image.ptr&lt;const uchar&gt;(j-1);</div><div class="line">        const uchar * current = image.ptr&lt;const uchar&gt;(j);</div><div class="line">        const uchar * next = image.ptr&lt;const uchar&gt;(j+1);</div><div class="line"></div><div class="line">        uchar* output = result.ptr&lt;uchar&gt;(j); // output row</div><div class="line">        for(int i=nchannels; i&lt;(image.cols-1)*nchannels; i++)&#123;</div><div class="line">            // apply sharpening operator</div><div class="line">            *output++ = cv::saturate_cast&lt;uchar&gt;(</div><div class="line">                    5*current[i]-current[i-nchannels]-</div><div class="line">                    current[i+nchannels]-previous[i]-next[i]</div><div class="line">                        );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // set the unprocessed pixels to 0</div><div class="line">    result.row(0).setTo(cv::Scalar(0));</div><div class="line">    result.row(result.rows-1).setTo(cv::Scalar(0));</div><div class="line">    result.col(0).setTo(cv::Scalar(0));</div><div class="line">    result.col(result.cols-1).setTo(cv::Scalar(0));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">void sharpen2D(const cv::Mat &amp;image, cv::Mat &amp;result)&#123;</div><div class="line">    // Construct kernel (all entries initialized to 0)</div><div class="line">    cv::Mat kernel(3,3, CV_32F, cv::Scalar(0));</div><div class="line">    //assigns kernel values</div><div class="line">    kernel.at&lt;float&gt;(1,1) = 5.0;</div><div class="line">    kernel.at&lt;float&gt;(0,1) = -1.0;</div><div class="line">    kernel.at&lt;float&gt;(2,1) = -1.0;</div><div class="line">    kernel.at&lt;float&gt;(1,0) = -1.0;</div><div class="line">    kernel.at&lt;float&gt;(1,2) = -1.0;</div><div class="line">    //filter the image</div><div class="line">    cv::filter2D(image, result, image.depth(), kernel);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png");</div><div class="line">    cv::imshow("image", image);</div><div class="line"></div><div class="line">    cv::Mat result1, result2;</div><div class="line">    sharpen(image, result1);</div><div class="line">    sharpen2D(image, result2);</div><div class="line">    cv::imshow("Result1", result1);</div><div class="line">    cv::imshow("Result2", result2);</div><div class="line"></div><div class="line">    cv::waitKey(0);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170427/8.png" alt=""></p>
<p>几点补充：</p>
<ul>
<li><p>[ ] cv::saturate_cast<uchar></uchar></p>
<blockquote>
<p>其作用是保证像素点操作过程中出现的低于0或者大于255的值强制转化为0和255.</p>
</blockquote>
</li>
<li><p>[ ] 彩色图像的操作</p>
<blockquote>
<p>在对彩色图像进行处理的时候，每次对单个pixel的单个channel操作。</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记五：Accessing pixel values]]></title>
      <url>/2017/04/28/Accessing-pixel-values/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>图片本就是由一个一个的像素点组成，我们有时候需要对一些特殊的像素点就行操作，而操作像素点的第一个问题就是如何获取到这些像素点。OpenCV为我们提供了at方法。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><h6 id="Mat"><a href="#Mat" class="headerlink" title="Mat"></a>Mat</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">salt</span><span class="params">(cv::Mat image, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="comment">// C++11 random number generator</span></div><div class="line">    <span class="built_in">std</span>::default_random_engine generator;</div><div class="line">    <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">int</span>&gt;</div><div class="line">            randomRow(<span class="number">0</span>, image.rows <span class="number">-1</span>);</div><div class="line">    <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">int</span>&gt;</div><div class="line">            randomCol(<span class="number">0</span>, image.cols <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">        <span class="comment">// random image coordinate</span></div><div class="line">        i = randomCol(generator);</div><div class="line">        j = randomRow(generator);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(image.type() == CV_8UC1)&#123;</div><div class="line">            <span class="comment">// gray image, single-channel 8-bit image</span></div><div class="line">            image.at&lt;uchar&gt;(j,i) = <span class="number">255</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (image.type() == CV_8UC3)&#123;</div><div class="line">            <span class="comment">// color image, 3-channel image</span></div><div class="line">            image.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">0</span>] = <span class="number">255</span>;</div><div class="line">            image.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">1</span>] = <span class="number">255</span>;</div><div class="line">            image.at&lt;cv::Vec3b&gt;(j,i)[<span class="number">2</span>] = <span class="number">255</span>;</div><div class="line">            <span class="comment">// or in this way</span></div><div class="line">            <span class="comment">//image.at&lt;cv::Vec3b&gt;(j,i) = cv::Vec3b(255,255,255);</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line">    salt(image, <span class="number">3000</span>);</div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Image"</span>);</div><div class="line">    cv::imshow(<span class="string">"Image"</span>, image);</div><div class="line">    cv::imwrite(<span class="string">"salt-lake.jpg"</span>, image);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170427/3.png" alt=""></p>
<h6 id="Mat-1"><a href="#Mat-1" class="headerlink" title="Mat_"></a>Mat_</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// for color image</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">salt</span><span class="params">(cv::Mat_&lt;cv::Vec3b&gt; image, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="comment">// C++11 random number generator</span></div><div class="line">    <span class="built_in">std</span>::default_random_engine generator;</div><div class="line">    <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">int</span>&gt;</div><div class="line">            randomRow(<span class="number">0</span>, image.rows <span class="number">-1</span>);</div><div class="line">    <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">int</span>&gt;</div><div class="line">            randomCol(<span class="number">0</span>, image.cols <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">        <span class="comment">// random image coordinate</span></div><div class="line">        i = randomCol(generator);</div><div class="line">        j = randomRow(generator);</div><div class="line"></div><div class="line">        <span class="comment">// color image, 3-channel image</span></div><div class="line">        image(j,i)[<span class="number">0</span>] = <span class="number">255</span>;</div><div class="line">        image(j,i)[<span class="number">1</span>] = <span class="number">255</span>;</div><div class="line">        image(j,i)[<span class="number">2</span>] = <span class="number">255</span>;</div><div class="line">        <span class="comment">// or in this way</span></div><div class="line">        <span class="comment">//image(j,i) = cv::Vec3b(255,255,255);</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// overload for gray image</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">salt</span><span class="params">(cv::Mat_&lt;uchar&gt; image, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="comment">// C++11 random number generator</span></div><div class="line">    <span class="built_in">std</span>::default_random_engine generator;</div><div class="line">    <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">int</span>&gt;</div><div class="line">            randomRow(<span class="number">0</span>, image.rows <span class="number">-1</span>);</div><div class="line">    <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">int</span>&gt;</div><div class="line">            randomCol(<span class="number">0</span>, image.cols <span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">        <span class="comment">// random image coordinate</span></div><div class="line">        i = randomCol(generator);</div><div class="line">        j = randomRow(generator);</div><div class="line"></div><div class="line">        <span class="comment">// gray image, single-channel 8-bit image</span></div><div class="line">        image(j,i) = <span class="number">255</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// color</span></div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt; image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    salt(image, <span class="number">3000</span>);</div><div class="line">    cv::imshow(<span class="string">"Salted Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// gray</span></div><div class="line">    cv::Mat_&lt;uchar&gt; gray;</div><div class="line">    cv::cvtColor(image, gray, cv::COLOR_BGR2GRAY);</div><div class="line">    cv::imshow(<span class="string">"Gray"</span>, gray);</div><div class="line"></div><div class="line">    salt(gray, <span class="number">3000</span>);</div><div class="line">    cv::imshow(<span class="string">"Salted Gray"</span>, gray);</div><div class="line"></div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170427/4.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记四：ROI]]></title>
      <url>/2017/04/28/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9AROI/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>在对图片进行处理的时候，我们关注的往往是图片的某些区域，称为regions of interest，即为ROI。我们的操作也是主要针对这些区域进行的。来看下面这个向图片上添加logo的例子。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>我们直接将logo加到图片上去，即使使用权重，效果也是不好。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">int main()&#123;</div><div class="line">    cv::Mat image, logo;</div><div class="line">    image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/bao.jpeg");</div><div class="line">    logo = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/logo.png");</div><div class="line"></div><div class="line">    cv::imshow("logo", logo);</div><div class="line">    cv::imshow("image", image);</div><div class="line">    // define image ROI at image bottom-right</div><div class="line">    cv::Mat imageROI(image, cv::Rect(0,0, logo.cols, logo.rows));</div><div class="line"></div><div class="line"></div><div class="line">//  insert logo directly</div><div class="line">    logo.copyTo(imageROI);</div><div class="line">    cv::imshow("add drictly", image);</div><div class="line"></div><div class="line"></div><div class="line">//  add in weight</div><div class="line">    cv::Mat dst;</div><div class="line">    cv::addWeighted(imageROI, 0.7, logo, 0.3, 0,imageROI);</div><div class="line">    cv::imshow("add in weight", image);</div><div class="line"></div><div class="line">    cv::waitKey(0);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170427/1.png" alt=""></p>
<p>这里，我们应当专注于ROI的mask使用，用来提取logo的主体和ROI的背景。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image, logo;</div><div class="line">    image = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/bao.jpeg");</div><div class="line">    logo = cv::imread("/home/shensir/Documents/MyPrograming/Cpp/Clions/data/logo.png");</div><div class="line"></div><div class="line">    cv::imshow("logo", logo);</div><div class="line">    cv::imshow("image", image);</div><div class="line">    // define image ROI at image bottom-right</div><div class="line">    cv::Mat imageROI(image, cv::Rect(0,0, logo.cols, logo.rows));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    cv::Mat logo_gray;</div><div class="line">    cv::cvtColor(logo, logo_gray, CV_BGR2GRAY);</div><div class="line"></div><div class="line">    cv::Mat mask, mask_inv;</div><div class="line">    //下面将logo主体形状[灰度值不再100-255的部分]标记为白色255，即在按位和时取此白色部分</div><div class="line">    cv::threshold(logo_gray, mask, 100, 255, CV_THRESH_BINARY_INV);</div><div class="line">    // mask_inv与mask颜色相反[黑白互换即0,255互换]，即在取按位和时取logo的背景部分</div><div class="line">    cv::bitwise_not(mask,mask_inv);</div><div class="line"></div><div class="line">    cv::Mat img_bg, logo_fg;</div><div class="line">    //取出ROI中和背景部分重合的区域，预留主体部分为黑色0</div><div class="line">    cv::bitwise_and(imageROI,imageROI, img_bg, mask_inv);</div><div class="line"></div><div class="line">    //从logo中取出logo主体部分，预留非logo主体部分为黑色0</div><div class="line">    cv::bitwise_and(logo,logo,logo_fg,mask);</div><div class="line"></div><div class="line">    // 相加合并图像</div><div class="line">    cv::add(img_bg, logo_fg,imageROI);</div><div class="line"></div><div class="line">    //处理过程中产生的图像</div><div class="line">    cv::imshow("mask", mask);</div><div class="line">    cv::imshow("img_bg", img_bg);</div><div class="line">    cv::imshow("logo_fg", logo_fg);</div><div class="line"></div><div class="line">    //最后完成合并的图像</div><div class="line">    cv::imshow("image", image);</div><div class="line">    cv::waitKey(0);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170427/2.png" alt=""></p>
<p>这段代码对初学者理解起来可能有些困难，我也是反复看了几次才搞懂…主要的流程就是，先将logo转化为灰度图，再进行threshold操作，用mask分离出logo主体，再通过mask作用于logo的按位和得到logo主体部分，其余背景为0（黑色）；同样地，再将mask_inv作用于原图片的ROI区域的按位和，得到ROI区域的背景，其中预留将要和logo主体重合的部分为0（黑色）。这样，再直接将抠出来的背景和logo相加，就得到看了想要的效果了。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记三：Draw on image]]></title>
      <url>/2017/04/27/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9ADraw-on-image/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>有些时候，我们需要在图片上做一些标记，好比画些矩形，圆形或者一些文字。OpenCV提供了很好用的接口，除了文字有点丑…</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Mouse trackbar</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image;</div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/mang.png"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//  a rectangle on the top of the image</span></div><div class="line">    cv::rectangle(image, cv::Point(<span class="number">0</span>,<span class="number">0</span>), cv::Point(image.cols, <span class="number">50</span>), cv::Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">3</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// put some text</span></div><div class="line">    cv::putText(image, <span class="string">"A Text Test"</span>, cv::Point(image.cols/<span class="number">3</span>, <span class="number">30</span>), cv::FONT_HERSHEY_PLAIN, <span class="number">2.0</span>, <span class="number">0</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">    cv::imshow(<span class="string">"Image"</span>, image);</div><div class="line">    cv::waitKey();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170427/Selection_002.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记二：Mouse trackbar]]></title>
      <url>/2017/04/27/Mouse-trackbar/</url>
      <content type="html"><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>关于OpenCV如何捕捉鼠标动作进行图片的交互。这里回调函数可能有点不太好理解，简单讲就是说，在cv::setMouseCallback之后，在指定的窗口，鼠标动作将会被捕捉，根据捕捉到的动作，按照onMouse的定义进行操作，之后回到捕捉状态。如果没有鼠标动作，那么程序将会一直wait,等待退出。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><h5 id="显示像素值"><a href="#显示像素值" class="headerlink" title="显示像素值"></a>显示像素值</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"imageInfo.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Mouse trackbar</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onMouse</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span>* param)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image;</div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/mangzai.jpg"</span>, <span class="number">0</span>);</div><div class="line">    getImageInfo(image);</div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image );</div><div class="line">    cv::setMouseCallback(<span class="string">"Original Image"</span>, onMouse,</div><div class="line">                         <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(&amp;image));</div><div class="line">    cvWaitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onMouse</span> <span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span>*param)</span></span>&#123;</div><div class="line">    cv::Mat *im = <span class="keyword">reinterpret_cast</span>&lt;cv::Mat*&gt;(param);</div><div class="line">    <span class="keyword">switch</span> (event)&#123;</div><div class="line">        <span class="keyword">case</span> cv::EVENT_LBUTTONDOWN: <span class="comment">// left mouse button down event</span></div><div class="line">            <span class="comment">// display pixel value at (x,y)</span></div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"at ("</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; <span class="string">") value is:"</span></div><div class="line">                      &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(</div><div class="line">                              im-&gt;at&lt;uchar&gt;(cv::Point(x,y))) &lt;&lt;</div><div class="line">                      <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="动态模糊与做图"><a href="#动态模糊与做图" class="headerlink" title="动态模糊与做图"></a>动态模糊与做图</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 创建变量，保存滑动条的初始位置值</span></div><div class="line"><span class="keyword">int</span> blurAmount = <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="comment">// 滑动条的回调函数</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">void</span>* userInput)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 鼠标的回调</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onMouse</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>, <span class="keyword">void</span>* userInput)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    Mat img = imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/tower.jpg"</span>);</div><div class="line">    namedWindow(<span class="string">"Tower"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建滑动条</span></div><div class="line">    createTrackbar(<span class="string">"Tower Bar"</span>, <span class="string">"Tower"</span>, &amp;blurAmount, <span class="number">30</span>, onChange, &amp;img);</div><div class="line">    setMouseCallback(<span class="string">"Tower"</span>, onMouse, &amp;img);</div><div class="line"></div><div class="line">    <span class="comment">// 调用onChange来初始化</span></div><div class="line">    onChange(blurAmount, &amp;img);</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 销毁窗口</span></div><div class="line">    destroyAllWindows();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">void</span>* userInput)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pos &lt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 输出的辅助变量</span></div><div class="line">    Mat imgBlur;</div><div class="line"></div><div class="line">    <span class="comment">// 获取图像指针</span></div><div class="line">    Mat* img = (Mat*) userInput;</div><div class="line"></div><div class="line">    <span class="comment">// 应用模糊滤波</span></div><div class="line">    blur(*img, imgBlur, Size(pos, pos));</div><div class="line"></div><div class="line">    <span class="comment">// 展示输出</span></div><div class="line">    imshow(<span class="string">"Tower"</span>, imgBlur);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onMouse</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>, <span class="keyword">void</span>* userInput)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(event != EVENT_LBUTTONDOWN)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取图像指针</span></div><div class="line">    Mat* img = (Mat*)userInput;</div><div class="line"></div><div class="line">    <span class="comment">// 绘制圆形</span></div><div class="line">    circle(*img, Point(x,y), <span class="number">10</span>, Scalar(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">3</span>);</div><div class="line"></div><div class="line">    onChange(blurAmount, img);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170515/Selection_051601.png" alt=""></p>
<h5 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h5><p>这里，测试的时候没有成功，因为在编译OpenCV的时候没有添加Qt的支持，需要重新编译才行。这里先把代码放在这，有时间重新编译再测试。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc.hpp"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line">Mat img;</div><div class="line"><span class="keyword">bool</span> applyGray=<span class="literal">false</span>;</div><div class="line"><span class="keyword">bool</span> applyBlur=<span class="literal">false</span>;</div><div class="line"><span class="keyword">bool</span> applySobel=<span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyFilters</span><span class="params">()</span></span>&#123;</div><div class="line">    Mat result;</div><div class="line">    img.copyTo(result);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(applyGray)&#123;</div><div class="line">        cvtColor(result, result, COLOR_BGR2GRAY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(applyBlur)&#123;</div><div class="line">        blur(result, result, Size(<span class="number">5</span>,<span class="number">5</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(applySobel)&#123;</div><div class="line">        Sobel(result, result, CV_8U, <span class="number">1</span>,<span class="number">1</span> );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    imshow(<span class="string">"Tower"</span>, result);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">grayCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>*  userData)</span></span>&#123;</div><div class="line">    applyGray=<span class="literal">true</span>;</div><div class="line">    applyFilters();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bgrCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>*userData)</span></span>&#123;</div><div class="line">    applyGray = <span class="literal">false</span>;</div><div class="line">    applyFilters();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">blurCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>* userData)</span></span>&#123;</div><div class="line">    applyBlur = (<span class="keyword">bool</span>)state;</div><div class="line">    applyFilters();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sobelCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>* userData)</span></span>&#123;</div><div class="line">    applySobel = !applySobel;</div><div class="line">    applyFilters();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    img = imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/tower.jpg"</span>);</div><div class="line">    namedWindow(<span class="string">"Tower"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建按钮</span></div><div class="line">    createButton(<span class="string">"Blur"</span>, blurCallback);</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    destroyAllWindows() ;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>还有就是。。。开始以为安装Qt，在Qt运行才可以(其实并不是啦。。)，所以就在Qt下配置了下OpenCV。具体配置参考<a href="http://rodrigoberriel.com/2014/11/using-opencv-3-qt-creator-3-2-qt-5-3" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记一：Read, Show and Write]]></title>
      <url>/2017/04/26/OpenCV%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9ARead-Show-and-Write/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>看了一段时间的 <em>OpenCV 3 Computer Vision Application Programming Cookbook - Third Edition</em>,受益匪浅，目前看到了第8章，打算先暂停下，总结下前面学到的内容。<br>这里，在开始的部分，我们介绍下图片文件的读写。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>先看一段代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//core header that declares the image data structure</span></div><div class="line"><span class="comment">//and the highgui header file that contains all the graphical interface</span></div><div class="line"><span class="comment">//functions</span></div><div class="line"></div><div class="line"><span class="comment">// print images's info</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getImageInfo</span><span class="params">(cv::Mat image)</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"=====Image Info=====\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.rows: "</span>&lt;&lt;image.rows&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.cols: "</span>&lt;&lt;image.cols&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.dims: "</span>&lt;&lt;image.dims&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"image.channels: "</span>&lt;&lt;image.channels()&lt;&lt;<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// something else...</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"====================\n"</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image;  <span class="comment">// create an empty image</span></div><div class="line"></div><div class="line">    <span class="comment">// read an input image</span></div><div class="line">    image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/mangzai.jpg"</span>);</div><div class="line">    <span class="keyword">if</span>(image.empty())&#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"ERROR: Empty Image!\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// exit with code -1;</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// print info of the image</span></div><div class="line">    getImageInfo(image);</div><div class="line"></div><div class="line">    <span class="comment">// define the window(optional)</span></div><div class="line">    <span class="comment">// http://stackoverflow.com/questions/31155577/opencv-is-namedwindow-necessary-before-imshow</span></div><div class="line"></div><div class="line">    cv::namedWindow(<span class="string">"Original Image"</span>);</div><div class="line">    <span class="comment">// show the image</span></div><div class="line">    cv::imshow(<span class="string">"Original Image"</span>, image);</div><div class="line"></div><div class="line">    <span class="comment">// let's do something on the image</span></div><div class="line">    cv::Mat fliped;  <span class="comment">// we create another empty image</span></div><div class="line">    cv::flip(image, fliped, <span class="number">1</span>); <span class="comment">// 1-&gt;positive for horizontal</span></div><div class="line">                                <span class="comment">// 0 for vertical, negative for both</span></div><div class="line">    cv::imshow(<span class="string">"Fliped"</span>, fliped);</div><div class="line"></div><div class="line">    <span class="comment">// save the image</span></div><div class="line">    cv::imwrite(<span class="string">"Filped.jpg"</span>, fliped);</div><div class="line"></div><div class="line">    cv::waitKey();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>简单讲解下代码要注意的地方：</p>
<ol>
<li><p>cv::imread</p>
<blockquote>
<p>源码：@param filename Name of file to be loaded.<br>@param flags Flag that can take values of cv::ImreadModes<br>*/<br>CV_EXPORTS_W Mat imread( const String&amp; filename, int flags = IMREAD_COLOR );<br>可以看到，两个参数分别是文件名和读取的方式，默认是COLOR即BGR方式读入。<br>关于flags, 我们截取源码片段看一下：<br>//! Imread flags<br>enum ImreadModes {<br>IMREAD_UNCHANGED = -1, //!&lt; If set, return the loaded image as is (with alpha channel, otherwise it gets cropped).</p>
<p>IMREAD_GRAYSCALE = 0,  //!&lt; If set, always convert image to the single channel grayscale image.<br>IMREAD_COLOR = 1,  //!&lt; If set, always convert image to the 3 channel BGR color image.</p>
<p>注意默认的是COLOR模式，即为1.</p>
</blockquote>
</li>
<li><p>image.empty()</p>
<blockquote>
<p>这里是很有必要的习惯，我们要保证图片的正确载入，否则下面的操作将会失去意义。用Cpp写imread,image为空会自动报错，在用Python调用OpenCV接口读取的时候，即使图片为空也不会有报错，这点要注意下。</p>
</blockquote>
</li>
<li><p>namedWindow</p>
<blockquote>
<p>namedWindow creates a window that can be used as a placeholder for images and trackbars. Created windows are referred to by their names.</p>
<p>The fuction namedWindow just makes sure that if you wish to do something with that same window afterwards (eg move, resize, close that window), you can do it by referencing it with the same name.</p>
<p>So if you just want to show it; you don’t need to use namedWindow().<br>即是说，如果只用窗口展示图片的话，不需要namedWindow, 在需要对图片展示窗口进行操作（复用）时才用的到。</p>
</blockquote>
</li>
<li><p>cv::waitKey() 与 cvWaitKey()</p>
<blockquote>
<p>@param delay Delay in milliseconds. 0 is the special value that means “forever”.<br>*/<br>CV_EXPORTS_W int waitKey(int delay = 0);</p>
<p>/<em> wait for key event infinitely (delay&lt;=0) or for “delay” milliseconds </em>/<br>CVAPI(int) cvWaitKey(int delay CV_DEFAULT(0));</p>
<p>看似并没有什么差别…但是这里有个之前发现的bug，参考<a href="http://datahonor.com/2017/02/22/OpenCV-Play-Video/">这里</a>.</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[public, protected and private]]></title>
      <url>/2017/04/25/public-protected-and-private/</url>
      <content type="html"><![CDATA[<p>关于c++类变量的属性：private, protected, private</p>
<h5 id="访问范围"><a href="#访问范围" class="headerlink" title="访问范围"></a>访问范围</h5><ul>
<li>[ ] private</li>
</ul>
<blockquote>
<p>只能由该类的函数和其友元函数访问<br>该类的对象不能访问</p>
</blockquote>
<ul>
<li>[ ] proteected</li>
</ul>
<blockquote>
<p>可以被，该类的函数，子类的函数， 友元函数访问<br>不能被类的对象访问</p>
</blockquote>
<ul>
<li>[ ] public</li>
</ul>
<blockquote>
<p>可以被该类的函数，子类的函数， 友元函数访问<br>也可以被类的对象访问</p>
</blockquote>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>子类与父类的关系：</p>
<p><img src="https://i.stack.imgur.com/W6CJ3.jpg" alt=""></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance" target="_blank" rel="external">stackoverflow</a></p>
<p><a href="http://cnmtjp.blog.51cto.com/204390/36548/" target="_blank" rel="external"> C++ 类访问控制</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Doubly Linked Lists]]></title>
      <url>/2017/04/25/Doubly-Linked-Lists/</url>
      <content type="html"><![CDATA[<h5 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h5><p>双向链表原理和单链表时一样的，也是由节点组成，每个节点包含要存储的数据信息和前后节点[单链表只有后面节点的信息]的位置信息，这些节点串连，形成一个链表。</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="doublyLLst-h"><a href="#doublyLLst-h" class="headerlink" title="doublyLLst.h"></a>doublyLLst.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_DOUBLYLLST_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_DOUBLYLLST_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> Node&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    T info;</div><div class="line">    Node* next, *prev;</div><div class="line"></div><div class="line">    Node()&#123;</div><div class="line">        next = prev = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node(<span class="keyword">const</span> T&amp; el ,Node* n = <span class="number">0</span>, Node* p = <span class="number">0</span>)&#123;</div><div class="line">        info = el; next = n; prev = p;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class</span> DoublyLinkedList&#123;</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    Node&lt;T&gt; *head, *tail;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    DoublyLinkedList()&#123;</div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToDLLTail</span><span class="params">(<span class="keyword">const</span> T&amp;)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToDLLHead</span><span class="params">(<span class="keyword">const</span> T&amp;)</span></span>;</div><div class="line">    <span class="function">T <span class="title">deleteFromDLLTail</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">T <span class="title">deleteFromDLLHead</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromEl</span><span class="params">(T el)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromPs</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToDLList</span><span class="params">(<span class="keyword">const</span> T&amp; el, <span class="keyword">int</span> pos)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInList</span><span class="params">(T el)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printLinkedLists</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::addToDLLTail(<span class="keyword">const</span> T &amp;el ) &#123;</div><div class="line">    <span class="keyword">if</span>(tail != <span class="number">0</span>)&#123;</div><div class="line">        tail = <span class="keyword">new</span> Node&lt;T&gt;(el, <span class="number">0</span>, tail);</div><div class="line">        tail-&gt;prev-&gt;next = tail;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> head = tail = <span class="keyword">new</span> Node&lt;T&gt;(el);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::addToDLLHead(<span class="keyword">const</span> T &amp;el ) &#123;</div><div class="line">    <span class="keyword">if</span>(head != <span class="number">0</span>)&#123;</div><div class="line">        head = <span class="keyword">new</span> Node&lt;T&gt;(el, head, <span class="number">0</span>);</div><div class="line">        head-&gt;next-&gt;prev = head;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> head = tail = <span class="keyword">new</span> Node&lt;T&gt;(el);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line">T DoublyLinkedList&lt;T&gt;::deleteFromDLLHead() &#123;</div><div class="line">    T el = head-&gt;info;</div><div class="line">    <span class="keyword">if</span>(head == tail)&#123; <span class="comment">// if only one node in the list</span></div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = tail =<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123; <span class="comment">// if more than one node in the list</span></div><div class="line">        head = head-&gt;next;  <span class="comment">// 先将head后移</span></div><div class="line">        <span class="keyword">delete</span> head-&gt;prev;  <span class="comment">// 删除旧head</span></div><div class="line">        head-&gt;prev = <span class="number">0</span>;  <span class="comment">// 新head's prev 设置为0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line">T DoublyLinkedList&lt;T&gt;::deleteFromDLLTail() &#123;</div><div class="line">    T el = tail-&gt;info;</div><div class="line">    <span class="keyword">if</span>(head == tail)&#123; <span class="comment">// if only one node in the list</span></div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = tail =<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123; <span class="comment">// if more than one node in the list</span></div><div class="line">        tail = tail-&gt;prev;</div><div class="line">        <span class="keyword">delete</span> tail-&gt;next;</div><div class="line">        tail-&gt;next = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::deleteNodeFromEl(T el) &#123;</div><div class="line">    <span class="keyword">if</span>(head != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(el == head-&gt;info &amp;&amp; head==tail)&#123;</div><div class="line">            <span class="keyword">delete</span> head;</div><div class="line">            head = tail = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(el == head-&gt;info)&#123;</div><div class="line">            deleteFromDLLHead();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            Node&lt;T&gt;* tmp, *pred;</div><div class="line">            <span class="keyword">for</span>(pred = head, tmp = head-&gt;next; tmp!=<span class="number">0</span> &amp;&amp; !(tmp-&gt;info == el);</div><div class="line">                pred = pred-&gt;next, tmp = tmp-&gt;next);  <span class="comment">// and a non-head node is deleted</span></div><div class="line">            <span class="keyword">if</span>(tmp != <span class="number">0</span>)&#123;</div><div class="line">                pred-&gt;next =tmp-&gt;next;</div><div class="line">                tmp-&gt;next-&gt;prev = pred;</div><div class="line">                <span class="keyword">delete</span> tmp;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::deleteNodeFromPs(<span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        deleteFromDLLHead();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos == <span class="number">-1</span>)</div><div class="line">        deleteFromDLLTail();</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        Node&lt;T&gt; *tmp = head-&gt;next;</div><div class="line">        Node&lt;T&gt; *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; pos - <span class="number">2</span>;</div><div class="line">            i++, pred = pred-&gt;next, tmp = tmp-&gt;next);</div><div class="line"></div><div class="line">        pred-&gt;next = tmp-&gt;next;</div><div class="line">        <span class="keyword">if</span>(tmp-&gt;next != <span class="number">0</span>)  <span class="comment">// 如果删除的不是最后一个节点，那么要与前面的节点连接[只在双向链表有]</span></div><div class="line">            tmp-&gt;next-&gt;prev = pred;</div><div class="line"></div><div class="line">        <span class="keyword">delete</span> tmp;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::addToDLList(<span class="keyword">const</span> T&amp;el, <span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        addToDLLHead(el);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos == <span class="number">-1</span>)</div><div class="line">        addToDLLTail(el);</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        Node&lt;T&gt; *tmp = head-&gt;next;</div><div class="line">        Node&lt;T&gt; *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; pos - <span class="number">2</span>;</div><div class="line">            i++, pred = pred-&gt;next, tmp = tmp-&gt;next);</div><div class="line"></div><div class="line">        Node&lt;T&gt;* psNode = <span class="keyword">new</span> Node&lt;T&gt;(el, tmp, pred);</div><div class="line">        tmp-&gt;prev = psNode;</div><div class="line">        pred-&gt;next = psNode;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">bool</span> DoublyLinkedList&lt;T&gt;::isInList(T el) &#123;</div><div class="line">    Node&lt;T&gt;* tmp;</div><div class="line">    <span class="keyword">for</span>(tmp=head; tmp != <span class="number">0</span> &amp;&amp; el != tmp-&gt;info; tmp = tmp-&gt;next);</div><div class="line">    <span class="keyword">return</span> tmp != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// print the singly linked lists</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">void</span> DoublyLinkedList&lt;T&gt;::printLinkedLists()&#123;</div><div class="line">    Node&lt;T&gt;* p = head;</div><div class="line">    <span class="keyword">while</span>(p != <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;info);</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_DOUBLYLLST_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"doublyLLst.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    DoublyLinkedList&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</div><div class="line">    <span class="built_in">list</span>.addToDLLTail(<span class="number">11</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLLTail(<span class="number">12</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLLTail(<span class="number">13</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLLHead(<span class="number">10</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">list</span>.deleteFromDLLHead();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the deleting from head...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the deleting from el:12...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.deleteNodeFromEl(<span class="number">12</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the deleting from ps:2...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.deleteNodeFromPs(<span class="number">2</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after the adding from ps:1...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.addToDLList(<span class="number">6</span>, <span class="number">1</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> isin = <span class="built_in">list</span>.isInList(<span class="number">6</span>);</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Is 6 in list? The answer is: "</span>&lt;&lt;isin&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出:</p>
<blockquote>
<p>10<br>11<br>12<br>13<br>after the deleting from head…<br>11<br>12<br>13<br>after the deleting from el:12…<br>11<br>13<br>after the deleting from ps:2…<br>11<br>after the adding from ps:1…<br>6<br>11<br>Is 6 in list? The answer is: 1</p>
</blockquote>
<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>此处用到模板，其声明的函数一般要在当前的头文件进行定义。当然，非要分到对应的cpp文件[例如doublyLLst.cpp]也行，只不过，这时候调用这些函数的话，要在main.cpp上面添加一句<code>include &quot;doublyLLst.cpp&quot;</code>。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><em><a href="http://stackoverflow.com/questions/13216844/undefined-reference-to-linkedlistintpush-frontint" target="_blank" rel="external">stackoverflow</a></em><br><em>Data Structures and Algorithms in C++</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Singly Linked Lists]]></title>
      <url>/2017/04/25/Singly-Linked-Lists/</url>
      <content type="html"><![CDATA[<h5 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h5><p>单链表的原理比较简单：单链表由一个个的节点组成，每个节点包含其要存储的数据和一个指针，其中指针指向下一个节点，由此串成一个单向的链表。容易算出，在非首部的任意位置n处，单链表的增删改查的复杂度都为<strong>O(n)</strong>.在单链表的开始，即首部的增删改查均为<strong>O(1)</strong>.与Array的复杂度对比具体可参考wiki这张表：</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170425/Screenshot%20from%202017-04-25%2000-17-42.png" alt=""></p>
<p>初步的实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> IntNode&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="keyword">int</span> info;</div><div class="line">    IntNode* next;</div><div class="line"></div><div class="line">    IntNode()&#123;</div><div class="line">        next = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    IntNode(<span class="keyword">int</span> i, IntNode* in = <span class="number">0</span>)&#123;</div><div class="line">        info = i;</div><div class="line">        next = in;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 打印链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLinkedLists</span><span class="params">(IntNode* p )</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(p != <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;info);</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    IntNode* p = <span class="keyword">new</span> IntNode(<span class="number">10</span>);</div><div class="line">    p-&gt;next = <span class="keyword">new</span> IntNode(<span class="number">8</span>);</div><div class="line">    p-&gt;next-&gt;next = <span class="keyword">new</span> IntNode(<span class="number">50</span>);</div><div class="line">    printLinkedLists(p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>10<br>8<br>50</p>
</blockquote>
<h5 id="一般实现"><a href="#一般实现" class="headerlink" title="一般实现"></a>一般实现</h5><h6 id="intSLLst-h"><a href="#intSLLst-h" class="headerlink" title="intSLLst.h"></a>intSLLst.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CPPPROJECTS_INTSSLST_H_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CPPPROJECTS_INTSSLST_H_H</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> IntNode&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> info;</div><div class="line">    IntNode* next;</div><div class="line"></div><div class="line">    IntNode(<span class="keyword">int</span> el, IntNode* ptr = <span class="number">0</span>)&#123;</div><div class="line">        info = el; next = ptr;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> IntSLList&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    IntNode *head, *tail;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    IntSLList()&#123;</div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    ~IntSLList();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> head==<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToHead</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToTail</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteFromHead</span><span class="params">()</span></span>;  <span class="comment">// delete the head and return its info;</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteFromTail</span><span class="params">()</span></span>;  <span class="comment">// delete the tail and return its info;</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromEl</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNodeFromPos</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToLList</span><span class="params">(<span class="keyword">int</span> el, <span class="keyword">int</span> pos)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInList</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">const</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printLinkedLists</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CPPPROJECTS_INTSSLST_H_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="intSLLst-cpp"><a href="#intSLLst-cpp" class="headerlink" title="intSLLst.cpp"></a>intSLLst.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-4-24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"intSSLst.h"</span></span></div><div class="line"></div><div class="line">IntSLList::~IntSLList()&#123;</div><div class="line">    <span class="keyword">for</span>(IntNode *p; !isEmpty();)&#123;</div><div class="line">        p = head-&gt;next;</div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = p;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::addToHead(<span class="keyword">int</span> el) &#123;</div><div class="line">    head = <span class="keyword">new</span> IntNode(el, head);</div><div class="line">    <span class="keyword">if</span>(tail == <span class="number">0</span>)</div><div class="line">        tail = head;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::addToTail(<span class="keyword">int</span> el) &#123;</div><div class="line">    <span class="keyword">if</span>(tail!=<span class="number">0</span>)&#123; <span class="comment">// if list not empty</span></div><div class="line">        tail-&gt;next = <span class="keyword">new</span> IntNode(el);</div><div class="line">        tail = tail-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">else</span> head = tail = <span class="keyword">new</span> IntNode(el);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> IntSLList::deleteFromHead() &#123;</div><div class="line">    <span class="keyword">if</span>(isEmpty())</div><div class="line">        <span class="keyword">throw</span>(<span class="string">"Empty"</span>);  <span class="comment">// 若为空表，从头部删除的话就抛出错误</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> el = head-&gt;info;</div><div class="line">    IntNode *tmp = head;</div><div class="line">    <span class="keyword">if</span>(head == tail)  <span class="comment">// if only one node in the list</span></div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> head = head-&gt;next;</div><div class="line">    <span class="keyword">delete</span> tmp;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> IntSLList::deleteFromTail() &#123;</div><div class="line">    <span class="keyword">int</span> el = tail-&gt;info;</div><div class="line">    <span class="keyword">if</span>(head == tail)&#123;</div><div class="line">        <span class="keyword">delete</span> head;</div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;  <span class="comment">// if more than one node in the list</span></div><div class="line">        IntNode * tmp;  <span class="comment">// find the predecessor of tail</span></div><div class="line">        <span class="keyword">for</span>(tmp=head; tmp-&gt;next!=tail;tmp=tmp-&gt;next);</div><div class="line">        <span class="keyword">delete</span> tail;</div><div class="line">        tail = tmp;</div><div class="line">        tail-&gt;next = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::deleteNodeFromEl(<span class="keyword">int</span> el) &#123;</div><div class="line">    <span class="keyword">if</span>(head != <span class="number">0</span>)&#123; <span class="comment">// if non-empty list</span></div><div class="line">        <span class="keyword">if</span>(head == tail &amp;&amp; el == head-&gt;info)&#123;  <span class="comment">// if only one</span></div><div class="line">            <span class="keyword">delete</span> head;                       <span class="comment">// node in the list</span></div><div class="line">            head = tail = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(el == head-&gt;info)&#123; <span class="comment">// if more than one node in the list</span></div><div class="line">            IntNode* tmp = head;  <span class="comment">// 原文是head-&gt;next, 应该是错了</span></div><div class="line">            head = head-&gt;next;</div><div class="line">            <span class="keyword">delete</span> tmp;  <span class="comment">// and old head is deleted</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;<span class="comment">// if mpre than onde node in the lsit</span></div><div class="line">            IntNode *pred, *tmp;</div><div class="line">            <span class="keyword">for</span>(pred = head, tmp = head-&gt;next; tmp!=<span class="number">0</span> &amp;&amp; !(tmp-&gt;info == el);</div><div class="line">                    pred = pred-&gt;next, tmp = tmp-&gt;next);  <span class="comment">// and a non-head node is deleted</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(tmp != <span class="number">0</span>)&#123;</div><div class="line">                pred-&gt;next = tmp-&gt;next;</div><div class="line">                <span class="keyword">if</span>(tmp == tail)</div><div class="line">                    tail = pred;;</div><div class="line">                <span class="keyword">delete</span> tmp;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::deleteNodeFromPos(<span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        deleteFromHead();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos == <span class="number">-1</span>)</div><div class="line">        deleteFromTail();</div><div class="line"></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        IntNode *tmp=head-&gt;next;</div><div class="line">        IntNode *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pos<span class="number">-2</span>; i++, tmp = tmp-&gt;next, pred = pred-&gt;next);</div><div class="line"></div><div class="line">        pred-&gt;next = tmp-&gt;next;</div><div class="line">        <span class="keyword">delete</span> tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> IntSLList::addToLList(<span class="keyword">int</span> el, <span class="keyword">int</span> pos) &#123;</div><div class="line">    <span class="keyword">if</span>(pos == <span class="number">1</span>)</div><div class="line">        addToHead(el);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( pos == <span class="number">-1</span> )</div><div class="line">        addToTail(el);</div><div class="line"></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        IntNode *tmp=head-&gt;next;</div><div class="line">        IntNode *pred = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pos<span class="number">-2</span>; i++, tmp = tmp-&gt;next, pred = pred-&gt;next);</div><div class="line"></div><div class="line">        IntNode* posNode = <span class="keyword">new</span> IntNode(el);</div><div class="line">        posNode-&gt;next = tmp;</div><div class="line">        pred-&gt;next = posNode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">bool</span> IntSLList::isInList(<span class="keyword">int</span> el) <span class="keyword">const</span> &#123;</div><div class="line">    IntNode *tmp;</div><div class="line">    <span class="keyword">for</span>(tmp = head; tmp !=<span class="number">0</span> &amp;&amp; (!tmp-&gt;info == el); tmp = tmp-&gt;next);</div><div class="line">    <span class="keyword">return</span> tmp != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// print the gly linked lists</span></div><div class="line"><span class="keyword">void</span> IntSLList::printLinkedLists()&#123;</div><div class="line">    IntNode* p = head;</div><div class="line">    <span class="keyword">while</span>(p != <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;info);</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"intSSLst.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// Linked lists</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    IntSLList <span class="built_in">list</span>;</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">50</span>);</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">8</span>);</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">10</span>);</div><div class="line">    <span class="built_in">list</span>.addToHead(<span class="number">13</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="built_in">list</span>.deleteFromHead();</div><div class="line">    &#125;<span class="keyword">catch</span> (<span class="keyword">char</span> <span class="keyword">const</span> * s)&#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"Error: "</span>&lt;&lt;s&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"After the deleting form head...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"After the deleting from pos: 2th...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.deleteNodeFromPos(<span class="number">2</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"After the adding from pos: 2th...\n"</span>);</div><div class="line">    <span class="built_in">list</span>.addToLList(<span class="number">77</span>, <span class="number">2</span>);</div><div class="line">    <span class="built_in">list</span>.printLinkedLists();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>13<br>10<br>8<br>50<br>After the deleting form head…<br>10<br>8<br>50<br>After the deleting from pos: 2th…<br>10<br>50<br>After the adding from pos: 2th…<br>10<br>77<br>50</p>
</blockquote>
<h6 id="new-delete-and-pointers"><a href="#new-delete-and-pointers" class="headerlink" title="new, delete and pointers"></a>new, delete and pointers</h6><p>在理解上面的deleteFromHead函数时有些懵，模仿着做了个测试，可以帮助理解。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num1 = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> num2 = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>* Ptr1 = <span class="keyword">new</span> <span class="keyword">int</span>(num1);</div><div class="line">    <span class="keyword">int</span>* Ptr2 = Ptr1; <span class="comment">// Ptr2与Ptr1是指向同一个地址的指针</span></div><div class="line">    <span class="keyword">int</span>* Ptr3 = &amp;num2;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr2);</div><div class="line">    Ptr1 = Ptr3;  <span class="comment">// 这里Ptr2已经为新的指针,和Ptr3指向同一地址</span></div><div class="line"></div><div class="line">    <span class="keyword">delete</span> Ptr2;  <span class="comment">// 释放Ptr2指向的内存,因为此时Ptr1已经和Ptr3指向了同一地址,所以不会受影响.</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *Ptr2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>1<br>1<br>2<br>0</p>
</blockquote>
<h5 id="基于ADT的实现"><a href="#基于ADT的实现" class="headerlink" title="基于ADT的实现"></a>基于ADT的实现</h5><h6 id="ListADT-h"><a href="#ListADT-h" class="headerlink" title="ListADT.h"></a>ListADT.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by shensir on 17-8-13.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MDATASTRUCTURE_LISTADT_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MDATASTRUCTURE_LISTADT_H</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// List ADT</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="keyword">class</span> List&#123;  <span class="comment">// List ADT</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> List&amp;)&#123;&#125;  <span class="comment">// Protect assignment</span></div><div class="line">    List(<span class="keyword">const</span> List&amp;)&#123;&#125;  <span class="comment">// Protect copy constructor</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    List()&#123;&#125;  <span class="comment">// Default constructor</span></div><div class="line">    <span class="keyword">virtual</span> ~List()&#123;&#125;  <span class="comment">// Bae destructor</span></div><div class="line"></div><div class="line">    <span class="comment">// Clear contents from the list, to make it empty</span></div><div class="line">    <span class="keyword">virtual</span> <span class="keyword">void</span> clear() = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Insert an element at the current location</span></div><div class="line">    <span class="comment">// item: The element to be inserted</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> E&amp; item)</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Append an element at the end of the list</span></div><div class="line">    <span class="comment">// item: The element to be appended</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">const</span> E&amp; item)</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Remove and return the current element</span></div><div class="line">    <span class="comment">// Return: the element that was removed</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> E <span class="title">remove</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Set the current position to the start of the list</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">moveToStart</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Set the current position to the end of the list</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">moveToEnd</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Move the current position one step left.</span></div><div class="line">    <span class="comment">// No change if already at beginning</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Move the current position one step right.</span></div><div class="line">    <span class="comment">// No change if already at end</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Return: the number of elements in the list</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Return: the position of the current element</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">currPos</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Set current position</span></div><div class="line">    <span class="comment">// pos: The position to make current</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">moveToPos</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Return: The current element</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> E&amp; <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Print List</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//MDATASTRUCTURE_LISTADT_H</span></span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="ListADT-cpp"><a href="#ListADT-cpp" class="headerlink" title="ListADT.cpp"></a>ListADT.cpp</h6><p>这里额外附带了基于数组的顺序表的实现。此外是基于节点类的实现，与上面基于struct的实现略有差别。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ListADT.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> defaultSize = <span class="number">10</span>;</div><div class="line"><span class="comment">// Array based list implementation</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</div><div class="line"><span class="keyword">class</span> Alist: <span class="keyword">public</span> List&lt;E&gt;&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> maxSize;  <span class="comment">// Maximum size of list</span></div><div class="line">    <span class="keyword">int</span> listSize; <span class="comment">// Number of list items now</span></div><div class="line">    <span class="keyword">int</span> curr;  <span class="comment">// Position of current element</span></div><div class="line">    E* listArray;  <span class="comment">// Array holding list elements</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Alist(<span class="keyword">int</span> size=defaultSize)&#123;<span class="comment">// Constructor</span></div><div class="line">        maxSize = size;</div><div class="line">        listSize = curr = <span class="number">0</span>;</div><div class="line">        listArray = <span class="keyword">new</span> E[maxSize];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ~Alist()&#123;<span class="keyword">delete</span> [] listArray;&#125;  <span class="comment">// Destructor</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;  <span class="comment">// Reinitialize the list</span></div><div class="line">        <span class="keyword">delete</span> [] listArray; <span class="comment">// Remove the array</span></div><div class="line">        listSize = curr = <span class="number">0</span>; <span class="comment">// Reset the size</span></div><div class="line">        listArray = <span class="keyword">new</span> E[maxSize];  <span class="comment">// Recreate array</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// insert "it" at current position</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> E&amp; it)</span></span>&#123;</div><div class="line">        assert(listSize &lt; maxSize &amp;&amp; <span class="string">"List capacity exceeded"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=listSize; i &gt; curr; i--)</div><div class="line">            listArray[i] = listArray[i<span class="number">-1</span>];  <span class="comment">// shift to make room</span></div><div class="line">        listArray[curr] = it;</div><div class="line">        listSize++;  <span class="comment">// Increment list size</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">const</span> E&amp; it)</span></span>&#123;  <span class="comment">// Append "it"</span></div><div class="line">        assert(listSize &lt; maxSize &amp;&amp; <span class="string">"List capacity exceeded"</span>);</div><div class="line">        listArray[listSize++] = it;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Remove and return the current element</span></div><div class="line">    <span class="function">E <span class="title">remove</span><span class="params">()</span></span>&#123;</div><div class="line">        assert((curr &gt; <span class="number">0</span>) &amp;&amp; (curr &lt; listSize) &amp;&amp; <span class="string">"No element"</span>);</div><div class="line">        E it = listArray[curr];  <span class="comment">// Copy the element</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=curr; i&lt;listSize<span class="number">-1</span>; i++)</div><div class="line">            listArray[i] = listArray[i+<span class="number">1</span>];  <span class="comment">// shift them down</span></div><div class="line">        listSize--;</div><div class="line">        <span class="keyword">return</span> it;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveToStart</span><span class="params">()</span></span>&#123;curr = <span class="number">0</span>;&#125;  <span class="comment">// Reset position</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveToEnd</span><span class="params">()</span></span>&#123;curr = listSize;&#125;  <span class="comment">// Set at end</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(curr != <span class="number">0</span>) curr--;&#125;  <span class="comment">// Back up</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;<span class="keyword">if</span>(curr &lt; listSize) curr++;&#125;  <span class="comment">// Next</span></div><div class="line"></div><div class="line">    <span class="comment">// Return list size</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> listSize;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return current position</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">currPos</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> curr;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Set current list position to "pos"</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveToPos</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">        assert((pos&gt;<span class="number">0</span>) &amp;&amp; (pos&lt;listSize) &amp;&amp; <span class="string">"Pos out of range"</span>);</div><div class="line">        curr = pos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">const</span> E&amp; <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="comment">// Return current element</span></div><div class="line">        assert((curr&gt;=<span class="number">0</span>) &amp;&amp; (curr&lt;listSize) &amp;&amp; <span class="string">"No current element"</span>);</div><div class="line">        <span class="keyword">return</span> listArray[curr];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Print the list</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; listSize; i++)&#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; listArray[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Singly linked list node</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="keyword">class</span> Link&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    E element;  <span class="comment">// Value for the node</span></div><div class="line">    Link* next;  <span class="comment">// Pointer to next node in list</span></div><div class="line"></div><div class="line">    <span class="comment">// Constructor</span></div><div class="line">    Link(<span class="keyword">const</span> E&amp; elemval, Link* nextval = <span class="literal">NULL</span>)&#123;</div><div class="line">        element = elemval;</div><div class="line">        next = nextval;</div><div class="line">    &#125;</div><div class="line">    Link(Link* nextval=<span class="literal">NULL</span>)&#123;next=nextval;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Linked list implementation</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt; <span class="keyword">class</span> LList: <span class="keyword">public</span> List&lt;E&gt;&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Link&lt;E&gt;* head;  <span class="comment">// Pointer to list header</span></div><div class="line">    Link&lt;E&gt;* tail;  <span class="comment">// Pointer to last element</span></div><div class="line">    Link&lt;E&gt;* curr;  <span class="comment">// Pointer to current element</span></div><div class="line">    <span class="keyword">int</span> cnt;  <span class="comment">// Size of list</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  <span class="comment">// Initialization helper method</span></div><div class="line">        curr = tail = head = <span class="keyword">new</span> Link&lt;E&gt;;</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeall</span><span class="params">()</span></span>&#123;  <span class="comment">// Return link node to free store</span></div><div class="line">        <span class="keyword">while</span>(head != <span class="literal">NULL</span>)&#123;</div><div class="line">            curr = head;</div><div class="line">            head = head-&gt;next;</div><div class="line">            <span class="keyword">delete</span> curr;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    LList(<span class="keyword">int</span> size=defaultSize)&#123;init(); &#125;  <span class="comment">// Constructor</span></div><div class="line"></div><div class="line">    ~LList()&#123;removeall();&#125;  <span class="comment">// Destructor</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;  <span class="comment">// Print list content</span></div><div class="line">        assert(length()!=<span class="number">0</span> &amp;&amp;<span class="string">"Empty list"</span>);</div><div class="line">        Link&lt;E&gt;* temp = head-&gt;next;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(temp == tail)&#123;</div><div class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; temp-&gt;element;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; temp-&gt;element &lt;&lt; <span class="string">" "</span>;</div><div class="line">            temp = temp-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">        <span class="comment">// temp不删除,最后指向的是tail指向的内存，不能释放.</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123; removeall(); init(); &#125;  <span class="comment">// Clear List</span></div><div class="line"></div><div class="line">    <span class="comment">// Insert "it" at current position</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> E&amp; it)</span></span>&#123;</div><div class="line">        curr-&gt;next = <span class="keyword">new</span> Link&lt;E&gt;(it, curr-&gt;next);</div><div class="line">        <span class="keyword">if</span>(tail == curr) tail = curr-&gt;next;  <span class="comment">// new tail</span></div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">const</span> E&amp; it)</span></span>&#123;  <span class="comment">// Append "it" to list</span></div><div class="line">        tail = tail-&gt;next = <span class="keyword">new</span> Link&lt;E&gt;(it, <span class="literal">NULL</span>);</div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Remove and return current element</span></div><div class="line">    <span class="function">E <span class="title">remove</span><span class="params">()</span></span>&#123;</div><div class="line">        assert(curr-&gt;next != <span class="literal">NULL</span>  &amp;&amp; <span class="string">"No element"</span>);</div><div class="line">        E it = curr-&gt;next-&gt;element;  <span class="comment">// Remember value</span></div><div class="line">        Link&lt;E&gt;* ltemp = curr-&gt;next;  <span class="comment">// Remember link node</span></div><div class="line">        <span class="keyword">if</span>(tail == curr-&gt;next) tail = curr;  <span class="comment">// Reset tail</span></div><div class="line">        curr-&gt;next = curr-&gt;next-&gt;next;  <span class="comment">// Remove from list</span></div><div class="line">        <span class="keyword">delete</span> ltemp;  <span class="comment">// Reclaim space</span></div><div class="line">        cnt--;  <span class="comment">// Decrement the count</span></div><div class="line">        <span class="keyword">return</span> it;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveToStart</span><span class="params">()</span></span>&#123;  <span class="comment">// Place curr at list start</span></div><div class="line">        curr = head;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveToEnd</span><span class="params">()</span></span>&#123;  <span class="comment">// Place curr at list end</span></div><div class="line">        curr = tail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Move curr one step left; no change if already at front</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(curr == head) <span class="keyword">return</span>;</div><div class="line">        Link&lt;E&gt;* temp = head;</div><div class="line">        <span class="comment">// March down list until we find the previous element</span></div><div class="line">        <span class="keyword">while</span>(temp-&gt;next != curr)temp = temp-&gt;next;</div><div class="line">        curr = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Move curr one step right; no change if already at end</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(curr == tail) <span class="keyword">return</span>;</div><div class="line">        curr = curr-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return the position of the current element</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">currPos</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        Link&lt;E&gt;*temp = head;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; temp!=curr; i++)&#123;</div><div class="line">            temp = temp-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Move down list to "pos" position</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveToPos</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">        assert((pos&gt;=<span class="number">0</span>)  &amp;&amp; (pos&lt;=cnt) &amp;&amp; <span class="string">"Position out of range"</span>);</div><div class="line">        curr = head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pos; i++)&#123;curr = curr-&gt;next;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">const</span> E&amp; <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        assert(curr-&gt;next != <span class="literal">NULL</span> &amp;&amp;<span class="string">"No value"</span>);</div><div class="line">        <span class="keyword">return</span> curr-&gt;next-&gt;element;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ListADT.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ListADT.cpp"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    LList&lt;<span class="keyword">int</span>&gt;L(<span class="number">100</span>);</div><div class="line">    L.append(<span class="number">3</span>);</div><div class="line">    L.append(<span class="number">4</span>);</div><div class="line">    L.append(<span class="number">5</span>);</div><div class="line">    L.printList();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>3 4 5</p>
</blockquote>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><em>Data Structures and Algorithms in C++</em></p>
<p><em>Data Structures and Algorithm Analysis in C++</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Const in Cpp]]></title>
      <url>/2017/04/09/Const-in-Cpp/</url>
      <content type="html"><![CDATA[<p>关于const在函数声明里的应用。const放在函数前与后的区别。<br>先看下<a href="http://www.cplusplus.com/forum/general/12087/" target="_blank" rel="external">cplusplus</a>的一个问答：</p>
<p>问：</p>
<blockquote>
<p>Could you please explain the different between:<br>void const f() {} and void f() const {}.</p>
</blockquote>
<p>答：</p>
<blockquote>
<p>void const f() is equivilent to const void f(), which means the return type (in this case a void) is const. This is totally meaningless not only because it’s a void (there is nothing there that needs a const qualifier), but also because it’s a return type (returning something as const doesn’t make a whole lot of sense).</p>
<p>void f() const makes the function itself const. This only really has meaning for member functions. Making a member function const means that it cannot call any non-const member functions, nor can it change any member variables. It also means that the function can be called via a const object of the class:</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> A</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Const_No</span><span class="params">()</span></span>;   <span class="comment">// nonconst member function</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Const_Yes</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// const member function</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//-----------</span></div><div class="line"></div><div class="line">A  obj_nonconst;  <span class="comment">// nonconst object</span></div><div class="line">obj_nonconst.Const_No();  <span class="comment">// works fine</span></div><div class="line">obj_nonconst.Const_Yes(); <span class="comment">// works fine</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> A obj_const = A(); <span class="comment">// const object</span></div><div class="line">obj_const.Const_Yes(); <span class="comment">// works fine (const object can call const function)</span></div><div class="line">obj_const.Const_No();  <span class="comment">// ERROR (const object cannot call nonconst function) </span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>再参考下<a href="http://stackoverflow.com/questions/751681/meaning-of-const-last-in-a-c-method-declaration" target="_blank" rel="external">stackoverflow</a>:</p>
<blockquote>
<p>When you add the const keyword to a method the this pointer will essentially become const, and you can therefore not change any member data. (Unless you use mutable, more on that later).</p>
</blockquote>
<p>简单讲，就是说，const放在前面，是保证函数返回值为const；放在函数后面，是保证其调用的对象，也就是参数为const,不能被改变。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV系列笔记六：图片颜色空间缩减与遍历]]></title>
      <url>/2017/04/09/OPenCV-%E5%9B%BE%E7%89%87%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E7%BC%A9%E5%87%8F%E4%B8%8E%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p>记录下遍历图片的以及缩减图片颜色空间的几种办法，主要是记录下关于位运算进行像素的按位操作。<br>首先我们直观上看下图片的存储格式：</p>
<ul>
<li><p>[ ] 灰度图像<br>-<img src="http://img.blog.csdn.net/20160425221258898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
</li>
<li><p>[ ] 彩色图像<br><img src="http://img.blog.csdn.net/20160425221306945?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
</li>
</ul>
<h5 id="几种遍历的方法"><a href="#几种遍历的方法" class="headerlink" title="几种遍历的方法"></a>几种遍历的方法</h5><h6 id="利用指针进行"><a href="#利用指针进行" class="headerlink" title="利用指针进行"></a>利用指针进行</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReducePtr</span><span class="params">(cv::Mat image, <span class="keyword">int</span> div=<span class="number">64</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nl = image.rows; <span class="comment">// number of lines</span></div><div class="line">    <span class="comment">// total number or element per ;ine</span></div><div class="line">    <span class="keyword">int</span> nc = image.cols * image.channels();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)&#123;</div><div class="line">        <span class="comment">//get the address of row j</span></div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)&#123;</div><div class="line">            <span class="comment">// process each pixel=======================</span></div><div class="line"></div><div class="line">            data[i] = data[i]/div*div + div/<span class="number">2</span>;</div><div class="line">            <span class="comment">// OR in this way</span></div><div class="line">            <span class="comment">//data[i] = (data[i]/div)*div + div/2;</span></div><div class="line"></div><div class="line">            <span class="comment">//end of pixel processing=====================</span></div><div class="line">        &#125;<span class="comment">//end of line</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 理解reduction核心算法,这里假设div为10.</span></div><div class="line"><span class="comment">// 去除‘余数’， 拉向中心</span></div><div class="line"><span class="comment">// 11  --&gt; data[i]/div*div + div/2 --&gt; 10 + 5 --&gt; 15</span></div><div class="line"><span class="comment">// 16  --&gt; data[i]/div*div + div/2 --&gt; 10 + 5 --&gt; 15</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 使用Clone,保护原来图像不受损坏</span></div><div class="line">    cv::Mat imageClone = image.clone();</div><div class="line">    colorReducePtr(imageClone, <span class="number">64</span>);</div><div class="line">    cv::namedWindow(<span class="string">"Result"</span>);</div><div class="line">    cv::imshow(<span class="string">"Result"</span>, imageClone);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduceBit</span><span class="params">(cv::Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> nl = image.rows;</div><div class="line">    <span class="keyword">int</span> nc = image.cols*image.channels();</div><div class="line">    <span class="keyword">if</span>(image.isContinuous())&#123;</div><div class="line">        nc = nc*nl;</div><div class="line">        nl = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(</div><div class="line">            <span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>)+<span class="number">0.5</span>);</div><div class="line"></div><div class="line">    uchar mask = <span class="number">0xFF</span>&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nl;j++)&#123;</div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)&#123;</div><div class="line">            *data &amp;= mask;   <span class="comment">//a &amp;= b; set a to a &amp; b</span></div><div class="line">            *data++ += div2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line"></div><div class="line">    colorReduceBit(image);</div><div class="line">    cv::namedWindow(<span class="string">"Result"</span>);</div><div class="line">    cv::imshow(<span class="string">"Result"</span>, image);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>几点解释：</p>
<blockquote>
<p>0xFF&lt;&lt;n 是为左移运算，这里简单说就是1111 1111(0xFF的二进制表示)整体向左移动n个长度，右边空出部分用0补充。假设n=4,则结果为1111 0000</p>
<p><em>data &amp;= mask等价于</em>data = (<em>data &amp; mask),即先进行按位和再赋值给</em>data, 例如说*data = 11001100,那么根据上面叙述，n=4时mask=1111 0000 ，那么取按位和之后得到，1100 0000<br>更直观地看，在这里div=64, 那么n=6, mask = 1100 0000, 也就是说，在按位的时候，每个像素点的二进制值的后六位将会被重置为0，只保留前两位。而1100 0000 = 192, 容易算出63&amp;192 = 0, 64&amp;192 = 64, 127&amp;192=64, 128&amp;192=128…很清楚的可以看出，0~255被分割为4段，每段单位为64。</p>
<p><em>data++ += div2;的运算等价于</em>data += div/2; data++[指针移动]，可以如下测试得到。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> * p = &amp;a;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;p&lt;&lt;<span class="string">'\n'</span>;</div><div class="line">    *p++ += <span class="number">1</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">'\n'</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;p;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>0x7ffe0d69780c<br>2<br>0x7ffe0d697810<br>可以看到，a的值恰好增加了1，且指针p的位置增加了4,即一个单位int的长度。</p>
</blockquote>
<h6 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Iterators</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce</span><span class="params">(cv::Mat image, <span class="keyword">int</span> div=<span class="number">64</span>)</span></span>&#123;</div><div class="line">    <span class="comment">// div must be a power of 2</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(</div><div class="line">            <span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>)+<span class="number">0.5</span>);</div><div class="line">    <span class="comment">// mask used to round the pixel value</span></div><div class="line">    uchar mask = <span class="number">0xFF</span>&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">//get iterators</span></div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator it = image.begin&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator itend = image.end&lt;cv::Vec3b&gt;();</div><div class="line"></div><div class="line">    <span class="comment">//scan all pixels</span></div><div class="line">    <span class="keyword">for</span>(;it!=itend;++it)&#123;</div><div class="line">        (*it)[<span class="number">0</span>] &amp;= mask;</div><div class="line">        (*it)[<span class="number">0</span>] += div2;</div><div class="line"></div><div class="line">        (*it)[<span class="number">1</span>] &amp;= mask;</div><div class="line">        (*it)[<span class="number">1</span>] += div2;</div><div class="line"></div><div class="line">        (*it)[<span class="number">2</span>] &amp;= mask;</div><div class="line">        (*it)[<span class="number">2</span>] += div2;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::Mat image = cv::imread(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/lake.png"</span>);</div><div class="line"></div><div class="line">    colorReduce(image);</div><div class="line">    cv::namedWindow(<span class="string">"Result"</span>);</div><div class="line">    cv::imshow(<span class="string">"Result"</span>, image);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="时间效率比较"><a href="#时间效率比较" class="headerlink" title="时间效率比较"></a>时间效率比较</h5><p>这里，我们综合上面的三种方法进行时间效率的比较</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// get run time [学习函数作为参数的用法]</div><div class="line">double getTime(void(*pfunc)(cv::Mat,int), cv::Mat img,int div)&#123;</div><div class="line">    const int64 start = cv::getTickCount();</div><div class="line">    pfunc(img, 64);</div><div class="line">    double duration = (cv::getTickCount()-start)/cv::getTickFrequency();</div><div class="line">    std::cout&lt;&lt;duration&lt;&lt;'\n';</div><div class="line">    return duration;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 指针，除法</div><div class="line">void colorReducePtr(cv::Mat image, int div=64)&#123;</div><div class="line">    int nl = image.rows; // number of lines</div><div class="line">    // total number or element per ;ine</div><div class="line">    int nc = image.cols * image.channels();</div><div class="line"></div><div class="line">    for(int j=0; j&lt;nl; j++)&#123;</div><div class="line">        // get the address of row j</div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        for(int i=0;i&lt;nc;i++)&#123;</div><div class="line">            // process each pixel=======================</div><div class="line"></div><div class="line">            data[i] = data[i]/div*div + div/2;</div><div class="line">            // OR in this way</div><div class="line">            //data[i] = (data[i]/div)*div + div/2;</div><div class="line"></div><div class="line">            //end of pixel processing=====================</div><div class="line">        &#125;//end of line</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//位运算</div><div class="line"></div><div class="line">void colorReduceBit(cv::Mat image, int div=64)&#123;</div><div class="line">    int nl = image.rows;</div><div class="line">    int nc = image.cols*image.channels();</div><div class="line">    if(image.isContinuous())&#123;</div><div class="line">        nc = nc*nl;</div><div class="line">        nl = 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 四舍五入取指数</div><div class="line">    int n = static_cast&lt;int&gt;(</div><div class="line">            log(static_cast&lt;double&gt;(div))/log(2.0)+0.5);</div><div class="line"></div><div class="line">    uchar mask = 0xFF&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;1;</div><div class="line">    for(int j=0;j&lt;nl;j++)&#123;</div><div class="line">        uchar* data = image.ptr&lt;uchar&gt;(j);</div><div class="line">        for(int i=0;i&lt;nc;i++)&#123;</div><div class="line">            // 下面这步等同于data[i] = data[i]/div*div</div><div class="line">            *data &amp;= mask;   //a &amp;= b; set a to a &amp; b</div><div class="line">            *data++ += div2;  // *data += div/2; data++[指针移动]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//Iterator</div><div class="line"></div><div class="line">void colorReduceItr(cv::Mat image, int div=64)&#123;</div><div class="line">    // div must be a power of 2</div><div class="line">    int n = static_cast&lt;int&gt;(</div><div class="line">            log(static_cast&lt;double&gt;(div))/log(2.0)+0.5);</div><div class="line">    // mask used to round the pixel value</div><div class="line">    uchar mask = 0xFF&lt;&lt;n;</div><div class="line">    uchar div2 = div&gt;&gt;1;</div><div class="line"></div><div class="line">    //get iterators</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator it = image.begin&lt;cv::Vec3b&gt;();</div><div class="line">    cv::Mat_&lt;cv::Vec3b&gt;::iterator itend = image.end&lt;cv::Vec3b&gt;();</div><div class="line"></div><div class="line">    //scan all pixels</div><div class="line">    for(;it!=itend;++it)&#123;</div><div class="line">        (*it)[0] &amp;= mask;</div><div class="line">        (*it)[0] += div2;</div><div class="line"></div><div class="line">        (*it)[1] &amp;= mask;</div><div class="line">        (*it)[1] += div2;</div><div class="line"></div><div class="line">        (*it)[2] &amp;= mask;</div><div class="line">        (*it)[2] += div2;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    cv::Mat image = cv::imread(".../lake.png");</div><div class="line">    cv::Mat imagePtr(image), imageBit(image), imageItr(image);</div><div class="line"></div><div class="line">    // Ptr</div><div class="line">    std::cout&lt;&lt;"colorReducePtr=====\nTime: ";</div><div class="line">    getTime(colorReducePtr, imagePtr, 64);</div><div class="line"></div><div class="line">    // Bit</div><div class="line">    std::cout&lt;&lt;"colorReduceBit=====\nTime: ";</div><div class="line">    getTime(colorReduceBit, imageBit, 64);</div><div class="line"></div><div class="line">    // Itr</div><div class="line">    std::cout&lt;&lt;"colorReduceItr=====\nTime: ";</div><div class="line">    getTime(colorReduceItr, imageItr, 64);</div><div class="line"></div><div class="line"></div><div class="line">    cv::namedWindow("Result");</div><div class="line">    cv::imshow("Result", image);</div><div class="line">    cv::waitKey(0);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">colorReducePtr=====</div><div class="line">Time: 0.00144757</div><div class="line">colorReduceBit=====</div><div class="line">Time: 0.000849209</div><div class="line">colorReduceItr=====</div><div class="line">Time: 0.00298409</div></pre></td></tr></table></figure></p>
<p>可以明显看到位运算的高效</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://www.lai18.com/content/10109307.html" target="_blank" rel="external">OpenCv学习笔记(六)</a><br><a href="https://en.wikipedia.org/wiki/Bitwise_operation#Bit_shifts" target="_blank" rel="external">Bitwise operation</a></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Opencv3学习笔记]]></title>
      <url>/2017/04/06/Learning-Opencv3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h6 id="关于遍历"><a href="#关于遍历" class="headerlink" title="关于遍历"></a>关于遍历</h6><p>再学到P123时，发现书上的代码是无法运行的，先来看下它的写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">int</span> sz[<span class="number">3</span>] = &#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>&#125;;</div><div class="line">cv::<span class="function">Mat	<span class="title">m</span><span class="params">(<span class="number">3</span>, sz, CV_32FC3)</span></span>;		<span class="comment">//	A	three-dimensional	array	of	size	4-by-4-by-4</span></div><div class="line">cv::randu( m, <span class="number">-1.0</span>f, <span class="number">1.0f</span>);			<span class="comment">//	fill	with	random	numbers	from	-1.0	to	1.0</span></div><div class="line"><span class="keyword">float</span> max = <span class="number">0.0f</span>;														<span class="comment">//	minimum	possible	value	of	L2	norm</span></div><div class="line">cv::MatConstIterator&lt;cv::Vec3f&gt; it = m.begin();</div><div class="line"><span class="keyword">while</span>( it != m.end() ) &#123;</div><div class="line">    len2 = (*it)[<span class="number">0</span>]*(*it)[<span class="number">0</span>]+(*it)[<span class="number">1</span>]*(*it)[<span class="number">1</span>]+(*it)[<span class="number">2</span>]*(*it)[<span class="number">2</span>];</div><div class="line">    <span class="keyword">if</span>( len2 &gt; max ) max = len2;</div><div class="line">    it++;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>首先，len2未声明，再者，MatConstIterator的用法可能有变化。<br>参考<a href="http://docs.opencv.org/trunk/d5/dd2/classcv_1_1NAryMatIterator.html" target="_blank" rel="external">官方文档示例代码</a>解决。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sz[<span class="number">3</span>] = &#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>&#125;;</div><div class="line">    cv::<span class="function">Mat	<span class="title">m</span><span class="params">(<span class="number">3</span>, sz, CV_32FC3)</span></span>;		<span class="comment">//	A	three-dimensional	array	of	size	4-by-4-by-4</span></div><div class="line">    cv::randu( m, <span class="number">-1.0</span>f, <span class="number">1.0f</span>);			<span class="comment">//	fill	with	random	numbers	from	-1.0	to	1.0</span></div><div class="line">    <span class="keyword">float</span> max = <span class="number">0.0f</span>;														<span class="comment">//	minimum	possible	value	of	L2	norm</span></div><div class="line">    cv::MatConstIterator_&lt;cv::Vec3f&gt; it = m.begin&lt;cv::Vec3f&gt;();</div><div class="line">    <span class="keyword">while</span>( it != m.end&lt;cv::Vec3f&gt;() ) &#123;</div><div class="line">        <span class="keyword">float</span> len2 = (*it)[<span class="number">0</span>]*(*it)[<span class="number">0</span>]+(*it)[<span class="number">1</span>]*(*it)[<span class="number">1</span>]+(*it)[<span class="number">2</span>]*(*it)[<span class="number">2</span>];</div><div class="line">        <span class="keyword">if</span>( len2 &gt; max ) max = len2;</div><div class="line">        it++;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;max&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python抓取微信文章]]></title>
      <url>/2017/04/04/Python%E6%8A%93%E5%8F%96%E5%BE%AE%E4%BF%A1%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p>涉及selenium获取cookie并用于模拟登录[这方法很强大！]<br>通过<a href="http://www.gsdata.cn/" target="_blank" rel="external">清博指数</a>，抓取海大夜洞表白信…<br>数据存取及简单可视化…</p>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><h6 id="Get-lovelinks-py"><a href="#Get-lovelinks-py" class="headerlink" title="Get_lovelinks.py"></a>Get_lovelinks.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">selenium模拟登录清博指数后获取表白信列表页，</div><div class="line">并在列表页提取表白信文章标题及链接，存入csv文件</div><div class="line">[注意这里不登录获取不到全部的列表页，而登录涉及cookie加密，并未深入研究，直接用selenium获取cookie]</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># selenium获取cookie, 并写入文件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie_from_network</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Get data from selenium..."</span>)</div><div class="line">    <span class="comment"># 使用selenium</span></div><div class="line">    dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">    dcap[<span class="string">"phantomjs.page.settings.userAgent"</span>] = (</div><div class="line">        <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0"</span>)</div><div class="line">    driver = webdriver.PhantomJS(<span class="string">'/home/shensir/phantomjs-2.1.1-linux-x86_64/bin/phantomjs'</span>,</div><div class="line">                                 desired_capabilities=dcap)</div><div class="line">    driver.maximize_window()</div><div class="line"></div><div class="line">    login_url = <span class="string">'http://www.gsdata.cn/member/login'</span></div><div class="line">    driver.get(url=login_url)</div><div class="line">    data = driver.page_source</div><div class="line">    <span class="comment"># print(data)</span></div><div class="line">    driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/div/form/div/p[1]/input'</span>).send_keys(<span class="string">'登录手机号码'</span>)</div><div class="line">    driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/div/form/div/p[2]/input'</span>).send_keys(<span class="string">'密码'</span>)</div><div class="line">    driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/div/form/div/p[4]/input'</span>).click()</div><div class="line"></div><div class="line">    cookie_list = driver.get_cookies()</div><div class="line">    <span class="comment"># print(cookie_list)</span></div><div class="line">    cookie_dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookie_list:</div><div class="line">        <span class="comment">#写入文件</span></div><div class="line">        f = open(cookie[<span class="string">'name'</span>]+<span class="string">'.qingbo'</span>,<span class="string">'wb'</span>)</div><div class="line">        pickle.dump(cookie, f)</div><div class="line">        f.close()</div><div class="line">        cookie_dict[cookie[<span class="string">'name'</span>]] = cookie[<span class="string">'value'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cookie_dict</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 从文件获取cookie</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie_from_cache</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Get cookie from cache files..."</span>)</div><div class="line">    cookie_dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> parent, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">'./'</span>):</div><div class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</div><div class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">'.qingbo'</span>):</div><div class="line">                <span class="comment"># print(filename)</span></div><div class="line">                <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">                    d = pickle.load(f)</div><div class="line">                    cookie_dict[d[<span class="string">'name'</span>]] = d[<span class="string">'value'</span>]</div><div class="line">    <span class="keyword">return</span> cookie_dict</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Cookie final</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></div><div class="line">    cookie_dict = get_cookie_from_cache()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie_dict:</div><div class="line">        cookie_dict = get_cookie_from_network()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cookie_dict</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 从单个文章列表页获取表白信url</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_love_urls</span><span class="params">(url)</span>:</span></div><div class="line"></div><div class="line">    cookdic = get_cookie()</div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'</span>&#125;</div><div class="line">    timeout = <span class="number">5</span></div><div class="line">    r = requests.get(url, headers=headers, cookies=cookdic, timeout=timeout)</div><div class="line">    soup = bs(r.text, <span class="string">'lxml'</span>)</div><div class="line">    <span class="comment"># print(soup)</span></div><div class="line">    articles = soup.find(<span class="string">'ul'</span>, &#123;<span class="string">'class'</span>:<span class="string">'article-ul'</span>&#125;).find_all(<span class="string">'li'</span>)</div><div class="line">    <span class="comment"># print(len(articles))</span></div><div class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> articles:</div><div class="line">        title = article.find(<span class="string">'h4'</span>).get_text()</div><div class="line">        <span class="keyword">if</span> <span class="string">"表白"</span> <span class="keyword">in</span> title:</div><div class="line">            love_url = article.find(<span class="string">'h4'</span>).find(<span class="string">'a'</span>).get(<span class="string">'href'</span>)</div><div class="line">            print(title, love_url)</div><div class="line">            love_titles.append(title)</div><div class="line">            love_urls.append(str(love_url))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># urls为所有文章列表列</span></div><div class="line">    urls = [<span class="string">'http://www.gsdata.cn/query/article?q=hndxyd&amp;search_field=4&amp;post_time=0&amp;sort=-1&amp;read_num=0'</span> \</div><div class="line">            <span class="string">'&amp;page=&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>)]</div><div class="line"></div><div class="line">    love_titles = []</div><div class="line">    love_urls = []</div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">        time.sleep(<span class="number">3</span>)   <span class="comment"># 这里建议sleep大约2-3s， 不然网页会因为访问频繁刷出验证码</span></div><div class="line">        get_love_urls(url)</div><div class="line"></div><div class="line">    <span class="comment"># 将表白新url数据存到文件</span></div><div class="line">    love_links_file = pd.DataFrame()</div><div class="line">    love_links_file[<span class="string">'titles'</span>] = love_titles</div><div class="line">    love_links_file[<span class="string">'urls'</span>] = love_urls</div><div class="line">    love_links_file.to_csv(<span class="string">'love_links.csv'</span>, index=<span class="keyword">None</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="Get-lovedatas-py"><a href="#Get-lovedatas-py" class="headerlink" title="Get_lovedatas.py"></a>Get_lovedatas.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">通过之前获取的表白信文章标题及链接文件，爬取表白信详细信息，存入json文件</div><div class="line">此处不需要登录~</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">2016.4.02 -- 2016.6.17 是旧的版式</div><div class="line">2016.6.21 -- 2017.4.03 是新的版式</div><div class="line"></div><div class="line"></div><div class="line">由于旧版内容较少，这里我们暂时只抓新版内容；</div><div class="line">以后有时间再补充旧版的抓取。</div><div class="line"></div><div class="line">文章有些已经被删除，注意设置容错</div><div class="line"></div><div class="line">尝试使用xpath, 其实不会用，，，这里完全是找规律，欢迎大家提出改进意见</div><div class="line"></div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 导入表白信标题链接数据[这里转化为字典是为了方便操作，当然，之前再保存时存为json格式会更方便]</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_links_data</span><span class="params">()</span>:</span></div><div class="line">    links_data = &#123;&#125;</div><div class="line">    data = pd.read_csv(<span class="string">'love_links.csv'</span>)</div><div class="line">    titles = list(data[<span class="string">'titles'</span>])</div><div class="line">    links = list(data[<span class="string">'urls'</span>])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(titles)):</div><div class="line">        links_data[titles[i]] = links[i]</div><div class="line">    <span class="keyword">return</span> links_data</div><div class="line"></div><div class="line"><span class="comment"># 从标题（注意是之前获取的列表页的标题）获取信件数目，用于下面的xpath路径的书写</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num_from_title</span><span class="params">(title)</span>:</span></div><div class="line">    num = re.findall(<span class="string">'.*?\|(\d+)封'</span>, title)[<span class="number">0</span>]</div><div class="line">    <span class="comment"># print(num)</span></div><div class="line">    <span class="keyword">return</span> int(num)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_date_from_title</span><span class="params">(title)</span>:</span></div><div class="line">    date = re.findall(<span class="string">'\\n(.*?)表白'</span>, title)</div><div class="line">    date = list(date)[<span class="number">0</span>]</div><div class="line">    print(date)</div><div class="line">    <span class="keyword">return</span> date</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(title, url)</span>:</span></div><div class="line">    page_data = &#123;&#125;</div><div class="line">    page_data[<span class="string">'title'</span>] = title</div><div class="line">    page_data[<span class="string">'url'</span>] = url</div><div class="line">    page_data[<span class="string">'envos'</span>] = &#123;&#125;</div><div class="line"></div><div class="line">    num = get_num_from_title(title)</div><div class="line">    data = requests.get(url)</div><div class="line">    selector = etree.HTML(data.text)</div><div class="line"></div><div class="line">    <span class="comment"># 表白信标题</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    不会用xpath, try...and we can find some rules from different part</div><div class="line">    And we know that the '/text()' is to get the text </div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[1]/section[1]/section/section/section[1]/section/section/p/span</div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[2]/section[1]/section/section/section[1]/section/section/p/span</div><div class="line">    '''</div><div class="line">    envo_titles = []</div><div class="line">    envo_title_paths = [<span class="string">'/html/body/div/div[2]/div[1]/div[1]/div[2]/section[&#123;&#125;]/section[1]/section/section/section[1]/section/section/p/span/text()'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num)]</div><div class="line">    <span class="keyword">for</span> envo_title_path <span class="keyword">in</span> envo_title_paths:</div><div class="line">        envo_title = selector.xpath(envo_title_path)</div><div class="line">        envo_titles.append(list(envo_title)[<span class="number">0</span>])</div><div class="line">        <span class="comment"># print(envo_title)</span></div><div class="line"></div><div class="line">    <span class="comment"># 表白信内容</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[1]/section[1]/section/section/section[1]/section/section/section/p[2]/span</div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[2]/section[1]/section/section/section[1]/section/section/section/p[2]/span</div><div class="line">    # /html/body/div/div[2]/div[1]/div[1]/div[2]/section[3]/section[1]/section/section/section[1]/section/section/section/p[2]/span</div><div class="line">    '''</div><div class="line">    envo_conts = []</div><div class="line">    envo_cont_paths = [<span class="string">'/html/body/div/div[2]/div[1]/div[1]/div[2]/section[&#123;&#125;]/section[1]/section/section/section[1]/section/section/section/p[2]/span/text()'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num)]</div><div class="line">    <span class="keyword">for</span> envo_cont_path <span class="keyword">in</span> envo_cont_paths:</div><div class="line">        envo_cont = selector.xpath(envo_cont_path)</div><div class="line">        envo_cont = list(envo_cont)[<span class="number">0</span>]</div><div class="line">        envo_conts.append(envo_cont)</div><div class="line">        <span class="comment"># print(envo_cont)</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(envo_titles)):</div><div class="line">        page_data[<span class="string">'envos'</span>][envo_titles[i]] = envo_conts[i]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> page_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    links_data = load_links_data()</div><div class="line">    links_title = list(links_data.keys())</div><div class="line">    links_url = list(links_data.values())</div><div class="line">    all_data = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> link_num <span class="keyword">in</span> range(len(links_data)):</div><div class="line">        title = links_title[link_num]</div><div class="line">        url = links_url[link_num]</div><div class="line">        date = get_date_from_title(title)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            page_data = get_data(title, url)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(url)</div><div class="line">            page_data = <span class="keyword">None</span></div><div class="line">        all_data[date] = page_data</div><div class="line">        print(page_data)</div><div class="line"></div><div class="line">    <span class="comment"># save as json format</span></div><div class="line">    <span class="comment"># all_data = json.dumps(all_data,  ensure_ascii=False)</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'all_data.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</div><div class="line">        json.dump(all_data, f ,ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="Data-analysis-py"><a href="#Data-analysis-py" class="headerlink" title="Data_analysis.py"></a>Data_analysis.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">导入json文件进行分析</div><div class="line">这里仅仅进行简单的探索，大家可以仿照之前的QQ空间数据分析报告那篇文章，</div><div class="line">调用boson公司的ａｐｉ进行情感分析等</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'all_data.txt'</span>) <span class="keyword">as</span> data_file:</div><div class="line">    data = json.load(data_file)</div><div class="line"></div><div class="line"><span class="comment"># print(data)</span></div><div class="line">data = dict(data)</div><div class="line">details = list(data.values())</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 合并标题至同一列表</span></div><div class="line">whos = []</div><div class="line">texts = []</div><div class="line"><span class="keyword">for</span> detail <span class="keyword">in</span> details:</div><div class="line">    <span class="keyword">if</span> detail != <span class="keyword">None</span>:</div><div class="line">        page_data = detail[<span class="string">'envos'</span>]</div><div class="line">        who = list(page_data.keys())</div><div class="line">        text = list(page_data.values())</div><div class="line">        whos += who</div><div class="line">        texts += text</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Whos</span></div><div class="line">print(<span class="string">"总数量： "</span>,  len(whos))</div><div class="line">print(whos)</div><div class="line"></div><div class="line"><span class="comment">## 年级</span></div><div class="line">whos_text = <span class="string">' '</span>.join(str(who) <span class="keyword">for</span> who <span class="keyword">in</span> whos)</div><div class="line">rank = re.findall(<span class="string">'.*?(\d\d).*?'</span>, whos_text)</div><div class="line"></div><div class="line">true_rank = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(rank)):</div><div class="line">    <span class="keyword">if</span> (int(rank[i])&gt;=<span class="number">12</span>) <span class="keyword">and</span> (int(rank[i])&lt;=<span class="number">16</span>):</div><div class="line">        true_rank.append(rank[i])</div><div class="line"></div><div class="line">sns.countplot(true_rank)</div><div class="line">plt.title(<span class="string">'Grade'</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment">## reply</span></div><div class="line">reps = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> who <span class="keyword">in</span> whos:</div><div class="line">    <span class="keyword">if</span> <span class="string">'回复'</span> <span class="keyword">in</span> who:</div><div class="line">        reps += <span class="number">1</span></div><div class="line">print(<span class="string">"回信数： "</span>, reps)</div><div class="line">print(<span class="string">"回信率： "</span>, reps/len(whos))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># What</span></div><div class="line"><span class="comment"># print(texts)</span></div><div class="line"></div><div class="line"><span class="comment"># 分词</span></div><div class="line">clear_texts = []</div><div class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> texts:</div><div class="line">    sentence = sentence.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">'\xa0'</span>, <span class="string">''</span>)</div><div class="line">    clear_texts += sentence</div><div class="line"><span class="comment"># print(clear_texts)</span></div><div class="line"></div><div class="line"></div><div class="line">pic_path = <span class="string">'heart.png'</span></div><div class="line">heart_mask = imread(pic_path)</div><div class="line"></div><div class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</div><div class="line">wordcloud = WordCloud(background_color=<span class="string">"white"</span>, font_path=<span class="string">'/home/shensir/Downloads/Fonts/msyh.ttc'</span>, mask=heart_mask).generate(str(clear_texts))</div><div class="line">plt.imshow(wordcloud)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/wechat/grade.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/wechat/heart_wc.png" alt=""></p>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><blockquote>
<p>代码写的比较粗糙…不过思路还好比较清晰<br>这个清博…好像提供API来着…并未深入了解</p>
</blockquote>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://kekefund.com/2016/01/21/spider-cookie/" target="_blank" rel="external">网页爬虫之cookie自动获取 </a><br><a href="http://datahonor.com/2017/03/02/QQ%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/">QQ空间数据分析报告 </a></p>
<h5 id="废话几句"><a href="#废话几句" class="headerlink" title="废话几句"></a>废话几句</h5><p>自学Python快一年了，其中最大的快乐当真来自大家的认同。不断有朋友通过邮件，留言等方式告诉我说，为了学爬虫来的，觉得自己写的浅显易懂些，希望多更新爬虫的文章。有位大佬竟然真的从博客园，追到DATADREAM[之前的站点，不打算更了…], 再追到DATAHONOR[就是本站了…]，莫名感动…对大家的认可，真是发自内心的感激，谢谢你们的鼓励~ 曾听得曹涧秋老师讲到人活着的意义何在，说到底，三个字————被需要！那么我觉着…省略1W字 :-)<br>不过呢因为目前大部分时间放在cpp和数学，所以很少写爬虫了，十分抱歉~争取有时间尽量写点…<br>大好年华，一起努力吧！<br>           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                      ————2017/4/4  01:40 小小白<br>                                     -</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Opencv3学习笔记--制作简易视频播放器]]></title>
      <url>/2017/04/03/Opencv%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><em>Learning Opencv3</em>上面的的一个代码，第一次看的时候基本没看懂，这次大概看懂了。这里先贴上代码，再来简单解释下代码流程。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> g_slider_position = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> g_run = <span class="number">1</span>, g_dontset = <span class="number">0</span>;</div><div class="line">cv::VideoCapture g_cap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTrackbarSlide</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">void</span>*)</span></span>&#123;</div><div class="line">    g_cap.<span class="built_in">set</span>(cv::CAP_PROP_POS_FRAMES, pos);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!g_dontset)</div><div class="line">        g_run = <span class="number">1</span>;</div><div class="line">    g_dontset = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    cv::namedWindow(<span class="string">"Example"</span>, cv::WINDOW_AUTOSIZE);</div><div class="line">    g_cap.open(<span class="string">"/home/shensir/Documents/MyPrograming/Cpp/Clions/data/sampvideo.ogv"</span>);</div><div class="line">    <span class="keyword">int</span> frames = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_FRAME_COUNT);</div><div class="line">    <span class="keyword">int</span> tmpw = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_FRAME_WIDTH);</div><div class="line">    <span class="keyword">int</span> tmph = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_FRAME_HEIGHT);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Video has "</span>&lt;&lt;frames&lt;&lt;<span class="string">" frames of dimensions("</span>&lt;&lt;tmpw&lt;&lt;<span class="string">", "</span>&lt;&lt;tmph&lt;&lt;<span class="string">")."</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    cv::createTrackbar(<span class="string">"Position"</span>,	<span class="string">"Example"</span>,	&amp;g_slider_position,	frames,</div><div class="line">                       onTrackbarSlide);</div><div class="line"></div><div class="line">    cv::Mat frame;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        <span class="keyword">if</span>(g_run != <span class="number">0</span>)&#123;</div><div class="line">            g_cap&gt;&gt;frame; <span class="keyword">if</span>(frame.empty()) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> current_pos = (<span class="keyword">int</span>) g_cap.get(cv::CAP_PROP_POS_FRAMES);</div><div class="line"></div><div class="line">            g_dontset = <span class="number">1</span>;</div><div class="line"></div><div class="line">            cv::setTrackbarPos(<span class="string">"Position"</span>, <span class="string">"Example"</span>, current_pos);</div><div class="line">            cv::imshow(<span class="string">"Example"</span>, frame);</div><div class="line"></div><div class="line">            g_run -= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">char</span> c = (<span class="keyword">char</span>) cvWaitKey(<span class="number">10</span>);</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'s'</span>) <span class="comment">// single step</span></div><div class="line">            &#123;g_run =<span class="number">1</span>; <span class="built_in">cout</span>&lt;&lt;<span class="string">"single step, run = "</span>&lt;&lt;g_run&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(c == <span class="string">'r'</span>)  <span class="comment">// run mode</span></div><div class="line">            &#123;g_run = <span class="number">-1</span>; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Run mode, run = "</span>&lt;&lt;g_run&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(c == <span class="number">27</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h5><p>重要参数解释：</p>
<blockquote>
<p>g_slider_position，进度条位置</p>
<p>g_run，控制视频播放模式，为正数[如5]时，表示距离视频暂停还有几个[这里是5个]frame将输出到屏幕，这里g_run为正数大都是1，故为step即但不模式； 当为负数时，将一直播放下去，因为g_run -=1的存在使得g_run一直为负。</p>
<p>g_dontest,为了鼠标点击进度条的动作而设计的参数。使得点击进度条后，自动进入step模式。</p>
<p>createTrackbar( TrackbarName, “Linear Blend”, &amp;alpha_slider, alpha_slider_max, on_trackbar );Whenever the user moves the Trackbar, the callback function on_trackbar is called</p>
</blockquote>
<p>运行流程：</p>
<blockquote>
<p>开始时g_slider_position为0,在main函数中输出到frame，后show，这个过程中，g_dontset被设置为1，使得在不进行<em>点击以移动进度条</em>动作时，进度条不会被重置到新的指定的位置,且g_dontset将一直被从0重置为1.此时，如果在cvWaitKey的10ms[图片显示时间]，按下‘s’则，按照前面参数说明，在播放一帧之后，视频将暂停；按下’r’，则g_run将由-1递减下去，一直为负，视频一直进行下去。若是此时点击移动进度条，则在g_dontset = 1之前[这时g_dontset=0]调用回调函数onTrackbarSlide，使得g_cap的位置被指定为当前帧的位置，接着g_run = 1， 进入单步模式，接着将show当前帧的画面和他的下一帧画面后进入暂停模式。</p>
</blockquote>
<p>个人理解，错误之处请指正。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我，Arch和Ubuntu的故事]]></title>
      <url>/2017/03/30/%E6%88%91%EF%BC%8CArch%E5%92%8CUbuntu%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>最近几天，准确说是整整四天，一直在折腾系统，故事比较多…<br>享受win &amp; Ubuntu16.04LTS双系统的时候，突然Ubuntu就无法登入，进入无线login的情况。各种谷歌查资料，无果。在编程群问，无果。</p>
<blockquote>
<p>这里犯下两个错误。<br>1.在google不行的情况下，并没有尝试进行百度，或者其他搜索。[显然后面他们起了作用]。<br>2.在编程群问，毕竟不是专门玩系统的，无果也是难免。</p>
</blockquote>
<p>随后，开始重装Ubuntu,撞了两次，都是可以进去，配置Python和Cpp等一系列的开发环境后，重启，一样进入无限login。[注意到当中出现命令提示，含有sd2 , clean, blocks这些词]<br>失败告终。</p>
<blockquote>
<p>一个错误。<br>再次遇见同样的错误，并没有去深入研究然后尝试解决它！[说好的探索精神呢…]</p>
</blockquote>
<p>万念俱灰之时，大佬介绍Arch,开始整。查些资料，一次就安装成功了。xfce4桌面，startx启动。<br>之后再次配置环境，仍然出现[sd2, clean, blocks]这些提示，但是系统可以运行。换dde桌面（deepin），开启黑屏，发现壁纸是黑的，改变壁纸，完美运行，桌面环境很漂亮。配置环境，重启，黑屏，真的黑了。。。无解，重启，还是无法进入桌面…进tty,发现环境变量一团糟[这里是重点。。。]，继续配置已经没有可能…</p>
<p>被arch搞得巨伤…主要opencv，R也不好配置，滚回去再次尝试装Ubuntu。轻车熟路，装好重启，并未打开win10，进入grub的rescue模式，按照百度经验教程，一路ls (hd0,msdos6)/boot/grub，发现系统一道文件，在启动normal.mod，发现文件丢失。经玩系统的大佬指点，U盘安装微PE，进去PE后，DiskGenius重建MBR，成功进入win10!再easybcd引导Ubuntu,完成安装。再次进入Ubuntu,一样，配置环境之后重启，进入无限login，这时候…说实话，近乎崩溃了，毕竟四天了…</p>
<p>然而，还是没有放弃。。。喝口水，再来。</p>
<p>百度，转机出现，发现有人设置错了系统的环境变量进入无限login,回去tty看我的/home/.xession-error文件[过程中一样是一团糟的环境变量]，发现果然错了！现在找对了方向，于是进入/etc/profile，发现Anaconda的路径前面没有加export,而且路径格式不对…于是连同下面自己添加的java环境境变量一同注释，重启，搞定！</p>
<p>四天不眠不休的折腾[每天睡5个小时多点…]，确实很伤，但是也学到了很多知识。<br>下面总结下：</p>
<p>系统相关：</p>
<blockquote>
<p>双系统之间不要随意拖拽文件，之前那些莫名的提示，可能就是这个造成的。<br>启动arch桌面不要用startx,用lightdm[用前者启动deepin桌面可能黑屏]<br>设置wifi最简单的办法，命令nmtui</p>
</blockquote>
<p>博客转移：</p>
<blockquote>
<p>一定记得备份文件<br>记得hexo需要的node版本不要最新，官方稳定版本即可<br>只需要重新将hexo文件复制到新的电脑，配置git,安装hexo[不需要init等其他的，一条安装命令即可]</p>
</blockquote>
<p>方法：</p>
<blockquote>
<p>百度有时候比Google来得更加简单直接。<br>记得找专业的人士解决相关的问题<br>记得要针对问题探索，不要逃避问题…</p>
</blockquote>
<p>最后，真心感谢arch群里各位大佬的帮助，感谢废帝大佬多次建议让我换电脑:-)————不要折腾系统，换电脑————有钱会换的orz…</p>
<p>虽说又回到最初的起点，但是这四天，没有浪费。</p>
<p>继续努力吧少年，20岁，本就是野蛮生长的年纪。<br>也许明天是个好天气呢。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Arch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[typedef & #define]]></title>
      <url>/2017/03/25/typedef-define/</url>
      <content type="html"><![CDATA[<p>在c++里面，有两种方法为一个数据类型起一个别名，一个是通过预编译器(preprocessor)来替换文本实现，另一个是通过typedef来为类型起别名。<br>一般情况下，而这均可以实现想要的效果<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>* float_pointer;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FLOAT_POINTER float*</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">float</span> fv = <span class="number">1.0</span>;</div><div class="line">    float_pointer fp1;</div><div class="line">    fp1 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*fp1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    FLOAT_POINTER FP1;</div><div class="line">    FP1 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*FP1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>1<br>1</p>
</blockquote>
<p>然而，在<strong>同时为多个变量定义类型</strong>时，就会出现差别。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>* float_pointer;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FLOAT_POINTER float*</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">float</span> fv = <span class="number">1.0</span>;</div><div class="line">    float_pointer fp1, fp2;</div><div class="line">    fp1 = &amp;fv;</div><div class="line">    fp2 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*fp1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    FLOAT_POINTER FP1, FP2;</div><div class="line">    FP1 = &amp;fv;</div><div class="line">    FP2 = &amp;fv;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*FP1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>这段代码将报错</p>
<blockquote>
<p>main.cpp:18:9: error: cannot convert ‘float*’ to ‘float’ in assignment<br>     FP2 = &fv;<br>         ^</p>
</blockquote>
<p>可以看出，FP2的类型为float，而不是期望的float*</p>
<p>这是因为，预编译器仅仅是将FLOAT_POINTER 替换为 float *， 也就是说定义FP1，FP2时，是这样的：</p>
<blockquote>
<p>float * FP1, FP2;</p>
</blockquote>
<p>即仅仅定义FP1为float* ，而FP2为float.</p>
<p>参考：<em>C++ Primer Plus [5th]</em>p234</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Python,Lingo, Octave解线性规划问题(LP)]]></title>
      <url>/2017/03/22/%E5%88%A9%E7%94%A8Python%E8%A7%A3%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-LP/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>新学期开了运筹学(OR)的课,最近学线性规划问题(LP)。老师建议说是用MATLAB 或者 LINGO，这里再加上Python,三种都试下，进行下比较。[懒的切换到windows系统了。。。用Octave代替Matlab了先。。。]</p>
<h5 id="Python求解-cvxopt"><a href="#Python求解-cvxopt" class="headerlink" title="Python求解(cvxopt)"></a>Python求解(cvxopt)</h5><p>这里用的库是cvxopt,之前解SVM的QP问题也用过，这里求解LP问题。<br>这是文档的介绍：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/OR/LP1.png" alt=""></p>
<p>这里，我们主要看下在有无等式约束两种情况下的不同,其实也没差 :-）</p>
<h6 id="无等式约束"><a href="#无等式约束" class="headerlink" title="无等式约束"></a>无等式约束</h6><span>$$ minimize     \quad   -4x_{1}-5x_{2}$$</span><!-- Has MathJax -->
<span>$$subject \quad to
\left\{\begin{matrix}
2x_{1} &amp; +x_{2} &amp; \leq 3\\ 
x_{1}&amp; +2x_{2} &amp; \leq 3\\
x_{1}&amp;,x_{2}&amp;\geq 0
\end{matrix}\right.$$</span><!-- Has MathJax -->
<p>实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> cvxopt <span class="keyword">import</span> matrix, solvers</div><div class="line"></div><div class="line">c = matrix([<span class="number">-4.</span>, <span class="number">-5.</span>])</div><div class="line">G = matrix([[<span class="number">2.</span>, <span class="number">1.</span>, <span class="number">-1.</span>, <span class="number">0.</span>], [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">0.</span>, <span class="number">-1.</span>]])</div><div class="line">h = matrix([<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">0.</span>, <span class="number">0.</span>])</div><div class="line">sol = solvers.lp(c, G, h)</div><div class="line">print(sol[<span class="string">'x'</span>])</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><br>输出：</p>
<blockquote>
<pre><code>pcost       dcost       gap    pres   dres   k/t
</code></pre><p> 0: -8.1000e+00 -1.8300e+01  4e+00  0e+00  8e-01  1e+00<br> 1: -8.8055e+00 -9.4357e+00  2e-01  1e-16  4e-02  3e-02<br> 2: -8.9981e+00 -9.0049e+00  2e-03  3e-16  5e-04  4e-04<br> 3: -9.0000e+00 -9.0000e+00  2e-05  1e-16  5e-06  4e-06<br> 4: -9.0000e+00 -9.0000e+00  2e-07  3e-16  5e-08  4e-08<br>Optimal solution found.<br>[ 1.00e+00]<br>[ 1.00e+00]</p>
</blockquote>
<p>Remark：</p>
<blockquote>
<p>这里记得一定要调入numpy,否则会出现如下报错<br>Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.<br>可能是依赖的问题。</p>
</blockquote>
<h6 id="有等式约束"><a href="#有等式约束" class="headerlink" title="有等式约束"></a>有等式约束</h6><span>$$ minimize  \quad  z = -3x_{1}+x_{2}+x{3}$$</span><!-- Has MathJax -->
<span>$$subject \quad to
\left\{\begin{matrix}
x_{1} &amp;  -2x_{2}&amp; +x_{3} &amp; \leq 11\\ 
-4x_{1} &amp; +x{2} &amp;  +2x{3}&amp; \geq 3\\ 
 -2x_{1}&amp;  &amp; +x_{3} &amp; = 1\\ 
 x_{1},&amp;x_{2},&amp;x_{3}&amp;\geq 0 
\end{matrix}\right.$$</span><!-- Has MathJax -->
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> cvxopt <span class="keyword">import</span> matrix, solvers</div><div class="line"></div><div class="line"></div><div class="line">G = matrix([[<span class="number">1.0</span>,<span class="number">4.0</span>,<span class="number">-2.0</span>,<span class="number">-1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>], [<span class="number">-2.0</span>,<span class="number">-1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">-1.0</span>,<span class="number">0.0</span>],[<span class="number">1.0</span>,<span class="number">-2.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">-1.0</span>]])</div><div class="line">h = matrix([<span class="number">11.0</span>,<span class="number">-3.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>])</div><div class="line"></div><div class="line">A = matrix([<span class="number">-2.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>])</div><div class="line">A = A.trans()  <span class="comment"># 这里不转置会报错</span></div><div class="line">b = matrix([<span class="number">1.0</span>])</div><div class="line">c = matrix([<span class="number">-3.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>])</div><div class="line"></div><div class="line">sol = solvers.lp(c,G,h,A=A,b=b)</div><div class="line">print(sol[<span class="string">'x'</span>])</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<pre><code>pcost       dcost       gap    pres   dres   k/t
</code></pre><p> 0: -2.1667e+00 -1.1167e+01  3e+01  9e-01  1e+00  1e+00<br> 1: -1.1986e+00 -1.9278e+00  2e+00  7e-02  1e-01  1e-01<br> 2: -1.9895e+00 -2.0163e+00  6e-02  3e-03  4e-03  5e-03<br> 3: -1.9999e+00 -2.0002e+00  6e-04  3e-05  5e-05  5e-05<br> 4: -2.0000e+00 -2.0000e+00  6e-06  3e-07  5e-07  5e-07<br> 5: -2.0000e+00 -2.0000e+00  6e-08  3e-09  5e-09  5e-09<br>Optimal solution found.<br>[ 4.00e+00]<br>[ 1.00e+00]<br>[ 9.00e+00]</p>
</blockquote>
<h5 id="Lingo求解线性规划问题"><a href="#Lingo求解线性规划问题" class="headerlink" title="Lingo求解线性规划问题"></a>Lingo求解线性规划问题</h5><p>题目还是上面的有等式约束的那道题[用lingo处理等式约束方便的多，有无等式约束几乎是一样的]</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MIn=-3*x1+x2+x3;</div><div class="line"></div><div class="line">x1&gt;=0;</div><div class="line">x2&gt;=0;</div><div class="line">x3&gt;=0;</div><div class="line"></div><div class="line">x1-2*x2+x3 &lt;= 11;</div><div class="line">-4*x1+x2+2*x3&gt;=3;</div><div class="line">-2*x1+x3=1;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/OR/Lp2.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/OR/LP3.png" alt=""></p>
<h5 id="利用Octave解决LP问题"><a href="#利用Octave解决LP问题" class="headerlink" title="利用Octave解决LP问题"></a>利用Octave解决LP问题</h5><blockquote>
<p>注意，在MatLab中，使用的函数是linprog, 这在Octave换成了glpk函数。</p>
</blockquote>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">c = [-3 1 1]&apos;;</div><div class="line"></div><div class="line">A = [1 -2 1;</div><div class="line">-4 1 2;</div><div class="line">-2 0 1];</div><div class="line"></div><div class="line">b = [11 3 1];</div><div class="line">lb = [0 0 0];</div><div class="line">ub = [];</div><div class="line"></div><div class="line">ctype = &quot;ULS&quot;;</div><div class="line">vartype = &quot;CCC&quot;;</div><div class="line">s = 1;</div><div class="line">param.msglev = 1;</div><div class="line">param.itlim = 100;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">[xopt, fmin, status, extra] = glpk (c, A, b, lb, ub, ctype, vartype, s, param)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>xopt =</p>
<p>   4<br>   1<br>   9</p>
<p>fmin = -2<br>status = 0<br>extra =</p>
<p> scalar structure containing the fields:</p>
<p>   lambda =</p>
<pre><code>-0.33333
   0.33333
   0.66667
</code></pre><p> redcosts =</p>
<pre><code>0
 0
 0
</code></pre><p>   time = 0<br>    status =  5</p>
</blockquote>
<p>好啦，都完美运行咯，再见单纯形法，再见大M法：-）</p>
<h5 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h5><p><a href="http://cvxopt.org/" target="_blank" rel="external">cvxopt</a><br><a href="https://www.gnu.org/software/octave/doc/v4.0.0/Linear-Programming.html" target="_blank" rel="external">glpk</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> OR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle——American Pubs[Python] ]]></title>
      <url>/2017/03/19/Kaggle%E2%80%94%E2%80%94American-Pubs-Python/</url>
      <content type="html"><![CDATA[<p>Kaggle案例学习——American Pubs [Python分析]<br>源码[notebook形式]已经发布在此数据集的<a href="https://www.kaggle.com/shenxiangzhuang/d/erikhambardzumyan/pubs/let-s-see" target="_blank" rel="external">kernel</a>上，亦可在Kaggle上直接查看。[这次是原创~]<br>这里仅记录下源码。<br>数据集：</p>
<blockquote>
<p>Income - Your Approximate Monthly Income (in Armenian Dram)<br>Fav_Pub - Which is your Favorite Pub?<br>WTS -Maximum willingness to spend at the pub<br>Freq - How often do you visit pubs?<br>Prim_Imp - Which feature is of primary importantance for you?<br>Sec_Imp - Which feature is of secondary importantance for you?<br>Stratum - From which regional stratum are you?<br>Lifestyle - What is your lifestyle?<br>Occasions- On which occasions do you go to pubs most of the time?</p>
</blockquote>
<p>源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># linear algebra</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line"><span class="comment"># machine learning</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"><span class="comment"># function to split the data for cross-validation</span></div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC, LinearSVC</div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># EDA</span></div><div class="line">data = pd.read_csv(<span class="string">"/home/shen/PycharmProjects/MyPython/Kaggle/American Pubs/armenian_pubs.csv"</span> )</div><div class="line">data.head()</div><div class="line"></div><div class="line">data.info()</div><div class="line">print(<span class="string">'=============================\n'</span>, data.notnull().sum())</div><div class="line"></div><div class="line">columns = data.columns</div><div class="line"><span class="comment"># Notice that there are 'Age ', 'Gender ', 'Income ', not 'Age', 'Gender', 'Income'.</span></div><div class="line"><span class="comment"># In other words, we'd better remove the additional space.</span></div><div class="line">data.columns = [<span class="string">'Timestamp'</span>, <span class="string">'Age'</span>, <span class="string">'Gender'</span>, <span class="string">'Income'</span>, <span class="string">'Occupation'</span>, <span class="string">'Fav_Pub'</span>, <span class="string">'WTS'</span>, <span class="string">'Freq'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>, <span class="string">'Stratum'</span>, <span class="string">'Lifestyle'</span>, <span class="string">'Occasions'</span>]</div><div class="line">columns = data.columns</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Age</span></div><div class="line">sns.countplot(<span class="string">'Age'</span>,data=data)</div><div class="line"><span class="comment"># Or we can use matplotlib</span></div><div class="line"><span class="string">'''</span></div><div class="line">Agedata = data['Age']</div><div class="line">Agebins = list(range(Agedata.min(), Agedata.max()))</div><div class="line">plt.hist(Agedata, bins=Agebins)</div><div class="line">plt.title('Age')</div><div class="line">plt.show()</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># Gender</span></div><div class="line">sns.countplot(<span class="string">'Gender'</span>,data=data)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Income</span></div><div class="line">Incomedata = data[<span class="string">'Income'</span>]</div><div class="line">print(Incomedata.notnull().sum())</div><div class="line">print(Incomedata.describe())</div><div class="line">sns.boxplot(Incomedata)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Notice that there are some outliers, let's remove them and plot them again for the detail</span></div><div class="line">Incomedata_cleaned = Incomedata[Incomedata &lt; <span class="number">1000000</span>]</div><div class="line">sns.boxplot(Incomedata_cleaned)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># The rest...yes, still countplot...I love it :)</span></div><div class="line">cols = [<span class="string">'Occupation'</span>, <span class="string">'Freq'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>, <span class="string">'Stratum'</span>, <span class="string">'Lifestyle'</span>, <span class="string">'Occasions'</span>]</div><div class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">36</span>))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cols)):</div><div class="line">    fig.add_subplot(len(cols),<span class="number">1</span>, i+<span class="number">1</span>)</div><div class="line">    sns.countplot(cols[i], data=data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Let's try do some predict by training the data</span></div><div class="line"><span class="comment"># Try to transform str value to numeric value</span></div><div class="line"><span class="comment"># We'll use the method as fellow to do this job</span></div><div class="line">le = preprocessing.LabelEncoder()</div><div class="line">le.fit(data[<span class="string">'Occupation'</span>].unique())</div><div class="line">print(le.classes_)</div><div class="line">le.transform(data[<span class="string">'Occupation'</span>])</div><div class="line"></div><div class="line"></div><div class="line">numcols = [<span class="string">'Age'</span>, <span class="string">'Income'</span>, <span class="string">'WTS'</span>]</div><div class="line">strcols = [<span class="string">'Gender'</span>, <span class="string">'Occupation'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>, <span class="string">'Stratum'</span>, <span class="string">'Lifestyle'</span>,<span class="string">'Occasions'</span>,<span class="string">'Freq'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># numcols</span></div><div class="line"></div><div class="line"><span class="comment"># Classify the age</span></div><div class="line">Cdata = data.copy()</div><div class="line"></div><div class="line">Simplage = Cdata[<span class="string">'Age'</span>]</div><div class="line">fig.add_subplot(<span class="number">311</span>)</div><div class="line">sns.boxplot(Simplage)</div><div class="line">Simplage[Simplage &lt; <span class="number">18</span>] = <span class="number">0</span></div><div class="line">Simplage[(Simplage &gt;= <span class="number">18</span>) &amp; (Simplage &lt;<span class="number">23</span>)] = <span class="number">1</span></div><div class="line">Simplage[Simplage &gt;= <span class="number">23</span>] = <span class="number">2</span></div><div class="line">print(Simplage.head())</div><div class="line"></div><div class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">24</span>))</div><div class="line"><span class="comment"># Income</span></div><div class="line">Incomedata = Cdata[<span class="string">'Income'</span>]</div><div class="line"><span class="comment"># Many people are student with no income, so we use o to fill the missing value</span></div><div class="line">Simplincome = Incomedata.fillna(<span class="number">0.0</span>)</div><div class="line"><span class="comment">#print('==============\n', Simplincome.notnull().sum())</span></div><div class="line">print(Simplincome.describe())</div><div class="line">fig.add_subplot(<span class="number">312</span>)</div><div class="line">sns.boxplot(Simplincome)</div><div class="line">Simplincome[Simplincome &lt;= <span class="number">2000</span>] = <span class="number">0</span></div><div class="line">Simplincome[(<span class="number">2000</span> &lt; Simplincome) &amp; (Simplincome &lt;= <span class="number">4000</span>)] = <span class="number">1</span></div><div class="line">Simplincome[(<span class="number">4000</span> &lt; Simplincome) &amp; (Simplincome &lt;= <span class="number">6000</span>)] = <span class="number">2</span></div><div class="line">Simplincome[Simplincome &gt; <span class="number">8000</span>] = <span class="number">3</span></div><div class="line">print(Simplincome.head())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Classify the WTS</span></div><div class="line">Simplwts = Cdata[<span class="string">'WTS'</span>]</div><div class="line"><span class="comment">#print(Simplwts.notnull().sum())</span></div><div class="line"><span class="comment"># fill these missing values</span></div><div class="line">fig.add_subplot(<span class="number">313</span>)</div><div class="line">sns.boxplot(<span class="string">'WTS'</span>, data=Cdata)</div><div class="line"></div><div class="line">Simplwts = Simplwts.fillna(<span class="number">5000</span>)</div><div class="line"><span class="comment">#print(Simplwts.notnull().sum())</span></div><div class="line"><span class="comment">#print(Simplwts.describe())</span></div><div class="line"><span class="comment"># Classify</span></div><div class="line">Simplwts[Simplwts &lt;= <span class="number">2000</span>] = <span class="number">0</span></div><div class="line">Simplwts[(<span class="number">2000</span> &lt; Simplwts) &amp; (Simplwts &lt;= <span class="number">4000</span>)] = <span class="number">1</span></div><div class="line">Simplwts[(<span class="number">4000</span> &lt; Simplwts) &amp; (Simplwts &lt;= <span class="number">6000</span>)] = <span class="number">2</span></div><div class="line">Simplwts[Simplwts &gt; <span class="number">8000</span>] = <span class="number">3</span></div><div class="line"><span class="comment">#print(Simplwts.head())</span></div><div class="line"></div><div class="line">newdata = pd.concat([Simplage, Simplincome, Simplwts], axis=<span class="number">1</span>)</div><div class="line">print(newdata.head())</div><div class="line">print(newdata.notnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># str cols</span></div><div class="line">print(Cdata.notnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># fillna and label them</span></div><div class="line">ontodict = &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettrans</span><span class="params">(colname)</span>:</span></div><div class="line">    coldata = Cdata[colname]</div><div class="line">    coldata = coldata.fillna(coldata.mode()[<span class="number">0</span>])  <span class="comment"># the [0] looks like indispensable</span></div><div class="line">    le = preprocessing.LabelEncoder()</div><div class="line">    le.fit(coldata.unique())</div><div class="line">    <span class="comment">#print(colname, '--&gt;', le.classes_)</span></div><div class="line">    ontodict[colname] = le.classes_</div><div class="line">    newcoldata = le.transform(coldata)</div><div class="line">    newdata[colname] = newcoldata</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> colname <span class="keyword">in</span> strcols:</div><div class="line">    gettrans(colname)</div><div class="line"></div><div class="line">print(newdata.head())</div><div class="line">print(newdata.notnull().sum())</div><div class="line">print(ontodict)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Let's make Freq as the value that can be predicted by other values</span></div><div class="line">x = newdata[[<span class="string">'Age'</span>, <span class="string">'Income'</span>, <span class="string">'WTS'</span>, <span class="string">'Gender'</span>, <span class="string">'Occupation'</span>, <span class="string">'Prim_Imp'</span>, <span class="string">'Sec_Imp'</span>,</div><div class="line">       <span class="string">'Stratum'</span>,<span class="string">'Lifestyle'</span>, <span class="string">'Occasions'</span>]]</div><div class="line">y = newdata[<span class="string">'Freq'</span>]</div><div class="line"></div><div class="line"><span class="comment"># split into train and test sets</span></div><div class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>)</div><div class="line"><span class="comment"># take a look at the shape of each of these</span></div><div class="line">print(x_train.shape)</div><div class="line">print(y_train.shape)</div><div class="line">print(x_test.shape)</div><div class="line">print(y_test.shape)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># predict</span></div><div class="line"></div><div class="line"><span class="comment"># Logistic Regression</span></div><div class="line">logreg = LogisticRegression()</div><div class="line">logreg.fit(x_train, y_train)</div><div class="line">Y_pred = logreg.predict(x_test)</div><div class="line">logreg.score(x_train, y_train)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># knn</span></div><div class="line">knn = KNeighborsClassifier(n_neighbors = <span class="number">3</span>)</div><div class="line">knn.fit(x_train, y_train)</div><div class="line">Y_pred = knn.predict(x_test)</div><div class="line">knn.score(x_train, y_train)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># SVM</span></div><div class="line">svc = SVC()</div><div class="line">svc.fit(x_train, y_train)</div><div class="line">Y_pred = svc.predict(x_test)</div><div class="line">svc.score(x_train, y_train)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Random Forests</span></div><div class="line">random_forest = RandomForestClassifier(n_estimators=<span class="number">50</span>)</div><div class="line">random_forest.fit(x_train, y_train)</div><div class="line">Y_pred = random_forest.predict(x_test)</div><div class="line"></div><div class="line"></div><div class="line">random_forest.score(x_train, y_train)</div><div class="line">random_forest.score(x_test, y_test)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法竞赛入门经典[紫书]习题笔记(第三章)]]></title>
      <url>/2017/03/16/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8-%E7%B4%AB%E4%B9%A6-%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>紫书第三章习题代码及笔记。主要是想练习下c++的使用，有错误欢迎指出，有可以改进的地方请不吝赐教，多加交流。</p>
<h5 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//题目1--统计个数[不用数组]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;  <span class="comment">// count用于计数</span></div><div class="line">    <span class="keyword">float</span> num;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;num) == <span class="number">1</span>) &#123;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Nums: %d\n"</span>, count);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//题目1--求最大值，最小值，均值[不用数组]</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int  count = 0;</div><div class="line">    float num, sum=0, min_x, max_x;</div><div class="line">    while ( scanf("%f", &amp;num) == 1)&#123;</div><div class="line">        if(count == 0)&#123;min_x = max_x = num;&#125;</div><div class="line">        if(num &gt; max_x) max_x = num;</div><div class="line">        if(num &lt; min_x) min_x = num;</div><div class="line">        sum += num;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    printf("Max:%f Min:%f Ave:%f\n", max_x, min_x, sum/count);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">// 题目1--哪两个数最接近[数组]</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int nums[maxn];</div><div class="line">int main()&#123;</div><div class="line">    int num, n = 0;</div><div class="line">    while (scanf("%d", &amp;num) == 1) &#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    int min_d = std::abs(nums[0]-nums[1]);</div><div class="line">    for(int i=0;i&lt;n;i++)</div><div class="line">        for(int j=0;j&lt;n;j++)&#123;</div><div class="line">            if(j != i)&#123;</div><div class="line">                if(std::abs(nums[i]-nums[j]) &lt; min_d) min_d = std::abs(nums[i]-nums[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    printf("%d\n", min_d);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--第二大的数[数组]</span></div><div class="line"><span class="comment">//思路一：先获取数组最大值，在获取去除最大值后的数组，在求最大值</span></div><div class="line"><span class="comment">// 获取数组的最大值</span></div><div class="line"><span class="comment">/*</span></div><div class="line">float getmax(float arr[], int n);</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    float num, nums[maxn];</div><div class="line">    int n=0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1)&#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    float max_x = getmax(nums, n);</div><div class="line"></div><div class="line">    float newnums[maxn];</div><div class="line">    int newn = 0;</div><div class="line">    for(int i=0;i&lt;n;i++)&#123;</div><div class="line">        if(nums[i] != max_x) &#123;</div><div class="line">            newnums[newn] = nums[i];</div><div class="line">            newn++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    float sec_max_x = getmax(newnums, newn);</div><div class="line">    printf("%f\n", sec_max_x);</div><div class="line">&#125;</div><div class="line"></div><div class="line">float getmax(float arr[], int n)&#123;</div><div class="line">    float max_x_arr = arr[0];</div><div class="line">    for(int i=1;i&lt;n;i++)&#123;</div><div class="line">        if(arr[i] &gt; max_x_arr) max_x_arr = arr[i];</div><div class="line">    &#125;</div><div class="line">    return max_x_arr;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--第二大的数[数组]</span></div><div class="line"><span class="comment">// 思路二：冒泡排序</span></div><div class="line"><span class="comment">/*</span></div><div class="line">void bubblesort(float A[], int n)&#123;</div><div class="line">    bool sorted = false;  // 整体排序标志，首先假定尚未进行排序</div><div class="line">    while(!sorted)&#123;  //在尚未确认已经全局排序之前，逐趟进行扫描交换</div><div class="line">        sorted = true;  // 假定已经排序</div><div class="line">        for (int i =1; i &lt; n; i++ )&#123;</div><div class="line">            if (A[i - 1] &gt; A[i])&#123; // 一旦A[i-1]与A[i]逆序，则</div><div class="line">                std::swap( A[i-1], A[i]); // 交换之</div><div class="line">                sorted = false;// 因整体排序不能保证，需要清除排序标志</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">           n--;  // 至此末位元素必然就位， 故可以缩短排序序列的有效长度。</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;// 借助布尔值标志位sorted, 可以及时提前退出，而不至于总是忙里地做n-1次扫描</div><div class="line"></div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    float num, nums[maxn];</div><div class="line">    int n = 0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1) &#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    bubblesort(nums, n);</div><div class="line">    printf("%f\n", nums[n-2]);</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--方差[数组]</span></div><div class="line"></div><div class="line"><span class="comment">//计算数组方差</span></div><div class="line"><span class="comment">/*</span></div><div class="line">float getvar(float arr[], int n);</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    float num, nums[maxn];</div><div class="line">    int n = 0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1) &#123;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    float var = getvar(nums, n);</div><div class="line">    printf("%f\n", var);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">float getvar(float arr[], int n)&#123;</div><div class="line">    float sum = 0;</div><div class="line">    for(int i=0;i&lt;n;i++)</div><div class="line">        sum += arr[i];</div><div class="line">    float ave = sum/n;</div><div class="line">    float p_var;</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        p_var += (arr[i]-ave)*(arr[i]-ave);</div><div class="line">    &#125;</div><div class="line">    float var = p_var/(n-1);</div><div class="line">    return var;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 题目1--不超过平均数的数字个数[数组]</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main() &#123;</div><div class="line">    float num, nums[maxn], sum=0;</div><div class="line">    int n = 0;</div><div class="line">    // 将输入的数字存入数组nums</div><div class="line">    while (scanf("%f", &amp;num) == 1) &#123;</div><div class="line">        sum += num;</div><div class="line">        nums[n] = num;</div><div class="line">        n++;</div><div class="line">    &#125;</div><div class="line">    float ave = sum/n;</div><div class="line">    int nx = 0;</div><div class="line">    for(int i=0;i&lt;n;i++)&#123;</div><div class="line">        if(nums[i] &lt;= ave) nx += 1;</div><div class="line">    &#125;</div><div class="line">    printf("%d\n", nx);</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="OJ练习"><a href="#OJ练习" class="headerlink" title="OJ练习"></a>OJ练习</h5><ul>
<li>[ ] UVa 1585<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 85</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'O'</span>)&#123;</div><div class="line">                count += <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=(i<span class="number">-1</span>);j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">                    <span class="keyword">if</span>(s[j] == <span class="string">'X'</span>) <span class="keyword">break</span>;</div><div class="line">                    count += <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sum += count;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>[ ] UVa 1586<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 85</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">char</span> const_s[] = <span class="string">"CHON"</span>;</div><div class="line">    <span class="keyword">float</span> const_num[<span class="number">4</span>] = &#123;<span class="number">12.01</span>, <span class="number">1.008</span>, <span class="number">16.00</span>, <span class="number">14.01</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">float</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">char</span> s[maxn];</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(s[j])) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;<span class="number">4</span>; m++)</div><div class="line">                <span class="keyword">if</span>(s[j] == const_s[m])&#123;</div><div class="line">                    sum += const_num[m];</div><div class="line">                    <span class="keyword">if</span>((j+<span class="number">1</span>)&lt; len &amp;&amp; !<span class="built_in">isalpha</span>(s[j+<span class="number">1</span>]))&#123;</div><div class="line">                        <span class="keyword">if</span>((j+<span class="number">2</span>)&lt; len &amp;&amp; !<span class="built_in">isalpha</span>(s[j+<span class="number">2</span>])) sum += const_num[m]*((<span class="keyword">int</span>(s[j+<span class="number">1</span>])<span class="number">-48</span>)*<span class="number">10</span>+<span class="keyword">int</span>(s[j+<span class="number">2</span>])<span class="number">-48</span><span class="number">-1</span>);</div><div class="line">                        <span class="keyword">else</span> sum += const_num[m]*(<span class="keyword">int</span>(s[j+<span class="number">1</span>])<span class="number">-48</span><span class="number">-1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>, sum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>[ ] UVa 1225<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// sprintf is the key to solve the problem.</span></div><div class="line"><span class="comment">/*</span></div><div class="line"># define maxn 10005</div><div class="line">int main() &#123;</div><div class="line">    int n;</div><div class="line">    scanf("%d", &amp;n);</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        int nums[10], nx;</div><div class="line"></div><div class="line">        memset(nums, 0, sizeof(nums));</div><div class="line">        scanf("%d", &amp;nx);</div><div class="line">        char strnum[maxn];</div><div class="line">        for (int j = 1; j &lt;=nx; j++) &#123;</div><div class="line">            sprintf(strnum, "%d", j);</div><div class="line">            for (int k = 0; k &lt; strlen(strnum); k++) &#123;</div><div class="line">                for (int l = 0; l &lt;= 9; l++) &#123;</div><div class="line">                    if((int(strnum[k])-48) == l) nums[l] += 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int m = 0; m &lt; 9; m++) &#123;</div><div class="line">            printf("%d ", nums[m]);</div><div class="line">        &#125;</div><div class="line">        printf("%d\n", nums[9]);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>[ ] UVa 455<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 85</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> times;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;times);</div><div class="line">    <span class="keyword">while</span> (times--)&#123;</div><div class="line">        <span class="keyword">char</span> s[maxn];</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> length = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt; length+<span class="number">1</span>; T++) &#123;  <span class="comment">// 这里最大周期可以是它本身的！！</span></div><div class="line">            <span class="keyword">int</span> isans = <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> T_nums;</div><div class="line">            <span class="keyword">if</span>(length%T == <span class="number">0</span>) &#123;</div><div class="line">                T_nums = length/T;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; T_nums; j++) &#123;</div><div class="line">                            <span class="keyword">if</span>(s[i] != s[(i+T*j)])&#123;isans = <span class="number">0</span>;<span class="keyword">break</span>;&#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> isans=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(isans)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(times)<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法竞赛入门经典[紫书]习题笔记(第二章)]]></title>
      <url>/2017/03/13/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8-%E7%B4%AB%E4%B9%A6-%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>紫书第二章习题代码及笔记。主要是想练习下c++的使用，这里纯粹作为记录，有错误欢迎指出，多加交流。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 水仙花</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>; i&lt;=<span class="number">999</span>;i++)&#123;</div><div class="line">        a = i / <span class="number">100</span>;</div><div class="line">        b = (i % <span class="number">100</span>)/<span class="number">10</span>;</div><div class="line">        c = (i % <span class="number">100</span>)%<span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span>((<span class="built_in">pow</span>(a,<span class="number">3</span>)+<span class="built_in">pow</span>(b,<span class="number">3</span>)+<span class="built_in">pow</span>(c,<span class="number">3</span>)) == i)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 韩信点兵</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int a, b, c, n=1;</div><div class="line">    while(scanf("%d %d %d", &amp;a, &amp;b, &amp;c) == 3)&#123;</div><div class="line">        int get = 0;</div><div class="line">        for(int i=10;i&lt;=100; i++ )&#123;</div><div class="line">            if((i%3==a)&amp;&amp;(i%5==b)&amp;&amp;(i%7==c))</div><div class="line">            &#123;</div><div class="line">                get = 1;</div><div class="line">                printf("Case %d: %d\n", n, i);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">        if(get == 0) printf("Case %d: %s\n", n, "No answer");</div><div class="line">    n++;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">// 倒三角形</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int n;</div><div class="line">    scanf("%d", &amp;n);</div><div class="line">    int a=n, b=0;  // a控制#的数量， 把控制前后空格的数量</div><div class="line">    do&#123;</div><div class="line">        for(int j=1;j&lt;=b; j++)</div><div class="line">            printf("%s", " ");</div><div class="line">        for(int i=1; i&lt;=2*a-1;i++ )</div><div class="line">        &#123;</div><div class="line">            printf("%s", "#");</div><div class="line">        &#125;</div><div class="line">        for(int j=1;j&lt;=b; j++)</div><div class="line">            printf("%s", " ");</div><div class="line"></div><div class="line">        a -= 1;</div><div class="line">        b++;</div><div class="line"></div><div class="line">        printf("\n");</div><div class="line"></div><div class="line"></div><div class="line">    &#125;while ((a&gt;=1)&amp;&amp;(a&lt;=20));</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 子序列的和</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int n, m, num=0;</div><div class="line">    while ((scanf("%d %d", &amp;n, &amp;m) == 2)&amp;&amp;m&amp;&amp;n)&#123;</div><div class="line">        num += 1;</div><div class="line">        float r=0.0;</div><div class="line">        for(float i=n; i&lt;=m; i++)&#123;</div><div class="line">            r += 1 / (i*i);</div><div class="line">        &#125;</div><div class="line">        printf("Case %d: %.5f\n", num, r);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">// 分数化小数</span></div><div class="line"><span class="comment">// 偷懒~</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    int a, b ,c;</div><div class="line">    while (scanf("%d %d %d", &amp;a, &amp;b, &amp;c))&#123;</div><div class="line">        float r;</div><div class="line">        r = a/((float) b);</div><div class="line">        std::cout&lt;&lt;std::setprecision(c)&lt;&lt;std::fixed&lt;&lt;r&lt;&lt;"\n";</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 排列</span></div><div class="line"><span class="comment">// 不会...</span></div><div class="line"></div><div class="line"><span class="comment">//思考题2</span></div><div class="line"><span class="comment">/*</span></div><div class="line">int main()&#123;</div><div class="line">    double i;</div><div class="line">//    freopen("output.txt", "w", stdout);</div><div class="line">    for(i=0; i != 10; i += 0.1)&#123;</div><div class="line">        printf("%.1f\n", i);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div></pre></td></tr></table></figure>
<p>最后的思考题，原因在与10.0属于float, 不等于10[int]，所以会一直输出打印的内容，但开始并未出现0.1,0.2,…等的递增的情况，debug发现没有问题，最后发现原因是输出太多内容，将上面的内容掩盖，通过写入文件后再查看，发现打印还是正常的。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu16.04LTS下安装Hadoop2.7.3]]></title>
      <url>/2017/03/08/Ubuntu16-04LTS%E4%B8%8B%E5%AE%89%E8%A3%85Hadoop2-7-3/</url>
      <content type="html"><![CDATA[<p>撸码间隙，突然看到Hadoop，久闻其名，但是还没研究过，于是动手装了下。<br>主要就是参考<a href="https://www.digitalocean.com/community/tutorials/how-to-install-hadoop-in-stand-alone-mode-on-ubuntu-16-04" target="_blank" rel="external">digitalocean</a>的这篇教程，写的十分详细，这里不再赘述。要注意的一点就是在<em>Step 3 — Configuring Hadoop’s Java Home</em>这里，按照教程上的方法找到JAVA的路径再设置，两种方法均可以运行Hadoop，但是在后面运行MapReduce时却总是报错：</p>
<blockquote>
<p>/usr/local/hadoop/bin/hadoop: line 166: /usr/bin/java: No such file or directory</p>
</blockquote>
<p>好象是JAVA的路径不对，之前设置的是</p>
<blockquote>
<p>export JAVA_HOME=/usr/</p>
</blockquote>
<p>就重新找到JAVA的安装路径，设置为</p>
<blockquote>
<p>export JAVA_HOME=/usr/jdk-8/jre/</p>
</blockquote>
<p>然后就可以了。<br>装好了，之后忙完这阵，就先学个入门: - )</p>
]]></content>
      
        <categories>
            
            <category> Hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Numpy日常积累]]></title>
      <url>/2017/03/06/Numpy%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>阅读书籍 <em>NumPy Beginner’s Guide [Second Edition]</em>，一些关于使用Numpy的笔记。</p>
<h5 id="1-ravel-and-flatten"><a href="#1-ravel-and-flatten" class="headerlink" title="1. ravel and flatten"></a>1. ravel and flatten</h5><blockquote>
<p>参考<a href="http://stackoverflow.com/questions/28930465/what-is-the-difference-between-flatten-and-ravel-functions-in-numpy" target="_blank" rel="external">这里</a></p>
<p>The difference is that flatten always returns a copy and ravel returns a view of the original array whenever possible. This isn’t visible in the printed output, but if you modify the array returned by ravel, it may modify the entries in the original array. If you modify the entries in an array returned from flatten this will never happen. ravel will often be faster since no memory is copied, but you have to be more careful about modifying the array it returns.</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/numpy/3.png" alt=""></p>
<h5 id="2-reshape-and-resize"><a href="#2-reshape-and-resize" class="headerlink" title="2. reshape and resize"></a>2. reshape and resize</h5><blockquote>
<p>The resize method works just like the reshape method, but modifies the<br>array it operates on</p>
<p>即，resize改变操作的对象，而reshape不改变。</p>
</blockquote>
<h5 id="3-Dates"><a href="#3-Dates" class="headerlink" title="3. Dates"></a>3. Dates</h5><p>关于np.loadtxt函数导入日期的问题。</p>
<h6 id="3-1-converters"><a href="#3-1-converters" class="headerlink" title="3.1 converters"></a>3.1 converters</h6><blockquote>
<p>converters : dict, optional<br>A dictionary mapping column number to a function that will convert<br>that column to a float.  E.g., if column 0 is a date string:<br><code>converters = {0: datestr2num}</code>.  Converters can also be used to<br>provide a default value for missing data (but see also <code>genfromtxt</code>):<br><code>converters = {3: lambda s: float(s.strip() or 0)}</code>.  Default: None.</p>
</blockquote>
<h6 id="3-2-binary-to-str"><a href="#3-2-binary-to-str" class="headerlink" title="3.2 binary to str"></a>3.2 binary to str</h6><p>首先，我们运行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dates, close=np.loadtxt(<span class="string">'data.csv'</span>, delimiter=<span class="string">','</span>, usecols=(<span class="number">1</span>,<span class="number">6</span>), unpack=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>结果报错：</p>
<blockquote>
<p><strong>ValueError: could not convert string to float: b’28-01-2011’</strong></p>
</blockquote>
<p>于是我们编写指定日期格式的函数，再次导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">datestr2num</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> datetime.strptime(s, <span class="string">"%d-%m-%Y"</span>).date().weekday()</div><div class="line">    </div><div class="line">dates, close=np.loadtxt(<span class="string">'data.csv'</span>, delimiter=<span class="string">','</span>, usecols=(<span class="number">1</span>,<span class="number">6</span>),</div><div class="line">converters=&#123;<span class="number">1</span>: datestr2num&#125;, unpack=<span class="keyword">True</span>)</div><div class="line"></div></pre></td></tr></table></figure><br>还是报错：</p>
<blockquote>
<p><strong>TypeError: strptime() argument 1 must be str, not bytes</strong></p>
</blockquote>
<p>这次是因为日期列是二进制的格式，而我们的strptime要求参数是字符型。<br>修改datestr2num函数即可。继续运行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">datestr2num</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> datetime.strptime(s.decode(<span class="string">'ascii'</span>), <span class="string">"%d-%m-%Y"</span>).date().weekday()</div><div class="line">    </div><div class="line">dates, close=np.loadtxt(<span class="string">'data.csv'</span>, delimiter=<span class="string">','</span>, usecols=(<span class="number">1</span>,<span class="number">6</span>),</div><div class="line">converters=&#123;<span class="number">1</span>: datestr2num&#125;, unpack=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>这次OK了!</p>
<p>参考：<em>NumPy Beginner’s Guide [Second Edition] </em>，<a href="http://stackoverflow.com/questions/21117311/time-strptime-argument-0-must-be-str-not-bytes" target="_blank" rel="external">stackoverflow</a></p>
<h5 id="4-argmax-amp-argmin"><a href="#4-argmax-amp-argmin" class="headerlink" title="4. argmax &amp; argmin"></a>4. argmax &amp; argmin</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/numpy/4.png" alt=""></p>
<p>也就是说，在使用argmax[argmin]时，我们一定注意数组中没有nan,否则我们将会得到错误的结果而找不出原因。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python日常积累]]></title>
      <url>/2017/03/06/Python%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<h5 id="1-copy-amp-deepcopy"><a href="#1-copy-amp-deepcopy" class="headerlink" title="1.copy &amp; deepcopy"></a>1.copy &amp; deepcopy</h5><p>参考<a href="http://www.cnblogs.com/Richardzhu/p/4723750.html" target="_blank" rel="external">这里</a><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/copy.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The Speed of Numpy]]></title>
      <url>/2017/03/06/The-Speed-of-Numpy/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>实现算法时，越发觉得，Numpy对效率的影响特别大，所以再次学习。<br>这里主要是进行数组运算速度的对比，对原文代码稍加改进，更直观地看到速度上的差别。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">numpysum</span><span class="params">(n)</span>:</span></div><div class="line">    a = np.arange(n)**<span class="number">2</span></div><div class="line">    b = np.arange(n)**<span class="number">3</span></div><div class="line">    c  =a + b</div><div class="line">    <span class="keyword">return</span> c</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pythonsum</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment"># 这里由于源码为Python2的，range的用法可能有变</span></div><div class="line">    <span class="comment"># 直接运行报错TypeError: 'range' object does not support item assignment</span></div><div class="line">    <span class="comment"># 故转化为列表</span></div><div class="line">    a = list(range(n))</div><div class="line">    b = list(range(n))</div><div class="line">    c = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">        a[i] = i ** <span class="number">2</span></div><div class="line">        b[i] = i ** <span class="number">3</span></div><div class="line">        c.append(a[i] + b[i])</div><div class="line">    <span class="keyword">return</span> c</div><div class="line"><span class="comment"># prt表示是否打印结果</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printest</span><span class="params">(func, size, prt=True)</span>:</span></div><div class="line">    start = datetime.now()</div><div class="line">    c = func(size)</div><div class="line">    delta = datetime.now() - start</div><div class="line">    <span class="keyword">if</span> prt==<span class="keyword">True</span>:</div><div class="line">        print(<span class="string">"The last 2 elements of the sum "</span>, c[<span class="number">-2</span>:])</div><div class="line">        print(<span class="string">'Elapsed time in microsecondas '</span>, delta.microseconds)</div><div class="line">    <span class="keyword">return</span> delta.microseconds</div><div class="line"><span class="comment"># 用于作n-time图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeplot</span><span class="params">()</span>:</span></div><div class="line">    pts = []</div><div class="line">    x = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">10000</span>, <span class="number">100</span>):</div><div class="line">        t_numpy = printest(numpysum, i, prt=<span class="keyword">False</span>)</div><div class="line">        t_python = printest(pythonsum, i, prt=<span class="keyword">False</span>)</div><div class="line">        pts.append([t_numpy, t_python])</div><div class="line">        x.append(i)</div><div class="line">    plt.plot(x, pts)</div><div class="line">    plt.legend([<span class="string">'Numpy'</span>, <span class="string">'Python'</span>])</div><div class="line">    plt.show()</div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    size = int(sys.argv[<span class="number">1</span>])</div><div class="line">    print(<span class="string">'Numpysum...'</span>)</div><div class="line">    printest(numpysum, size)</div><div class="line">    print(<span class="string">'Pythonsum...'</span>)</div><div class="line">    printest(pythonsum, size)</div><div class="line">    timeplot()</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>运行：</p>
<blockquote>
<p>python Speed.py 10000</p>
</blockquote>
<p>输出：<br>&gt;<br>Numpysum…<br>The last 2 elements of the sum  [999500079996 999800010000]<br>Elapsed time in microsecondas  1299<br>Pythonsum…<br>The last 2 elements of the sum  [999500079996, 999800010000]<br>Elapsed time in microsecondas  18202</p>
<p><img src="http://blog-1252464519.costj.myqcloud.com/170518/Selection_051902.png" alt=""></p>
<p>可以看到，相比pure python， Numpy在大规模的运算上具有极高的效率。</p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>关于做图的补充：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line">l = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</div><div class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], l)</div><div class="line">plt.legend([<span class="string">'a'</span>, <span class="string">'b'</span>])</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure><br>输出：<br><img src="http://blog-1252464519.costj.myqcloud.com/170518/Selection_051903.png" alt=""></p>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><em>NumPy Beginner’s Guide [Second Edition]</em> <em>Page19</em></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cin and cin.getline]]></title>
      <url>/2017/03/06/cin-and-cin-getline/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>关于cin与cin.getline在使用时要注意的地方，关键在于”newline”的处理。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>我们先来看一个例子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What year was your house biult?\n"</span>;</div><div class="line">        <span class="keyword">int</span> year;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;year;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What is its streer address?\n"</span>;</div><div class="line">        <span class="keyword">char</span> address[<span class="number">80</span>];</div><div class="line">        <span class="built_in">cin</span>.getline(address, <span class="number">80</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">"Year built: "</span>&lt;&lt;year&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Address: "</span>&lt;&lt;address&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Done!\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出:</p>
<blockquote>
<p>What year was your house biult?<br>2017<br>What is its streer address?<br>Year built: 2017<br>Address:<br>Done!</p>
</blockquote>
<p>可以看到，还没输入地址，就打印并结束了程序。<br>原因:</p>
<blockquote>
<p>The problem is that when cin reads the year, it leaves the newline generated by the Enter key in the input queue. Then, cin.getline() reads the newline as an empty line and assigns a null string to the address array.</p>
</blockquote>
<p>解决办法：</p>
<blockquote>
<p>The fix is to read and discard the newline before reading the address.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What year was your house biult?\n"</span>;</div><div class="line">        <span class="keyword">int</span> year;</div><div class="line"></div><div class="line">        <span class="comment">// 这里使用get将作为cin结束的newline清除即可</span></div><div class="line">        <span class="comment">//(cin&gt;&gt;year).get();</span></div><div class="line">        <span class="built_in">cin</span>&gt;&gt;year;</div><div class="line">        <span class="built_in">cin</span>.get();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"What is its streer address?\n"</span>;</div><div class="line">        <span class="keyword">char</span> address[<span class="number">80</span>];</div><div class="line">        <span class="built_in">cin</span>.getline(address, <span class="number">80</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">"Year built: "</span>&lt;&lt;year&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Address: "</span>&lt;&lt;address&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Done!\n"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>What year was your house biult?<br>1998<br>What is its streer address?<br>earth<br>Year built: 1998<br>Address: earth<br>Done!</p>
</blockquote>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><em>C++ Primer Plus(5th Edition)</em>   Page147</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Classifying News Headlines with scikit-learn]]></title>
      <url>/2017/03/05/Classifying-News-Headlines-with-scikit-learn/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p>Kaggle案例学习，练习使用sklearn进行新闻的分类，主要使用了朴素贝叶斯进行分类。</p>
<h5 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h5><blockquote>
<p>学习使用正则来清洗数据<br>掌握sklearn准备训练集和测试集的方法[LabelEncoder， train_test_split等的使用]<br>学习使用sklearn调用朴素贝叶斯算法进行分类预测</p>
</blockquote>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># get some libraries that will be useful</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># linear algebra</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span></div><div class="line"></div><div class="line"><span class="comment"># the Naive Bayes model</span></div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</div><div class="line"><span class="comment"># function to split the data for cross-validation</span></div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="comment"># function for transforming documents into counts</span></div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</div><div class="line"><span class="comment"># function for encoding categories</span></div><div class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># grab the data</span></div><div class="line">news = pd.read_csv(<span class="string">"uci-news-aggregator.csv"</span>)</div><div class="line"></div><div class="line"><span class="comment"># let's take a look at our data</span></div><div class="line">print(news.head())</div><div class="line"></div><div class="line"><span class="comment"># 对新闻标题的处理</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_text</span><span class="params">(s)</span>:</span></div><div class="line">    s = s.lower()</div><div class="line"></div><div class="line">    <span class="comment"># remove punctuation that is not word-internal (e.g., hyphens, apostrophes)</span></div><div class="line">    s = re.sub(<span class="string">'\s\W'</span>, <span class="string">' '</span>, s)</div><div class="line">    s = re.sub(<span class="string">'\W\s'</span>, <span class="string">' '</span>, s)</div><div class="line"></div><div class="line">    <span class="comment"># make sure we didn't introduce any double spaces</span></div><div class="line">    s = re.sub(<span class="string">'\s+'</span>, <span class="string">' '</span>, s)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line"></div><div class="line">news[<span class="string">'TEXT'</span>] = [normalize_text(s) <span class="keyword">for</span> s <span class="keyword">in</span> news[<span class="string">'TITLE'</span>]]</div><div class="line">print(news[<span class="string">'TITLE'</span>].head())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 准备训练集和测试集</span></div><div class="line"><span class="comment"># pull the data into vectors</span></div><div class="line">vectorizer = CountVectorizer()</div><div class="line">x = vectorizer.fit_transform(news[<span class="string">'TEXT'</span>])</div><div class="line"></div><div class="line">encoder = LabelEncoder()</div><div class="line">y = encoder.fit_transform(news[<span class="string">'CATEGORY'</span>])</div><div class="line"></div><div class="line"><span class="comment"># split into train and test sets</span></div><div class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>)</div><div class="line"></div><div class="line"><span class="comment"># take a look at the shape of each of these</span></div><div class="line">print(x_train.shape)</div><div class="line">print(y_train.shape)</div><div class="line">print(x_test.shape)</div><div class="line">print(y_test.shape)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 开始预测</span></div><div class="line">nb = MultinomialNB()</div><div class="line">nb.fit(x_train, y_train)</div><div class="line">print(nb.score(x_test, y_test))</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>关于正则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in</div><div class="line">         bytes patterns or string patterns with the ASCII flag.</div><div class="line">         In string patterns without the ASCII flag, it will match the whole</div><div class="line">         range of Unicode whitespace characters.</div><div class="line">\S       Matches any non-whitespace character; equivalent to [^\s].</div><div class="line">\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]</div><div class="line">         in bytes patterns or string patterns with the ASCII flag.</div><div class="line">         In string patterns without the ASCII flag, it will match the</div><div class="line">         range of Unicode alphanumeric characters (letters plus digits</div><div class="line">         plus underscore).</div><div class="line">         With LOCALE, it will match the set [0-9_] plus characters defined</div><div class="line">         as letters for the current locale.</div><div class="line">\W       Matches the complement of \w.</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>关于LabelEncoder:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class LabelEncoder(sklearn.base.BaseEstimator, sklearn.base.TransformerMixin)</div><div class="line">|  Encode labels with value between 0 and n_classes-1.</div><div class="line">|</div><div class="line">|  Read more in the :ref:`User Guide &lt;preprocessing_targets&gt;`.</div><div class="line">|</div><div class="line">|  Attributes</div><div class="line">|  ----------</div><div class="line">|  classes_ : array of shape (n_class,)</div><div class="line">|      Holds the label for each class.</div><div class="line">|</div><div class="line">|  Examples</div><div class="line">|  --------</div><div class="line">|  `LabelEncoder` can be used to normalize labels.</div><div class="line">|  &gt;&gt;&gt; from sklearn import preprocessing</div><div class="line">|  &gt;&gt;&gt; le = preprocessing.LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; le.fit([1, 2, 2, 6])</div><div class="line">|  LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; le.classes_</div><div class="line">|  array([1, 2, 6])</div><div class="line">|  &gt;&gt;&gt; le.transform([1, 1, 2, 6]) #doctest: +ELLIPSIS</div><div class="line">|  array([0, 0, 1, 2]...)</div><div class="line">|  &gt;&gt;&gt; le.inverse_transform([0, 0, 1, 2])</div><div class="line">|  array([1, 1, 2, 6])</div><div class="line">|</div><div class="line">|  It can also be used to transform non-numerical labels (as long as they are</div><div class="line">|  hashable and comparable) to numerical labels.</div><div class="line">|</div><div class="line">|  &gt;&gt;&gt; le = preprocessing.LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; le.fit([&quot;paris&quot;, &quot;paris&quot;, &quot;tokyo&quot;, &quot;amsterdam&quot;])</div><div class="line">|  LabelEncoder()</div><div class="line">|  &gt;&gt;&gt; list(le.classes_)</div><div class="line">|  [&apos;amsterdam&apos;, &apos;paris&apos;, &apos;tokyo&apos;]</div><div class="line">|  &gt;&gt;&gt; le.transform([&quot;tokyo&quot;, &quot;tokyo&quot;, &quot;paris&quot;]) #doctest: +ELLIPSIS</div><div class="line">|  array([2, 2, 1]...)</div><div class="line">|  &gt;&gt;&gt; list(le.inverse_transform([2, 2, 1]))</div><div class="line">|  [&apos;tokyo&apos;, &apos;tokyo&apos;, &apos;paris&apos;]</div><div class="line"></div></pre></td></tr></table></figure></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.kaggle.com/shenxiangzhuang/d/uciml/news-aggregator-dataset/classifying-news-headlines-with-scikit-learn/editnb" target="_blank" rel="external"><em>Classifying News Headlines with scikit-learn</em></a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最大似然估计与经验风险最小化]]></title>
      <url>/2017/03/03/%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E4%B8%8E%E7%BB%8F%E9%AA%8C%E9%A3%8E%E9%99%A9%E6%9C%80%E5%B0%8F%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第一章笔记——经验风险最小化推导极大似然估计</p>
<p>题目：当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计</p>
<p>1.1预备知识——统计学习三要素</p>
<p>模型的假设空间，模型选择的标准以及模型学习的算法是统计学习方法的三要素。</p>
<p>简记为： 方法 = 模型+策略+算法</p>
<p>1.2.预备知识——损失函数</p>
<p>在模型的假设空间，我们要确定一定的准则来确定模型的好坏，即我们需要确定一定的策略[三要素之一]去衡量，所以我们引入了损失函数[loss function]或代价函数[cost function].</p>
<p>损失函数有很多种，例如0-1损失函数， 平方损失函数等，这里我们要用的是对数损失函数。<br>$$L(Y, P(Y | X)) = - \log P(Y | X)$$</p>
<p>1.3.预备知识——风险函数</p>
<p>选定损失函数后，其值越小，模型就越好。模型的输入与输出(X, Y)是随机变量，遵循联合分布P（X, Y）， 所以损失函数的期望为:</p>
<span>$$R_{exp} = E_p[L(Y, f(X))] = \int_{X \times Y} L(y, f(x))P(x, y)dxdy $$</span><!-- Has MathJax -->
<p>这就是风险函数[risk function] 或 期望损失[expected loss], 其代表理论上模型f(X)关于联合分布P(X, Y)的平均意义下的损失.</p>
<p>1.4.预备知识——经验风险</p>
<p>关于有监督学习的病态问题[ill-formed problem]: 一方面，根据最小化风险函数确立最优的的模型需要联合分布P(X, Y)，另一方面此联合分布又是未知的。</p>
<p>我们想到用样本估计整体， 为此我们引入经验风险[empirical risk]或经验损失[empirical loss] ：</p>
<span>$$ R_{emp}(f) = \frac{1}{N}\sum_{i=1}^{N}L(y_i, f(x_i)) $$</span><!-- Has MathJax -->
<p>其中，定义训练集为：</p>
<p>$$T = {(x_1, y_1), (x_2, y_2), \cdots , (x_N, y_N)}$$</p>
<p>根据大数定律，在样本量N趋向于无穷时， $R<em>{emp}(f)$趋于$R</em>{exp}(f)$. 当然实际上标注好的样本一般达不到要求，所以效果不太好，这时我们可以引入关于模型复杂度的罚项来纠正，这里暂时不展开讨论。</p>
<p>1.5.预备知识——极大似然估计</p>
<ol>
<li>证明：</li>
</ol>
<p>设$$x_1, x_2, \cdots , x_n$$为独立同分布[idd]的样本，$$\theta$$为模型参数，$$f$$为我们使用的模型。</p>
<p>由idd:</p>
<p>$$f(x_1, x_2, \cdots, x_n) = f(x_1|\theta)\times f(x_2|\theta)\times \cdots \times f(x_n|\theta)$$</p>
<p>而实际上我们已知$$x_1, x_2, \cdots , x_n$$, 未知的是，$$\theta$$， 故似然定义为:</p>
<span>$$L(\theta|x_1, x_2, \cdots , x_n) = f(x_1, x_2, \cdots , x_n|\theta) = \coprod_{i=1}^{n}f(x_i|\theta)$$</span><!-- Has MathJax -->
<p>此为样本发生可能性的大小，而极大似然估计的核心即为，以使得当前样本发生概率最大时的参数$$\hat{\theta}$$作为真实参数$$\theta$$的一个估计值。所以此时我们要求的是$$L(\theta|x_1, x_2, \cdots , x_n)$$取得最大值时$$\theta$$的值，即为$$\hat{\theta}$$。即问题转化为求$$L(\theta|x_1, x_2, \cdots , x_n)$$的极值问题。自然想到导数，而由于连乘的存在，可利用对数函数单调递增的性质，两边取对数再求导，可以简化计算。</p>
<span>$$\ln{L(\theta|x_1, x_2, \cdots, x_n)} = \sum_{i=1}^{n}\ln{f(x_i|\theta)}$$</span><!-- Has MathJax -->
<p>上式即为对数似然，而一般而言的最大似然中的似然指的是对数平均似然$$\hat{l}$$，即为：</p>
<p>$$\hat{l} = \frac{1}{n}\ln{L}$$</p>
<p>整理得：</p>
<p>$$\hat{\theta} = \mathop{\arg\max}_{\theta\epsilon R^n}\hat{l}(\theta|x_1, x_2, \cdots, x_n)$$</p>
<p>看到，极大似然估计即为:</p>
<p>$$max\frac{1}{n}\sum_{i=1}^{n}\ln{f(x_i|\theta)}$$</p>
<p>即：</p>
<p>$$min\frac{1}{n}\sum_{i=1}^{n}-\ln{f(x_i|\theta)}$$</p>
<p>而经验风险最小化公式为：</p>
<span>$$\mathop{\arg\min}_{f\epsilon F}\frac{1}{N}\sum_{i=1}^{N}L(y_i, f(x_i))$$</span><!-- Has MathJax -->
<p>所以，在模型为条件概率分布模型，损失函数是对数损失函数$$L(Y, P(Y | X)) = - \log P(Y | X)$$时，经验风险最小化就等价于极大似然估计</p>
<p>证毕。</p>
]]></content>
      
        <categories>
            
            <category> 统计学习方法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[感知机学习算法的对偶形式]]></title>
      <url>/2017/03/03/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%B9%E5%81%B6%E5%BD%A2%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第二章笔记。<br>关于感知机学习算法对偶形式的简单实现[ Python ]。<br>之前有<a href="http://datahonor.com/2017/03/03/%E5%8E%9F%E5%A7%8B%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%A8%A1%E5%9E%8B/#more">原始感知机学习算法</a>的实现。</p>
<h5 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/21.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/22.png" alt=""></p>
<h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S1--&gt;随机生成训练集并标注</span></div><div class="line"></div><div class="line"><span class="comment"># train matrix</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_data</span><span class="params">()</span>:</span></div><div class="line">    M1 = np.random.random((<span class="number">100</span>, <span class="number">2</span>))</div><div class="line">    M11 = np.column_stack((M1, np.ones(<span class="number">100</span>)))</div><div class="line"></div><div class="line">    M2 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) - <span class="number">0.7</span></div><div class="line">    M22 = np.column_stack((M2, np.ones(<span class="number">100</span>) * (<span class="number">-1</span>)))</div><div class="line">    <span class="comment"># 合并两类，并将位置索引加到最后</span></div><div class="line">    MA = np.vstack((M11, M22))</div><div class="line">    MA = np.column_stack((MA, range(<span class="number">0</span>, <span class="number">200</span>)))</div><div class="line"></div><div class="line">    <span class="comment"># 作图操作</span></div><div class="line">    plt.plot(M1[:, <span class="number">0</span>], M1[:, <span class="number">1</span>], <span class="string">'ro'</span>)</div><div class="line">    plt.plot(M2[:, <span class="number">0</span>], M2[:, <span class="number">1</span>], <span class="string">'go'</span>)</div><div class="line">    <span class="comment"># 为了美观，根据数据点限制之后分类线的范围</span></div><div class="line">    min_x = np.min(M2)</div><div class="line">    max_x = np.max(M1)</div><div class="line">    <span class="comment"># 分隔x,方便作图</span></div><div class="line">    x = np.linspace(min_x, max_x, <span class="number">100</span>)</div><div class="line">    <span class="comment"># 此处返回 x 是为了之后作图方便</span></div><div class="line">    <span class="keyword">return</span> MA, x</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S2--&gt;GRAM计算</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gram</span><span class="params">(MA)</span>:</span></div><div class="line">    GRAM = np.empty(shape=(<span class="number">200</span>, <span class="number">200</span>))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(MA)):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(MA)):</div><div class="line">            GRAM[i, j] = np.dot(MA[i,][:<span class="number">2</span>], MA[j,][:<span class="number">2</span>])</div><div class="line">    <span class="keyword">return</span> GRAM</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S3--&gt;训练模型</span></div><div class="line"></div><div class="line"><span class="comment"># 模型实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(alpha, b, xi, yi, yN, index, GRAM)</span>:</span></div><div class="line">    pa1 = alpha * yN</div><div class="line">    pa2 = GRAM[:, index]</div><div class="line">    num = yi * (np.dot(pa1, pa2) + b)</div><div class="line">    <span class="keyword">return</span> num</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 训练training data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(MA, alpha, b, GRAM, yN)</span>:</span></div><div class="line">    <span class="comment"># M 存储每次处理后依旧处于误分类的原始数据</span></div><div class="line">    M = []</div><div class="line">    <span class="keyword">for</span> sample <span class="keyword">in</span> MA:</div><div class="line">        xi = sample[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">        yi = sample[<span class="number">-2</span>]</div><div class="line">        index = int(sample[<span class="number">-1</span>])</div><div class="line">        <span class="comment"># 如果为误分类，改变alpha,b</span></div><div class="line">        <span class="comment"># n 为学习率</span></div><div class="line">        <span class="keyword">if</span> func(alpha, b, xi, yi, yN, index, GRAM) &lt;= <span class="number">0</span>:</div><div class="line">            alpha[index] += n</div><div class="line">            b += n * yi</div><div class="line">            M.append(sample)</div><div class="line">    <span class="keyword">if</span> len(M) &gt; <span class="number">0</span>:</div><div class="line">        train(M, alpha, b, GRAM, yN)</div><div class="line">    <span class="keyword">return</span> alpha, b</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 作出分类线的图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_classify</span><span class="params">(w, b, x, rate0)</span>:</span></div><div class="line">    y = (w[<span class="number">0</span>] * x + b) / ((<span class="number">-1</span>) * w[<span class="number">1</span>])</div><div class="line">    plt.plot(x, y)</div><div class="line">    plt.title(<span class="string">'Accuracy = '</span> + str(rate0))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S4--&gt;生成测试集并测试模型准确性</span></div><div class="line"></div><div class="line"><span class="comment"># 随机生成testing data 并作图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_data</span><span class="params">()</span>:</span></div><div class="line">    M = np.random.random((<span class="number">50</span>, <span class="number">2</span>))</div><div class="line">    plt.plot(M[:, <span class="number">0</span>], M[:, <span class="number">1</span>], <span class="string">'*y'</span>)</div><div class="line">    <span class="keyword">return</span> M</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对传入的testing data 的单个样本进行分类</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(w, b, test_i)</span>:</span></div><div class="line">    <span class="keyword">if</span> np.sign(np.dot(w, test_i) + b) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 测试数据，返回正确率</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(w, b, test_data)</span>:</span></div><div class="line">    right_count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> test_i <span class="keyword">in</span> test_data:</div><div class="line">        classx = classify(w, b, test_i)</div><div class="line">        <span class="keyword">if</span> classx == <span class="number">1</span>:</div><div class="line">            right_count += <span class="number">1</span></div><div class="line">    rate = right_count / len(test_data)</div><div class="line">    <span class="keyword">return</span> rate</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 作出学习率——准确率的图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_n_rate</span><span class="params">(rate_l)</span>:</span></div><div class="line">    <span class="comment"># plot n-rate</span></div><div class="line">    n_l = sorted([float(x) <span class="keyword">for</span> x <span class="keyword">in</span> rate_l.keys()])</div><div class="line">    y = [float(rate_l[n_l[i]]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n_l))]</div><div class="line">    print(n_l, <span class="string">'\n'</span>, y)</div><div class="line">    plt.plot(n_l, y, <span class="string">'ro-'</span>)</div><div class="line">    plt.title(<span class="string">"n-accuracy"</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    MA, x = get_train_data()</div><div class="line">    test_data = get_test_data()</div><div class="line">    GRAM = get_gram(MA)</div><div class="line">    yN = MA[:, <span class="number">2</span>]</div><div class="line">    xN = MA[:, <span class="number">0</span>:<span class="number">2</span>]</div><div class="line">    <span class="comment"># 定义初始值</span></div><div class="line">    alpha = [<span class="number">0</span>] * <span class="number">200</span></div><div class="line">    b = <span class="number">0</span></div><div class="line">    n = <span class="number">1</span></div><div class="line">    <span class="comment"># 初始化最优的正确率</span></div><div class="line">    rate0 = <span class="number">0</span></div><div class="line">    rate_l = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">#    print(alpha,b)</span></div><div class="line">    <span class="comment">#    循环不同的学习率n,寻求最优的学习率，即最终的rate0</span></div><div class="line">    <span class="comment">#    w0,b0为对应的最优参数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">0.01</span>, <span class="number">1</span>, <span class="number">1000</span>):</div><div class="line">        n = i</div><div class="line">        alpha, b = train(MA, alpha, b, GRAM, yN)</div><div class="line">        alphap = np.column_stack((alpha * yN, alpha * yN))</div><div class="line">        w = sum(alphap * xN)</div><div class="line">        rate = test(w, b, test_data)</div><div class="line">        <span class="comment"># print(w,b)</span></div><div class="line">        rate = test(w, b, test_data)</div><div class="line">        <span class="keyword">if</span> rate &gt; rate0:</div><div class="line">            rate_l[n] = rate</div><div class="line">            rate0 = rate</div><div class="line">            w0 = w</div><div class="line">            b0 = b</div><div class="line">            print(<span class="string">'Until now, the best result of the accuracy on test data is '</span> + str(rate))</div><div class="line">            print(<span class="string">'with w='</span> + str(w0) + <span class="string">' b='</span> + str(b0))</div><div class="line">            print(<span class="string">"n="</span>, n)</div><div class="line">            print(<span class="string">'---------------------------------------------'</span>)</div><div class="line">            <span class="comment">#     在选定最优的学习率后，作图</span></div><div class="line">    plot_classify(w0, b0, x, rate0)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># 作出学习率——准确率的图</span></div><div class="line">    plot_n_rate(rate_l)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/23.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/24.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/25.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> ML </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原始感知机模型]]></title>
      <url>/2017/03/03/%E5%8E%9F%E5%A7%8B%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第二章笔记。<br>关于原始感知机学习算法的简单实现[ Python ]。<br>之后有<a href="http://datahonor.com/2017/03/03/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%B9%E5%81%B6%E5%BD%A2%E5%BC%8F/#more">感知机的对偶形式</a>的实现。</p>
<h5 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/1.png" alt=""></p>
<h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S1--&gt;随机生成训练集并标注</span></div><div class="line"></div><div class="line"><span class="comment"># train matrix</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_data</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    M1 = np.random.random((<span class="number">100</span>, <span class="number">2</span>))</div><div class="line">    M11 = np.column_stack((M1, np.ones(<span class="number">100</span>)))</div><div class="line"></div><div class="line">    M2 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) - <span class="number">0.7</span></div><div class="line">    M22 = np.column_stack((M2, np.ones(<span class="number">100</span>) * (<span class="number">-1</span>)))</div><div class="line"></div><div class="line">    MA = np.vstack((M11, M22))</div><div class="line"></div><div class="line">    plt.plot(M1[:, <span class="number">0</span>], M1[:, <span class="number">1</span>], <span class="string">'ro'</span>)</div><div class="line">    plt.plot(M2[:, <span class="number">0</span>], M2[:, <span class="number">1</span>], <span class="string">'go'</span>)</div><div class="line">    min_x = np.min(M2)</div><div class="line">    max_x = np.max(M1)</div><div class="line">    <span class="comment"># 此处返回 x 是为了之后作图方便</span></div><div class="line">    x = np.linspace(min_x, max_x, <span class="number">100</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> MA, x</div><div class="line"></div><div class="line"><span class="comment"># S2--&gt;原始感知机模型的训练及做图</span></div><div class="line"></div><div class="line"><span class="comment"># 感知机模型:f(x) = sign(w*x+b)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(w, b, xi, yi)</span>:</span></div><div class="line">    num = yi * (np.dot(w, xi) + b)</div><div class="line">    <span class="keyword">return</span> num</div><div class="line"></div><div class="line"><span class="comment"># 训练training data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(MA, w, b)</span>:</span></div><div class="line">    <span class="comment"># M 存储每次处理后依旧处于误分类的原始数据</span></div><div class="line">    M = []</div><div class="line">    <span class="keyword">for</span> sample <span class="keyword">in</span> MA:</div><div class="line">        xi = sample[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">        yi = sample[<span class="number">-1</span>]</div><div class="line">        <span class="comment"># 如果为误分类，更新w, b</span></div><div class="line">        <span class="comment"># n 为学习率</span></div><div class="line">        <span class="keyword">if</span> func(w, b, xi, yi) &lt;= <span class="number">0</span>:</div><div class="line">            w += n * yi * xi</div><div class="line">            b += n * yi</div><div class="line">            M.append(sample)</div><div class="line">    <span class="keyword">if</span> len(M) &gt; <span class="number">0</span>:</div><div class="line">        train(M, w, b)</div><div class="line">    <span class="keyword">return</span> w, b</div><div class="line"></div><div class="line"><span class="comment"># 作出分类线的图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_classify</span><span class="params">(w, b, x, rate0)</span>:</span></div><div class="line">    y = (w[<span class="number">0</span>] * x + b) / ((<span class="number">-1</span>) * w[<span class="number">1</span>])</div><div class="line">    plt.plot(x, y)</div><div class="line">    plt.title(<span class="string">'Accuracy = '</span> + str(rate0))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S3--&gt;随机生成测试集，并测试模型</span></div><div class="line"></div><div class="line"><span class="comment"># 随机生成testing data 并作图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_data</span><span class="params">()</span>:</span></div><div class="line">    M = np.random.random((<span class="number">50</span>, <span class="number">2</span>))</div><div class="line">    plt.plot(M[:, <span class="number">0</span>], M[:, <span class="number">1</span>], <span class="string">'*y'</span>)</div><div class="line">    <span class="keyword">return</span> M</div><div class="line"></div><div class="line"><span class="comment"># 对传入的testing data 的单个样本进行分类</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(w, b, test_i)</span>:</span></div><div class="line">    <span class="keyword">if</span> np.sign(np.dot(w, test_i) + b) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># 测试数据，返回正确率</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(w, b, test_data)</span>:</span></div><div class="line">    right_count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> test_i <span class="keyword">in</span> test_data:</div><div class="line">        classx = classify(w, b, test_i)</div><div class="line">        <span class="keyword">if</span> classx == <span class="number">1</span>:</div><div class="line">            right_count += <span class="number">1</span></div><div class="line">    rate = right_count / len(test_data)</div><div class="line">    <span class="keyword">return</span> rate</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_n_rate</span><span class="params">(rate_l)</span>:</span></div><div class="line">    <span class="comment"># plot n-rate</span></div><div class="line">    n_l = sorted([float(x) <span class="keyword">for</span> x <span class="keyword">in</span> rate_l.keys()])</div><div class="line">    y = [float(rate_l[n_l[i]]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n_l))]</div><div class="line">    print(n_l, <span class="string">'\n'</span>, y)</div><div class="line">    plt.plot(n_l, y, <span class="string">'ro-'</span>)</div><div class="line">    plt.title(<span class="string">"n-accuracy"</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    MA, x = get_train_data()</div><div class="line">    test_data = get_test_data()</div><div class="line">    <span class="comment"># 定义初始的w,b</span></div><div class="line">    w = [<span class="number">0</span>, <span class="number">0</span>]</div><div class="line">    b = <span class="number">0</span></div><div class="line">    <span class="comment"># 初始化最优的正确率</span></div><div class="line">    rate0 = <span class="number">0</span></div><div class="line">    <span class="comment"># rate_l 记录学习率的更新</span></div><div class="line">    rate_l = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment"># 循环不同的学习率n,寻求最优的学习率，即最终的rate0</span></div><div class="line">    <span class="comment"># w0,b0为对应的最优参数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">0.01</span>, <span class="number">1</span>, <span class="number">1000</span>):</div><div class="line">        n = i</div><div class="line">        w, b = train(MA, w, b)</div><div class="line">        <span class="comment"># print(w,b)</span></div><div class="line">        rate = test(w, b, test_data)</div><div class="line">        <span class="keyword">if</span> rate &gt;= rate0:</div><div class="line">            rate_l[n] = rate</div><div class="line">            rate0 = rate</div><div class="line">            w0 = w</div><div class="line">            b0 = b</div><div class="line">            print(<span class="string">'Until now, the best result of the accuracy on test data is '</span> + str(rate))</div><div class="line">            print(<span class="string">'with w='</span> + str(w0) + <span class="string">' b='</span> + str(b0))</div><div class="line">            print(<span class="string">"n="</span>, n)</div><div class="line">            print(<span class="string">'---------------------------------------------'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 在选定最优的学习率后，作图</span></div><div class="line">    plot_classify(w0, b0, x, rate0)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># 作出学习率——准确率的图</span></div><div class="line">    plot_n_rate(rate_l)</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/2.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/3.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch2/4.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> ML </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[朴素贝叶斯算法的简单实现]]></title>
      <url>/2017/03/03/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>李航老师，《统计学习方法》第四章，朴素贝叶斯算法笔记。</p>
<h5 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h5><h6 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h6><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch4/Screenshot%20from%202017-03-03%2012-38-53.png" alt=""></p>
<h6 id="贝叶斯估计"><a href="#贝叶斯估计" class="headerlink" title="贝叶斯估计"></a>贝叶斯估计</h6><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch4/Screenshot%20from%202017-03-03%2012-46-57.png" alt=""></p>
<p>如上所述，在lambda = 0时，贝叶斯估计就等价于极大似然估计。</p>
<h5 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h5><blockquote>
<p>这里用的是<a href="http://download.csdn.net/detail/zouxy09/6610571" target="_blank" rel="external">数字手写体</a>的数据，之前在<a href="http://datahonor.com/2017/03/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0KNN-Python/">KNN</a>也用到过。</p>
</blockquote>
<h6 id="手动实现算法"><a href="#手动实现算法" class="headerlink" title="手动实现算法"></a>手动实现算法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">朴素贝叶斯预测手写体</div><div class="line"></div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">## 处理单个txt文件, 将文件转化为1-d数组</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vector</span><span class="params">(filename)</span>:</span></div><div class="line">    rows = <span class="number">32</span></div><div class="line">    cols = <span class="number">32</span></div><div class="line">    imgVector = np.zeros((<span class="number">1</span>, rows * cols))</div><div class="line">    fileIn = open(filename)</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(rows):</div><div class="line">        lineStr = fileIn.readline()</div><div class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(cols):</div><div class="line">            imgVector[<span class="number">0</span>, row * <span class="number">32</span> + col] = int(lineStr[col])</div><div class="line">    fileIn.close()</div><div class="line">    <span class="keyword">return</span> imgVector</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取训练集</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_training_sample</span><span class="params">()</span>:</span></div><div class="line">    os.chdir(<span class="string">'/home/shen/PycharmProjects/MyPython/统计学习方法/Naive Bayes/digits/trainingDigits'</span>)</div><div class="line">    files = os.listdir()</div><div class="line">    numSamples = len(files)</div><div class="line">    train_x = np.zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    train_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = files[i]</div><div class="line">        yi = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])</div><div class="line">        xi = img2vector(filename)</div><div class="line"></div><div class="line">        train_x[i, :] = xi</div><div class="line">        train_y.append(yi)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> train_x, train_y</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取测试集</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_sample</span><span class="params">()</span>:</span></div><div class="line">    os.chdir(<span class="string">'/home/shen/PycharmProjects/MyPython/统计学习方法/Naive Bayes/digits/testDigits'</span>)</div><div class="line">    files = os.listdir()</div><div class="line">    numSamples = len(files)</div><div class="line">    test_x = np.zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    test_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = files[i]</div><div class="line">        yi = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])</div><div class="line">        xi = img2vector(filename)</div><div class="line"></div><div class="line">        test_x[i, :] = xi</div><div class="line">        test_y.append(yi)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> test_x, test_y</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 核心训练算法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_x_yi</span><span class="params">(train_x, train_y, yi)</span>:</span></div><div class="line">    <span class="keyword">if</span> yi == <span class="number">0</span>:</div><div class="line">        train_x_yi = train_x[train_y == np.zeros(len(train_y))]</div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        train_x_yi = train_x[train_y == np.ones(len(train_y)) * yi]</div><div class="line"></div><div class="line">    x_equal_1 = (train_x_yi.sum(axis=<span class="number">0</span>)+lamda)/ (len(train_x_yi)+len(train_x_yi[<span class="number">0</span>])*lamda)</div><div class="line">    x_equal_0 = np.ones(len(x_equal_1)) - x_equal_1</div><div class="line">    x_prec = np.vstack((x_equal_0, x_equal_1))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> x_prec</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_x, train_y)</span>:</span></div><div class="line">    <span class="comment"># 根据需要，构造合适的结构</span></div><div class="line">    <span class="comment"># [[0, [&#123;0:p0, 1:p1&#125;, &#123;...&#125;, &#123;...&#125;,...&#123;...&#125;]], [1, [...]], [...], ...]</span></div><div class="line">    train_result = list(range(<span class="number">0</span>, <span class="number">10</span>))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> train_result:</div><div class="line">        train_result[i] = [<span class="number">0</span>, [&#123;&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span> * <span class="number">32</span>)]]</div><div class="line"></div><div class="line">    N = len(train_y)</div><div class="line">    unique_yi, counts_yi = np.unique(train_y, return_counts=<span class="keyword">True</span>)</div><div class="line">    prec_yi = (counts_yi+lamda) / (len(train_y)+len(unique_yi)*lamda)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prec_yi)):</div><div class="line">        train_result[i][<span class="number">0</span>] = list(prec_yi)[i]</div><div class="line">    <span class="comment"># yi = dict(zip(unique_yi, prec_yi))</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        x_prec = get_train_x_yi(train_x, train_y, y)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> xi <span class="keyword">in</span> range(len(x_prec[<span class="number">0</span>])):</div><div class="line">            train_result[y][<span class="number">1</span>][xi][<span class="number">0</span>] = x_prec[<span class="number">0</span>][xi]</div><div class="line">            train_result[y][<span class="number">1</span>][xi][<span class="number">1</span>] = x_prec[<span class="number">1</span>][xi]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> train_result</div><div class="line"></div><div class="line"><span class="comment"># 对测试集进行预测</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(test_x, test_y, train_result)</span>:</span></div><div class="line">    true_pre = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(test_x)):</div><div class="line">        yi = test_y[i]</div><div class="line">        xi = test_x[i]</div><div class="line">        result_xi = []</div><div class="line">        <span class="keyword">for</span> classx <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            P_yi = train_result[classx][<span class="number">0</span>]</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(xi)):</div><div class="line">                <span class="comment"># print(train_result[classx][1][k][int(xi[k])])</span></div><div class="line">                P_yi *= train_result[classx][<span class="number">1</span>][k][int(xi[k])]</div><div class="line">            result_xi.append(P_yi)</div><div class="line"></div><div class="line">        y0 = dict(zip(result_xi, range(len(result_xi))))[max(result_xi)]</div><div class="line">        <span class="keyword">if</span> y0 == yi:</div><div class="line">            true_pre += <span class="number">1</span></div><div class="line"></div><div class="line">    print(<span class="string">'预测准确率为： '</span>, true_pre / len(test_x))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    s = time.time()</div><div class="line">    train_x, train_y = get_training_sample()</div><div class="line">    test_x, test_y = get_test_sample()</div><div class="line"></div><div class="line"></div><div class="line">    train_result = train(train_x, train_y)</div><div class="line">    predict(train_x, train_y, train_result)</div><div class="line">    e = time.time()</div><div class="line">    print(<span class="string">'本次训练预测共耗时 '</span>, e - s)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 选取合适的lamda</span></div><div class="line">    <span class="comment"># lamda=0是为极大似然估计</span></div><div class="line">    <span class="comment"># lamda&gt;0是为贝叶斯估计，特别地，在其为1时，称作拉普拉斯平滑。</span></div><div class="line">    lamda = <span class="number">0</span>  <span class="comment"># 这里lamda=0得到的准确率较高</span></div><div class="line">    run()</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch4/Screenshot%20from%202017-03-03%2012-48-31.png" alt=""></p>
<h6 id="与sklearn实现对比"><a href="#与sklearn实现对比" class="headerlink" title="与sklearn实现对比"></a>与sklearn实现对比</h6><p>为了对比，我们也用sklearn的朴素贝叶斯算法实现下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="keyword">import</span> os</div><div class="line">   <span class="keyword">import</span> time</div><div class="line">   <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">   <span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">   <span class="comment"># the Naive Bayes model</span></div><div class="line">   <span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB, GaussianNB</div><div class="line"></div><div class="line"><span class="comment"># 这里的函数还是上面那些，只不过用到其中几个而已，这里不再赘述</span></div><div class="line">   <span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">       s = time.time()</div><div class="line"></div><div class="line">       train_x, train_y = get_training_sample()</div><div class="line">       test_x, test_y = get_test_sample()</div><div class="line">       nb = MultinomialNB()</div><div class="line">       <span class="comment"># nb = GaussianNB()</span></div><div class="line">       nb.fit(train_x, train_y)</div><div class="line">       print(nb.score(test_x, test_y))</div><div class="line"></div><div class="line">       e = time.time()</div><div class="line">       print(<span class="string">'本次训练预测共耗时 '</span>, e-s)</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>nb = MultinomialNB()<br>0.923890063425<br>本次训练预测共耗时  1.693662405014038</p>
<p>nb = GaussianNB()<br>0.733615221987<br>本次训练预测共耗时  1.8078570365905762</p>
</blockquote>
<p>可以看到，sklearn的算法实现明显要快得多，在正确选择合适算法时，也能达到较高的准确率。</p>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>这里训练数据的结果用了一个比较复杂结构，开始的时候怎么也构造不出。但是后来反过来逆向考虑</p>
<blockquote>
<p>在新的待预测的测试向量进入时,我需要哪些数据去预测呢？<br>怎样高效地调用这些数据呢？<br>所以，从其需要，构造其现有的就够，变得简单许多。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> ML </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[梯度下降法[Gradient Descent]]]></title>
      <url>/2017/03/02/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95-Gradient-Descent/</url>
      <content type="html"><![CDATA[<p>初步认识梯度下降这一算法，认识并分析其优缺点以更好地利用此算法。</p>
<h5 id="简介wiki"><a href="#简介wiki" class="headerlink" title="简介wiki"></a>简介<a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95" target="_blank" rel="external">wiki</a></h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/1.png" alt=""></p>
<h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/2.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/4.png" alt=""></p>
<h5 id="线性回归的应用"><a href="#线性回归的应用" class="headerlink" title="线性回归的应用"></a>线性回归的应用</h5><p>参考<a href="https://github.com/mattnedrich/GradientDescentExample" target="_blank" rel="external">这里</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># y = mx + b</span></div><div class="line"><span class="comment"># m is slope, b is y-intercept</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_error_for_line_given_points</span><span class="params">(b, m, points)</span>:</span></div><div class="line">    totalError = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(points)):</div><div class="line">        x = points[i, <span class="number">0</span>]</div><div class="line">        y = points[i, <span class="number">1</span>]</div><div class="line">        totalError += (y - (m * x + b)) ** <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> totalError / float(len(points))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_gradient</span><span class="params">(b_current, m_current, points, learningRate)</span>:</span></div><div class="line">    b_gradient = <span class="number">0</span></div><div class="line">    m_gradient = <span class="number">0</span></div><div class="line">    N = float(len(points))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(points)):</div><div class="line">        x = points[i, <span class="number">0</span>]</div><div class="line">        y = points[i, <span class="number">1</span>]</div><div class="line">        b_gradient += -(<span class="number">2</span>/N) * (y - ((m_current * x) + b_current))</div><div class="line">        m_gradient += -(<span class="number">2</span>/N) * x * (y - ((m_current * x) + b_current))</div><div class="line">    new_b = b_current - (learningRate * b_gradient)</div><div class="line">    new_m = m_current - (learningRate * m_gradient)</div><div class="line">    <span class="keyword">return</span> [new_b, new_m]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent_runner</span><span class="params">(points, starting_b, starting_m, learning_rate, num_iterations)</span>:</span></div><div class="line">    b = starting_b</div><div class="line">    m = starting_m</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iterations):</div><div class="line">        b, m = step_gradient(b, m, array(points), learning_rate)</div><div class="line">    <span class="keyword">return</span> [b, m]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    points = genfromtxt(<span class="string">"data.csv"</span>, delimiter=<span class="string">","</span>)</div><div class="line">    learning_rate = <span class="number">0.0001</span></div><div class="line">    initial_b = <span class="number">0</span> <span class="comment"># initial y-intercept guess</span></div><div class="line">    initial_m = <span class="number">0</span> <span class="comment"># initial slope guess</span></div><div class="line">    num_iterations = <span class="number">1000</span></div><div class="line">    print(<span class="string">"Starting gradient descent at b = &#123;0&#125;, m = &#123;1&#125;, error = &#123;2&#125;"</span>.format(initial_b, initial_m, compute_error_for_line_given_points(initial_b, initial_m, points)))</div><div class="line">    print(<span class="string">"Running..."</span>)</div><div class="line">    [b, m] = gradient_descent_runner(points, initial_b, initial_m, learning_rate, num_iterations)</div><div class="line">    print(<span class="string">"After &#123;0&#125; iterations b = &#123;1&#125;, m = &#123;2&#125;, error = &#123;3&#125;"</span>.format(num_iterations, b, m, compute_error_for_line_given_points(b, m, points)))</div><div class="line"></div><div class="line">    <span class="comment"># 作图[只是为了直观地看下拟合的效果]</span></div><div class="line">    plt.plot([points[i,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))], [points[i,<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))], <span class="string">'bo'</span>)</div><div class="line">    x = linspace(min([points[i,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))])<span class="number">-5</span>, max([points[i,<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(points))])+<span class="number">5</span>, <span class="number">1000</span>)</div><div class="line">    plt.plot(x, m*x+b)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run()</div><div class="line"></div></pre></td></tr></table></figure><br>运行结果：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/5.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/6.png" alt=""></p>
<h5 id="梯度下降的弊端及验证"><a href="#梯度下降的弊端及验证" class="headerlink" title="梯度下降的弊端及验证"></a>梯度下降的弊端及验证</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/7.png" alt=""></p>
<p>尝试验证wiki的下图：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/8.gif" alt=""></p>
<p>选取不同的学习率，实验结果如下：</p>
<blockquote>
<p>E1：Learning Rate = 0.0045</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/9.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/10.png" alt=""></p>
<blockquote>
<p>E2: Learning Rate = 0.0025</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/11.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/12.png" alt=""><br>可以看到还是有一定的差别，推测与学习率和迭代次数有关，这个暂时留到以后深究。</p>
<p>Python实现源码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># 递归实现逐次求梯度，这里为了充分迭代，修改递归次数限制</span></div><div class="line">sys.setrecursionlimit(<span class="number">2000</span>)</div><div class="line"></div><div class="line"><span class="comment"># 计算Rosenbrock函數的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(X, Y)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> - X) ** <span class="number">2</span> + <span class="number">100</span> * ((Y - X ** <span class="number">2</span>) ** <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_gradient</span><span class="params">(pre, learningRate=<span class="number">0.0025</span>)</span>:</span>  <span class="comment">#0.0025</span></div><div class="line">    scatter.append(pre)</div><div class="line">    x = pre[<span class="number">0</span>]</div><div class="line">    y = pre[<span class="number">1</span>]</div><div class="line">    x_gradient = <span class="number">2</span>*(x<span class="number">-1</span>)+<span class="number">400</span>*x*(x**<span class="number">2</span>-y)</div><div class="line">    y_gradient = <span class="number">200</span>*(y-x**<span class="number">2</span>)</div><div class="line">    step_x = learningRate * x_gradient</div><div class="line">    step_y = learningRate * y_gradient</div><div class="line">    steps = [step_x, step_y]</div><div class="line">    now = [pre[<span class="number">0</span>] - steps[<span class="number">0</span>], pre[<span class="number">1</span>] - steps[<span class="number">1</span>]]</div><div class="line">    <span class="comment"># 将新的点存储到scatter列表里面去</span></div><div class="line">    z = func(now[<span class="number">0</span>], now[<span class="number">1</span>])</div><div class="line">    <span class="comment"># print(z)</span></div><div class="line">    z_l.append(z)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        step_gradient(now)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    fig = plt.figure()</div><div class="line">    <span class="comment"># ax = Axes3D(fig)</span></div><div class="line">    <span class="comment"># 随机度下降起始点</span></div><div class="line">    point = (<span class="number">-0.5</span>, <span class="number">0.5</span>)</div><div class="line">    scatter = []</div><div class="line">    z_l = []</div><div class="line">    scatter.append(point)</div><div class="line">    step_gradient(point)</div><div class="line">    print(<span class="string">'Total times'</span>, len(scatter))</div><div class="line">    print(<span class="string">"Min_z--&gt;"</span>, min(z_l))</div><div class="line">    plt.plot([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], [point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], <span class="string">'r'</span>)</div><div class="line"></div><div class="line">    X = np.arange(<span class="number">-0.8</span>, <span class="number">1</span>, <span class="number">0.01</span>)</div><div class="line">    Y = np.arange(<span class="number">-0.2</span>, <span class="number">1.1</span>, <span class="number">0.025</span>)</div><div class="line">    X, Y = np.meshgrid(X, Y)</div><div class="line">    Z = func(X, Y)</div><div class="line"></div><div class="line">    <span class="comment"># ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='rainbow')</span></div><div class="line">    <span class="comment"># plt.show()</span></div><div class="line">    CS = plt.contour(X, Y, Z, <span class="number">100</span>)</div><div class="line">    manual_locations = [(i, i+<span class="number">0.02</span>) <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">-0.2</span>, <span class="number">0.3</span>, <span class="number">10</span>)]</div><div class="line">    manual_locations.append((<span class="number">1</span>,<span class="number">1</span>))</div><div class="line"></div><div class="line">    plt.clabel(CS, inline=<span class="number">1</span>, fontsize=<span class="number">8</span>, manual=manual_locations)</div><div class="line">    plt.title(<span class="string">'Rosenbrock'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><br>适当调节参数，也可以作出下面的图：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/13.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/14.png" alt=""></p>
<p>第一次补充：[尝试放大局部图像找到所谓的“之”字形失败]<br>之前未能实现wiki“之”字形震荡, 就想到可能是点过于密集导致微小的弯折被掩盖，于是进行局部放大图像的尝试。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># 递归实现逐次求梯度，这里为了充分迭代，修改递归次数限制</span></div><div class="line">sys.setrecursionlimit(<span class="number">2000</span>)</div><div class="line"></div><div class="line"><span class="comment"># 计算Rosenbrock函數的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(X, Y)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> - X) ** <span class="number">2</span> + <span class="number">100</span> * ((Y - X ** <span class="number">2</span>) ** <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_gradient</span><span class="params">(pre, learningRate=<span class="number">0.0045</span>)</span>:</span>  <span class="comment">#0.0025</span></div><div class="line">    scatter.append(pre)</div><div class="line">    x = pre[<span class="number">0</span>]</div><div class="line">    y = pre[<span class="number">1</span>]</div><div class="line">    x_gradient = <span class="number">2</span>*(x<span class="number">-1</span>)+<span class="number">400</span>*x*(x**<span class="number">2</span>-y)</div><div class="line">    y_gradient = <span class="number">200</span>*(y-x**<span class="number">2</span>)</div><div class="line">    step_x = learningRate * x_gradient</div><div class="line">    step_y = learningRate * y_gradient</div><div class="line">    steps = [step_x, step_y]</div><div class="line">    now = [pre[<span class="number">0</span>] - steps[<span class="number">0</span>], pre[<span class="number">1</span>] - steps[<span class="number">1</span>]]</div><div class="line">    <span class="comment"># 将新的点存储到scatter列表里面去</span></div><div class="line">    z = func(now[<span class="number">0</span>], now[<span class="number">1</span>])</div><div class="line">    <span class="comment"># print(z)</span></div><div class="line">    z_l.append(z)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        step_gradient(now)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">8</span>), dpi=<span class="number">98</span>)</div><div class="line">    p1 = plt.subplot(<span class="number">121</span>, aspect=<span class="number">1.8</span> / <span class="number">1.3</span>)</div><div class="line">    p2 = plt.subplot(<span class="number">122</span>, aspect=<span class="number">0.06</span> / <span class="number">0.001</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 随机度下降起始点</span></div><div class="line">    point = (<span class="number">-0.5</span>, <span class="number">0.5</span>)</div><div class="line">    scatter = []</div><div class="line">    z_l = []</div><div class="line">    scatter.append(point)</div><div class="line">    step_gradient(point)</div><div class="line">    print(<span class="string">'Total times'</span>, len(scatter))</div><div class="line">    print(<span class="string">"Min_z--&gt;"</span>, min(z_l))</div><div class="line">    p1.plot([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], [point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], <span class="string">'r'</span>)</div><div class="line"></div><div class="line">    p2.plot([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], [point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> scatter], <span class="string">'r'</span>)</div><div class="line">    p2.axis([<span class="number">-0.02</span>, <span class="number">0.04</span>, <span class="number">-0.0005</span>, <span class="number">0.0005</span>])</div><div class="line"></div><div class="line">    X = np.arange(<span class="number">-0.8</span>, <span class="number">1</span>, <span class="number">0.01</span>)</div><div class="line">    Y = np.arange(<span class="number">-0.2</span>, <span class="number">1.1</span>, <span class="number">0.025</span>)</div><div class="line">    X, Y = np.meshgrid(X, Y)</div><div class="line">    Z = func(X, Y)</div><div class="line"></div><div class="line">    CS = p1.contour(X, Y, Z, <span class="number">100</span>)</div><div class="line">    manual_locations = [(i, i+<span class="number">0.02</span>) <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">-0.2</span>, <span class="number">0.3</span>, <span class="number">10</span>)]</div><div class="line">    manual_locations.append((<span class="number">1</span>,<span class="number">1</span>))</div><div class="line">    p1.clabel(CS, inline=<span class="number">1</span>, fontsize=<span class="number">8</span>, manual=manual_locations)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>得到结果如下[显然实验失败了:-)]<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/ML/gradient/15.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> ML </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[豆瓣影评爬取]]></title>
      <url>/2017/03/02/%E8%B1%86%E7%93%A3%E5%BD%B1%E8%AF%84%E7%88%AC%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>以爬取豆瓣影评为例，抽象简单的爬取流程。</p>
<p>环境与工具：</p>
<blockquote>
<p>Ubuntu16.04 64bit<br>Pycharm<br>Anaconda3<br>bs4</p>
</blockquote>
<h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/douban%20/1.png" alt=""></p>
<h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取一个评论列表页面的网页数据</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(url)</span>:</span></div><div class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36"</span>&#125;</div><div class="line">    data = requests.get(url, headers=headers).text</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="comment"># 获取页面中影评标题及链接</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_data_bs</span><span class="params">(data)</span>:</span></div><div class="line">    title_data_d = &#123;&#125;</div><div class="line">    bsObj = BeautifulSoup(data, <span class="string">'lxml'</span>)</div><div class="line">    review_lists = bsObj.findAll(<span class="string">'div'</span>, &#123;<span class="string">'typeof'</span>:<span class="string">"v:Review"</span>&#125;)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> review_lists:</div><div class="line">        title_data = item.find(<span class="string">'h3'</span>, &#123;<span class="string">'class'</span>:<span class="string">'title'</span>&#125;)</div><div class="line">        <span class="comment"># 这里多次使用replace可用正则表达式代替，这里省略，详情参考站内正则表达式python版的总结</span></div><div class="line">        title = title_data.get_text().replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</div><div class="line">        title_href = title_data.find(<span class="string">'a'</span>).get(<span class="string">'href'</span>)</div><div class="line">        title_data_d[title] = title_href</div><div class="line">    <span class="keyword">return</span> title_data_d</div><div class="line"></div><div class="line"><span class="comment"># 根据评论标题链接抓取评论内容</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comment_data</span><span class="params">(comment_url)</span>:</span></div><div class="line">    comment_data = get_data(comment_url)</div><div class="line">    bsObj = BeautifulSoup(comment_data, <span class="string">'lxml'</span>)</div><div class="line">    <span class="comment"># print(bsObj)</span></div><div class="line">    <span class="comment"># author data</span></div><div class="line">    p_name = bsObj.find(<span class="string">'header'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-hd'</span>&#125;).find(<span class="string">'a'</span>).find(<span class="string">'span'</span>).get_text()</div><div class="line">    p_url = bsObj.find(<span class="string">'header'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-hd'</span>&#125;).find(<span class="string">'a'</span>).get(<span class="string">'href'</span>)</div><div class="line">    <span class="comment"># comment data</span></div><div class="line">    c_date = bsObj.find(<span class="string">'span'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-meta'</span>&#125;).get_text()</div><div class="line">    <span class="comment"># c_rank提取中发现查看源码发现与检查元素不符合</span></div><div class="line">    <span class="comment"># 有些用户未评分</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        c_rank = bsObj.find(<span class="string">'span'</span>, &#123;<span class="string">'class'</span>: <span class="string">"main-title-hide"</span>&#125;).get_text()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        c_rank = <span class="keyword">None</span></div><div class="line">    c_comment = bsObj.find(<span class="string">'div'</span>, &#123;<span class="string">'property'</span>: <span class="string">'v:description'</span>&#125;).get_text()</div><div class="line">    <span class="comment"># 有用，无用</span></div><div class="line">    useful = bsObj.find(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: <span class="string">'main-panel-useful'</span>&#125;).find_all(<span class="string">'button'</span>)</div><div class="line">    y_use = useful[<span class="number">0</span>].get_text().replace(<span class="string">'\n'</span>, <span class="string">''</span>).split(<span class="string">' '</span>)[<span class="number">5</span>]</div><div class="line">    n_use = useful[<span class="number">1</span>].get_text().replace(<span class="string">'\n'</span>, <span class="string">''</span>).split(<span class="string">' '</span>)[<span class="number">5</span>]</div><div class="line">    comment_data = [p_name, p_url, c_date, c_comment, c_rank, y_use, n_use]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> comment_data</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>:</span></div><div class="line">    db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"密码不给看"</span>, <span class="string">"USpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = db.cursor()</div><div class="line">    cursor.execute(<span class="string">"DROP TABLE IF EXISTS DouBan"</span>)</div><div class="line">    <span class="comment"># p_name, p_url, c_date, c_data, c_rank, y_use, n_use</span></div><div class="line">    cursor.execute(<span class="string">"CREATE TABLE DouBan(p_name VARCHAR(20), p_url VARCHAR(100), "</span></div><div class="line">                   <span class="string">"c_date VARCHAR (20), c_comment VARCHAR (20000), c_rank VARCHAR (5), "</span></div><div class="line">                   <span class="string">"y_use VARCHAR (10), n_use VARCHAR (10));"</span>)  <span class="comment"># 创建表</span></div><div class="line">    db.commit()</div><div class="line">    db.close()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">(cursor, db, commemt_data)</span>:</span></div><div class="line">    <span class="comment"># try:</span></div><div class="line">    sql = <span class="string">'INSERT INTO DouBan(p_name, p_url, c_date, c_comment, c_rank, y_use, n_use)VALUES(%s,%s,%s,%s,%s,%s,%s)'</span></div><div class="line">    <span class="comment"># cursor.execute(sql, (commemt_data[0], commemt_data[1], commemt_data[2], commemt_data[3], commemt_data[4], commemt_data[5], commemt_data[6]))</span></div><div class="line">    cursor.execute(sql, [commemt_data[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>)])</div><div class="line">    <span class="comment"># 提交事务</span></div><div class="line">    db.commit()</div><div class="line">    print(commemt_data[<span class="number">0</span>])</div><div class="line">    <span class="comment"># except:</span></div><div class="line">    <span class="comment">#     print('Save fail...')</span></div><div class="line">    <span class="comment">#     pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_spider</span><span class="params">(list_url)</span>:</span></div><div class="line">    db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"密码不给看"</span>, <span class="string">"USpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = db.cursor()</div><div class="line">    page_data = get_data(list_url)</div><div class="line">    <span class="comment"># https: // movie.douban.com/subject/26616436/reviews</span></div><div class="line">    titles_data = parse_data_bs(page_data)</div><div class="line">    <span class="comment"># print(titles_data)</span></div><div class="line">    <span class="keyword">for</span> comment_title, comment_url <span class="keyword">in</span> titles_data.items():</div><div class="line">        comment_data = get_comment_data(comment_url)</div><div class="line">        <span class="comment"># print(comment_data)</span></div><div class="line">        save_to_mysql(cursor, db, comment_data)</div><div class="line"></div><div class="line">    db.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_list_urls</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> [<span class="string">'https://movie.douban.com/subject/1292052/reviews?start=%s'</span>%(v) <span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4300</span>, <span class="number">20</span>)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    create_table()</div><div class="line">    list_urls = get_all_list_urls()</div><div class="line">    error_link = []</div><div class="line">    <span class="keyword">for</span> list_url <span class="keyword">in</span> list_urls:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            main_spider(list_url)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            error_link.append(list_url)</div><div class="line">            <span class="keyword">if</span> len(error_link) &gt; <span class="number">10</span>:</div><div class="line">                print(<span class="string">"ERROR!!!"</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">    print(<span class="string">'OK!'</span>)</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu命令积累]]></title>
      <url>/2017/03/02/Ubuntu%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<h5 id="查看CPU及内存"><a href="#查看CPU及内存" class="headerlink" title="查看CPU及内存"></a>查看CPU及内存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">top</div><div class="line">或者</div><div class="line">sudo apt-get install htop</div><div class="line">htop</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 查看网卡</div><div class="line">ifconfig</div><div class="line"># 查看网络状况</div><div class="line">sudo apt-get install slurm</div><div class="line">slurm -i wlan0    # wlan0是指定的网卡 </div></pre></td></tr></table></figure>
<h5 id="登录到远程服务器"><a href="#登录到远程服务器" class="headerlink" title="登录到远程服务器"></a>登录到远程服务器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -l root 101.200.59.127</div></pre></td></tr></table></figure>
<h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><p>参考<a href="http://www.th7.cn/system/lin/201605/164198.shtml" target="_blank" rel="external">这里</a></p>
<h6 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=路径:$PATH</div></pre></td></tr></table></figure>
<h6 id="用户环境变量"><a href="#用户环境变量" class="headerlink" title="用户环境变量"></a>用户环境变量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gedit  ~/.profile</div><div class="line">export PATH=路径:$PATH</div><div class="line">source .profile</div></pre></td></tr></table></figure>
<h6 id="系统-所有用户-环境变量"><a href="#系统-所有用户-环境变量" class="headerlink" title="系统[所有用户]环境变量"></a>系统[所有用户]环境变量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/profile</div><div class="line">export PATH=路径:$PATH</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h5 id="查看-特定程序-线程"><a href="#查看-特定程序-线程" class="headerlink" title="查看[特定程序]线程"></a>查看[特定程序]线程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -eLf|grep python[指定程序]</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/2.png" alt=""><br>可以看到有三个Python线程在运行。</p>
<p> 关于ps -eLf:<a href="http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu/" target="_blank" rel="external">参考这里</a>：</p>
<blockquote>
<p>输出按顺序为：UID PID PPID LWP C NLWP STIME TTY TIME CMD</p>
<p>LWP　light weight process ID 可以称其为线程ID。<br>NLWP 进程中的线程数number of lwps (threads) in the process。 </p>
</blockquote>
<h5 id="Ubuntu计划任务之crontab"><a href="#Ubuntu计划任务之crontab" class="headerlink" title="Ubuntu计划任务之crontab"></a>Ubuntu计划任务之crontab</h5><p>参考<a href="http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu/" target="_blank" rel="external">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">crontab -e </div><div class="line">30 7 * * * run-parts /home   #每天7：30运行 /home 目录下的所有脚本</div></pre></td></tr></table></figure></p>
<p>具体到执行Python脚本的话参考<a href="http://blog.csdn.net/ybsun2010/article/details/9972403" target="_blank" rel="external">这里</a>，就是如下的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*/2 * * * * python /home/mytask/hello.py &gt;&gt; /home/mytask/hello.py.log 2&gt;&amp;1</div></pre></td></tr></table></figure><br> 即，每两分钟执行/home/mytask目录下的hello.py脚本, 并将执行的log写入hello.py.log文件中。</p>
<p>hello.py如下：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/3.png" alt=""></p>
<p>crontab -e 后的添加：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/4.png" alt=""><br>log文件如下：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/5.png" alt=""></p>
<h5 id="Ubuntu安装中文字体"><a href="#Ubuntu安装中文字体" class="headerlink" title="Ubuntu安装中文字体"></a>Ubuntu安装中文字体</h5><p>参考<a href="http://blog.csdn.net/up_com/article/details/51218458" target="_blank" rel="external">这里</a>.<br>由于我是双系统，直接从win10里面C:/Windows/Fonts/目录下面，将所有字体文件都复制下来到</p>
<blockquote>
<p>/home/shen/Downloads/font</p>
</blockquote>
<p>再用cp命令：</p>
<blockquote>
<p>sudo cp -r /home/shen/Downloads/font /usr/share/fonts/</p>
</blockquote>
<p>最后：</p>
<blockquote>
<p>sudo mkfontscale<br>sudo mkfontdir<br>sudo fc-cache -fv</p>
</blockquote>
<h5 id="为浏览器安装安装flash插件"><a href="#为浏览器安装安装flash插件" class="headerlink" title="为浏览器安装安装flash插件"></a>为浏览器安装安装flash插件</h5><p>之前手动装过一次，最近提示过期，换了种方法安装，参考<a href="http://www.linuxidc.com/Linux/2016-05/131098.htm" target="_blank" rel="external">这里</a></p>
<h5 id="标题栏实时显示上下行网速、CPU及内存使用率"><a href="#标题栏实时显示上下行网速、CPU及内存使用率" class="headerlink" title="标题栏实时显示上下行网速、CPU及内存使用率"></a>标题栏实时显示上下行网速、CPU及内存使用率</h5><blockquote>
<p>sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor<br> sudo apt-get update<br> sudo apt-get install indicator-sysmonitor</p>
</blockquote>
<p>安装完成后，启动：</p>
<blockquote>
<p>indicator-sysmonitor</p>
</blockquote>
<p>在General设置开机启动，并在Advance设置要显示的参数即可。</p>
<p>参考<a href="http://blog.csdn.net/tecn14/article/details/24489031" target="_blank" rel="external">这里</a></p>
<h5 id="挽救-boot-清除image"><a href="#挽救-boot-清除image" class="headerlink" title="挽救/boot,清除image"></a>挽救<code>/boot</code>,清除image</h5><p>Linux的内核是不断更新的，但是Ubuntu（debian也是）是不会自动清理之前的内核的，所以boot的空间就会慢慢堆满。</p>
<p>可以使用<code>df -h</code>来看下空间的使用情况。</p>
<p>查看已经安装的内核：</p>
<p><code>sudo dpkg --get-selections |grep linux-image</code></p>
<p>查看自己正在使用的内核：</p>
<p><code>uname -a</code></p>
<p>可以将比较早的删除，留下最近的几个，删除命令如下：</p>
<blockquote>
<p>sudo apt-get remove linux-image-4.4.0-57-generic<br>sudo apt-get remove linux-image-4.4.0-59-generic<br>sudo apt-get remove linux-image-extra-4.4.0-57-generic<br>sudo apt-get remove linux-image-extra-4.4.0-59-generic</p>
<p>这里执行可能出现错误<code>E: Sub-process /usr/bin/dpkg returned an error code (1)</code>，可参考<a href="http://blog.csdn.net/qiaoji6073/article/details/76140146" target="_blank" rel="external">这里</a>解决。</p>
</blockquote>
<p>有时候运行完上面的命令，再次查看已经安装的内核，会由原来的<code>install</code>变为<code>deinstall</code>,这时候可以将上面的<code>remove</code>换为<code>purge</code>清理下，如：</p>
<blockquote>
<p>sudo apt-get purge linux-image-4.4.0-57-generic</p>
</blockquote>
<p>参考：</p>
<p><a href="http://www.jb51.net/article/106976.htm" target="_blank" rel="external">解决Ubuntu 16.04下提示boot分区空间不足的办法</a></p>
<p><a href="http://blog.csdn.net/wxyangid/article/details/53097208" target="_blank" rel="external">ubuntu16.04 LTS解决/boot空间不足 </a></p>
<p><a href="http://blog.csdn.net/qq_27818541/article/details/72675954" target="_blank" rel="external">/boot空间不足的解决办法 </a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu搭建SS]]></title>
      <url>/2017/03/02/Ubuntu%E6%90%AD%E5%BB%BASS/</url>
      <content type="html"><![CDATA[<h3 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h3><p>S1:注册<a href="https://app.arukas.io/" target="_blank" rel="external">arukas</a>帐号</p>
<p>S2:创建SS账户，参考<a href="http://www.iqcni.com/other/12.html" target="_blank" rel="external">这里</a>。</p>
<p>S3：Ubuntu搭建SS客户端的GUI， 参考<a href="http://www.jianshu.com/p/4f6ea97427e9" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>sudo add-apt-repository ppa:hzwhuang/ss-qt5<br>sudo apt-get update<br>sudo apt-get install shadowsocks-qt5</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Ubuntu/1.png" alt=""></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>用上面的教程搭建的代理好早前就开始变卡了…后来就没再用了，不知道现在如何…</p>
<h4 id="Pan-–-gt-foxyproxy"><a href="#Pan-–-gt-foxyproxy" class="headerlink" title="Pan –&gt; foxyproxy"></a>Pan –&gt; foxyproxy</h4><p>之前一直都是shadowsock5配合火狐的pan插件用，不过更新到新版的火狐后，pan已经不能用了，经推荐换了foxyproxy来用。配置过程比较简单，记得将IP和端口都设置成本地就行了（IP：127.0.0.1， 端口：1080）。而且，发现foxyproxy的pattern比较好用，把百度和本地地址放到Black List，访问百度会变得比较快，禁用本地地址更是方便…之前不论用hexo还是jupyter notebook都是手动把pan关了的orz…..现在是方便许多~</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Anaconda使用笔记]]></title>
      <url>/2017/03/02/Anaconda%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h5 id="conda-search-and-conda-install"><a href="#conda-search-and-conda-install" class="headerlink" title="conda search and conda install"></a>conda search and conda install</h5><p>在我们用conda install 安装包时，可能会出现像下面这种找不到的情况。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/1.png" alt=""><br>这样我们就按照提示操作进行搜索：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/2.png" alt=""><br>这时根据自己的系统找到对应的包进行如下尝试[之所以说尝试是因为，有时候会因依赖冲突等问题安装不成功]，进行安装：</p>
<p>比如我的系统是linux64, 我尝试安装这个版本的包<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/3.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/4.png" alt=""><br>之后就是确认安装了： </p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/5.png" alt=""><br>   打开ipython进行检验： </p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Python/Anaconda/6.png" alt=""><br>可以看到安装成功。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV识别条形码——python实现[CPP补充]]]></title>
      <url>/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0-CPP%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<p>在之前的<a href="待测文件： 位于与当前cpp文件同目录的data文件夹下 
http://datahonor.com/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0/">这篇文章</a>，仿照教程做了一个条形码识别的程序，不过结果不太理想，就暂时放下，最近继续看OpenCV官方文档，看到了Template Matching，于是动手实验了一下，成功的解决了问题。</p>
<p>环境：ubuntu14.04， OpenCV3.2.0， Clion</p>
<h5 id="data-barcode-jpg"><a href="#data-barcode-jpg" class="headerlink" title="data/barcode.jpg"></a>data/barcode.jpg</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/barcode.jpg" alt=""></p>
<h5 id="data-barcode-temp-png"><a href="#data-barcode-temp-png" class="headerlink" title="/data/barcode_temp.png"></a>/data/barcode_temp.png</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/barcode_temp.png" alt=""></p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/// Function Headers</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatchingMethod</span><span class="params">( <span class="keyword">int</span>, <span class="keyword">void</span>* )</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/** @function main */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/// Load image and template</span></div><div class="line">    img = imread( argv[<span class="number">1</span>], <span class="number">1</span> );</div><div class="line">    templ = imread( argv[<span class="number">2</span>], <span class="number">1</span> );</div><div class="line"></div><div class="line">    <span class="comment">/// Create windows</span></div><div class="line">    namedWindow( image_window, CV_WINDOW_AUTOSIZE );</div><div class="line">    namedWindow( result_window, CV_WINDOW_AUTOSIZE );</div><div class="line"></div><div class="line">    <span class="comment">/// Create Trackbar</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *trackbar_label = <span class="string">"Method: \n 0: SQDIFF \n 1: SQDIFF NORMED \n 2: TM CCORR \n 3: TM CCORR NORMED \n 4: TM COEFF \n 5: TM COEFF NORMED"</span>;</div><div class="line">    createTrackbar( trackbar_label, image_window, &amp;match_method, max_Trackbar, MatchingMethod );</div><div class="line"></div><div class="line">    MatchingMethod( <span class="number">0</span>, <span class="number">0</span> );</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @function MatchingMethod</div><div class="line"> * @brief Trackbar callback</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatchingMethod</span><span class="params">( <span class="keyword">int</span>, <span class="keyword">void</span>* )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/// Source image to display</span></div><div class="line">    Mat img_display;</div><div class="line">    img.copyTo( img_display );</div><div class="line"></div><div class="line">    <span class="comment">/// Create the result matrix</span></div><div class="line">    <span class="keyword">int</span> result_cols =  img.cols - templ.cols + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> result_rows = img.rows - templ.rows + <span class="number">1</span>;</div><div class="line"></div><div class="line">    result.create( result_rows, result_cols, CV_32FC1 );</div><div class="line"></div><div class="line">    <span class="comment">/// Do the Matching and Normalize</span></div><div class="line">    matchTemplate( img, templ, result, match_method );</div><div class="line">    normalize( result, result, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX, <span class="number">-1</span>, Mat() );</div><div class="line"></div><div class="line">    <span class="comment">/// Localizing the best match with minMaxLoc</span></div><div class="line">    <span class="keyword">double</span> minVal; <span class="keyword">double</span> maxVal; Point minLoc; Point maxLoc;</div><div class="line">    Point matchLoc;</div><div class="line"></div><div class="line">    minMaxLoc( result, &amp;minVal, &amp;maxVal, &amp;minLoc, &amp;maxLoc, Mat() );</div><div class="line"></div><div class="line">    <span class="comment">/// For SQDIFF and SQDIFF_NORMED, the best matches are lower values. For all the other methods, the higher the better</span></div><div class="line">    <span class="keyword">if</span>( match_method  == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED )</div><div class="line">    &#123; matchLoc = minLoc; &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123; matchLoc = maxLoc; &#125;</div><div class="line"></div><div class="line">    <span class="comment">/// Show me what you got</span></div><div class="line">    rectangle( img_display, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(<span class="number">0</span>), <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span> );</div><div class="line">    rectangle( result, matchLoc, Point( matchLoc.x + templ.cols , matchLoc.y + templ.rows ), Scalar::all(<span class="number">0</span>), <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span> );</div><div class="line"></div><div class="line">    imshow( image_window, img_display );</div><div class="line">    imshow( result_window, result );</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>之后在Clion编译运行：</p>
<blockquote>
<p>cmake .      // 注意空格<br>make<br>./CvTest data/barcode.jpg data/barcode_temp.png    // CvTest是我的项目名称</p>
</blockquote>
<p>运行结果如下： 可通过滑动trackbar选择不同的matching方式<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/barcode-1.jpg" alt=""><br>最后，要注意的是，上面的barcode_temp.png是直接从barcode.jpg中截取的照片，而我们使用的又是以来与Histgram的算法，所以模板图片的大小可能会对其识别有一定的影响，具体改进等继续学习以后再回来补充了。</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV识别条形码——python实现]]></title>
      <url>/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>今天看到<a href="http://python.jobbole.com/80448/" target="_blank" rel="external">这篇文章</a>，这里保留核心识别算法，稍微进行一些改动贴在这里学习研究。</p>
<p>环境：Win32, Anaconda3, Spyder, OpenCV3.1.0</p>
<p>文件目录：</p>
<blockquote>
<p>待测试图片文件夹test-imgs<br>核心预测算法实现bar_code.py<br>图片批处理imgs_pro.py </p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><h6 id="bar-code-py"><a href="#bar-code-py" class="headerlink" title="bar_code.py"></a>bar_code.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">Created on Mon Dec 26 21:46:21 2016</div><div class="line"></div><div class="line">@author: Administrator</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment">#image_name = input("Enter the name of the picture:")</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">(image_name)</span>:</span></div><div class="line">    print(<span class="string">"正在识别"</span>+image_name+<span class="string">'...'</span>)</div><div class="line">    <span class="comment"># Load the image and convert it to grayscale</span></div><div class="line">    image = cv2.imread(image_name)</div><div class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">    <span class="comment"># compute the Scharr gradient magnitude representation of the iamges</span></div><div class="line">    <span class="comment"># in both the x and y direction</span></div><div class="line">    <span class="comment"># 原来代码下面是cv2.cv.CV_32F会报错-&gt;AttributeError: module 'cv2' has no attribute 'cv'</span></div><div class="line">    <span class="comment"># 在新版本变为cv2.CV_32F</span></div><div class="line">    gradX = cv2.Sobel(gray, ddepth = cv2.CV_32F, dx = <span class="number">1</span>, dy = <span class="number">0</span>, ksize = <span class="number">-1</span>)</div><div class="line">    gradY = cv2.Sobel(gray, ddepth = cv2.CV_32F, dx = <span class="number">0</span>, dy = <span class="number">1</span>, ksize = <span class="number">-1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># substract the y-gradient from the x-gradient</span></div><div class="line">    gradient = cv2.subtract(gradX, gradY)</div><div class="line">    gradient = cv2.convertScaleAbs(gradient)</div><div class="line"></div><div class="line">    <span class="comment"># blur and threhold the image</span></div><div class="line">    <span class="comment"># 这里(13,13)是kernel matrix size，自己可以改变看看识别效果</span></div><div class="line">    blurred = cv2.blur(gradient, (<span class="number">13</span>, <span class="number">13</span>))</div><div class="line">    <span class="comment"># 这里的阀值200,255也可以根据图片自定义</span></div><div class="line">    (_, thresh) = cv2.threshold(blurred, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</div><div class="line"></div><div class="line">    <span class="comment"># construct a closing kernel and apply it to the thresholded image</span></div><div class="line">    <span class="comment"># (20, 15)也是一个参数，用来获取需要的kernel</span></div><div class="line">    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">20</span>, <span class="number">15</span>))</div><div class="line">    closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)</div><div class="line"></div><div class="line">    <span class="comment"># perform a series of erosions and dilations</span></div><div class="line">    closed = cv2.erode(closed, <span class="keyword">None</span>, iterations = <span class="number">4</span>)</div><div class="line">    closed = cv2.dilate(closed, <span class="keyword">None</span>, iterations = <span class="number">4</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Find the contours in the thresholded image, then sort the contours</span></div><div class="line">    <span class="comment"># by their area, keeping only the largest one</span></div><div class="line">    <span class="comment"># ValueError: too many values to unpack (expected 2)</span></div><div class="line">    (img,cnts, _) = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</div><div class="line">    c = sorted(cnts, key = cv2.contourArea, reverse = <span class="keyword">True</span>)[<span class="number">0</span>]</div><div class="line">    <span class="comment"># compute the rotated bounding box of the largest contour</span></div><div class="line">    rect = cv2.minAreaRect(c)</div><div class="line">    <span class="comment"># 原文这里使用cv2.cv.BoxPoints，新版本已经移除，换为cv2.boxPoints</span></div><div class="line">    box = np.int0(cv2.boxPoints(rect))</div><div class="line"></div><div class="line">    <span class="comment"># draw a bounding box around the detected barcode</span></div><div class="line">    <span class="comment"># and display the image</span></div><div class="line">    cv2.drawContours(image, [box], <span class="number">-1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line">    cv2.imshow(image_name, image)</div><div class="line">    cv2.waitKey(<span class="number">0</span>)</div><div class="line">    print(<span class="string">"Done...\n##################################"</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="imgs-pro-py"><a href="#imgs-pro-py" class="headerlink" title="imgs_pro.py"></a>imgs_pro.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">Created on Mon Dec 26 23:22:01 2016</div><div class="line"></div><div class="line">@author: Administrator</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> bar_code <span class="keyword">import</span> detect</div><div class="line"><span class="comment"># 切换到测试图片文件夹</span></div><div class="line">os.chdir(<span class="string">'test-imgs'</span>)</div><div class="line"><span class="comment"># 找到所有的测试图片文件名</span></div><div class="line">image_names = os.listdir()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> image_name <span class="keyword">in</span> image_names:</div><div class="line">        detect(image_name)</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="test-imgs文件夹"><a href="#test-imgs文件夹" class="headerlink" title="test-imgs文件夹"></a>test-imgs文件夹</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/1.png" alt=""></p>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/4.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/5.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/CV/6.png" alt=""></p>
<p> 开始按照原来的程序识别效果不怎么好，自己调整了几个参数，效果还可以，但是可以看到还是有的识别不出。接下来我们会用OpenCV官方给出的<a href="http://datahonor.com/2017/03/02/OpenCV%E8%AF%86%E5%88%AB%E6%9D%A1%E5%BD%A2%E7%A0%81%E2%80%94%E2%80%94python%E5%AE%9E%E7%8E%B0-CPP%E8%A1%A5%E5%85%85/#more">Cpp</a>的例子来纠正这个问题。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度新闻爬虫——多进程抓取]]></title>
      <url>/2017/03/02/%E7%99%BE%E5%BA%A6%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%8A%93%E5%8F%96/</url>
      <content type="html"><![CDATA[<hr>
<p>基于<a href="http://datahonor.com/2017/03/02/%E7%99%BE%E5%BA%A6%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E6%99%AE%E9%80%9A%E6%8A%93%E5%8F%96/">上文</a>的改进，使用进程池抓取。</p>
<p>环境：</p>
<blockquote>
<p>Ubuntu14.04, Pycharm, Anaconda3,<br>MySQL:mysql  Ver 14.14 Distrib 5.5.53, for debian-linux-gnu (x86_64) using readline 6.3</p>
</blockquote>
<p>文件目录：</p>
<blockquote>
<p>MyTools.py 存放获取，解析并储存网页内容的工具函数[和上文的一样]<br>processing_pool.py  单线程普通抓取的实现<br>globalValue.py  新闻条数count的跨文件传递.</p>
</blockquote>
<h5 id="MyTools-py"><a href="#MyTools-py" class="headerlink" title="MyTools.py"></a>MyTools.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> chardet</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># headers = &#123;'User-Agent': "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"&#125;</span></div><div class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36"</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 打开数据库，之后在具体调用后close</span></div><div class="line">db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"数据库密码"</span>, <span class="string">"数据库名称"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">cursor = db.cursor()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：给定新闻类别链接的列表class_urls，获取并储存数据</span></div><div class="line"><span class="comment"># 待实现函数:get_class_data, getdata</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_save_data</span><span class="params">(class_urls)</span>:</span></div><div class="line">    <span class="keyword">for</span> class_url <span class="keyword">in</span> class_urls:</div><div class="line">        class_data = get_class_data(class_url)</div><div class="line">        getdata(class_data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对于每个分类提取单个新闻标题信息class_data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class_data</span><span class="params">(class_url)</span>:</span></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)</div><div class="line">    class_data = requests.get(class_url, headers=headers)</div><div class="line">    pa = re.compile(<span class="string">r'charset=(.*?)"&gt;'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        charset = re.findall(pa, class_data.text)[<span class="number">0</span>]</div><div class="line">        class_data.encoding = charset</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="comment"># class_data.encoding = 'gbk'</span></div><div class="line">    class_data = class_data.text</div><div class="line">    soup = BeautifulSoup(class_data, <span class="string">'lxml'</span>)</div><div class="line">    data = soup.findAll(<span class="string">'a'</span>, &#123;<span class="string">'target'</span>: <span class="string">'_blank'</span>&#125;)</div><div class="line">    class_data = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">        title = data[i].get_text()</div><div class="line">        href = data[i].get(<span class="string">'href'</span>)</div><div class="line">        <span class="comment"># 过滤一些干扰链接</span></div><div class="line">        <span class="keyword">if</span> len(title) &gt; <span class="number">10</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'下载'</span> <span class="keyword">in</span> title:</div><div class="line">                class_data[title] = href</div><div class="line"></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)[<span class="number">0</span>][<span class="number">7</span>:]</div><div class="line"></div><div class="line">    <span class="comment"># 这里返回classname,主要是为了入库方便</span></div><div class="line">    <span class="keyword">return</span> [classname, class_data]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：根据传入的新闻类别的信息class_data, 获取新闻文本并存入数据库</span></div><div class="line"><span class="comment"># 待实现函数：get_news_text</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">(class_data)</span>:</span></div><div class="line">    class_title = class_data[<span class="number">0</span>]</div><div class="line">    class_data = class_data[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> news_title, news_url <span class="keyword">in</span> dict(class_data).items():</div><div class="line"></div><div class="line">        print(news_title)</div><div class="line">        text = get_news_text(news_url)</div><div class="line">        <span class="keyword">if</span> text <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            print(<span class="string">"Got text data..."</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            text = <span class="string">'lost'</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            sql = <span class="string">'INSERT INTO BaiduNews(class, title, text)VALUES(%s,%s,%s)'</span></div><div class="line">            cursor.execute(sql, (class_title, news_title, text))</div><div class="line">            <span class="comment"># 提交事务</span></div><div class="line">            db.commit()</div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'Save fail...'</span>)</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取每条新闻的具体文本内容，粗略抓取</span></div><div class="line"><span class="string">'''</span></div><div class="line">百度新闻的链接是跳转到各个新闻网站的，网站大部分的结构都不同，</div><div class="line">很难做到完全抓取到文本，所以目前只能粗略抓取。</div><div class="line"></div><div class="line">之后会进行pyquery 的 css抓取，有时间会研究下专门的文本抓取算法</div><div class="line">'''</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_news_text</span><span class="params">(href)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = requests.get(href, headers=headers)</div><div class="line">        <span class="comment"># 检测编码</span></div><div class="line">        char = chardet.detect(data.content)</div><div class="line">        data.encoding = char[<span class="string">'encoding'</span>]</div><div class="line">        <span class="comment"># 解析网页</span></div><div class="line">        data = BeautifulSoup(data.text, <span class="string">'lxml'</span>)</div><div class="line">        <span class="comment"># 这里对于同一属性多个值进行匹配</span></div><div class="line">        <span class="comment"># data = BeautifulSoup(data.text,'lxml').find("div", &#123;'class': ['text', 'article', 'content']&#125;)</span></div><div class="line">        data = data.find(<span class="string">"div"</span>, &#123;<span class="string">'class'</span>: re.compile(<span class="string">r"^(text|article|content)$"</span>)&#125;)</div><div class="line">        text = data.get_text()</div><div class="line">        count = globalValue.get_value()</div><div class="line">        print(count)</div><div class="line">        count += <span class="number">1</span></div><div class="line">        globalValue.set_value(count)</div><div class="line"></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        text = <span class="keyword">None</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 邮件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((Header(name,<span class="string">'utf-8'</span>).encode(), addr))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ms</span><span class="params">(T)</span>:</span></div><div class="line">    from_addr = <span class="string">"发件箱，自定义"</span></div><div class="line">    <span class="comment"># 开启QQ邮箱STMP服务的授权码</span></div><div class="line">    <span class="comment"># 参考这里http://jingyan.baidu.com/article/4f7d5712b1ac7c1a201927da.html</span></div><div class="line">    password = <span class="string">'授权码'</span></div><div class="line">    to_addr = <span class="string">'收件箱[需开启STMP服务]'</span></div><div class="line">    smtp_server = <span class="string">'smtp.qq.com'</span></div><div class="line">    msg = MIMEText(T, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">    msg[<span class="string">'From'</span>] = _format_addr(<span class="string">'Anyone'</span>)</div><div class="line">    msg[<span class="string">'To'</span>] = _format_addr(<span class="string">'Echo'</span>)</div><div class="line">    msg[<span class="string">'Subject'</span>] = Header(<span class="string">'The New Report'</span>, <span class="string">'utf-8'</span>).encode()</div><div class="line">    server = smtplib.SMTP_SSL(smtp_server, <span class="number">465</span>, timeout=<span class="number">10</span>)</div><div class="line">    server.set_debuglevel(<span class="number">0</span>)</div><div class="line">    server.login(from_addr,password)</div><div class="line">    server.sendmail(from_addr, [to_addr], msg.as_string())</div><div class="line">    server.quit()</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="processing-pool-py"><a href="#processing-pool-py" class="headerlink" title="processing_pool.py"></a>processing_pool.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">进程池抓取</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> send_email</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> MyTools <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    count = <span class="number">0</span></div><div class="line">    globalValue.set_value(count)</div><div class="line"></div><div class="line">    start = time.time()</div><div class="line">    s = time.ctime()</div><div class="line"></div><div class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"</span>&#125;</div><div class="line">    class_list = [<span class="string">'http://finance.baidu.com/'</span>, <span class="string">'http://internet.baidu.com/'</span>, <span class="string">'http://yule.baidu.com/'</span>,</div><div class="line">                       <span class="string">'http://shipin.news.baidu.com/'</span>]</div><div class="line"></div><div class="line">    data_lists = []</div><div class="line">    <span class="keyword">for</span> class_url <span class="keyword">in</span> class_list:</div><div class="line">        data = get_class_data(class_url)</div><div class="line">        data_lists.append(data)</div><div class="line"></div><div class="line">    pool = Pool(processes=<span class="number">4</span>)</div><div class="line">    pool.map(getdata, data_lists)</div><div class="line">    count = globalValue.get_value()</div><div class="line"></div><div class="line">    pool.close()</div><div class="line">    pool.join()</div><div class="line"></div><div class="line">    db.close()</div><div class="line"></div><div class="line">    end = time.time()</div><div class="line">    e = time.ctime()</div><div class="line"></div><div class="line">    total_time = end - start</div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(<span class="string">"processing_pool.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(<span class="string">"\nprocessing_pool抓取\n本次抓取开始于%s,结束于%s,耗时%s\n"</span>%(s, e, total_time))</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="globalValue-py"><a href="#globalValue-py" class="headerlink" title="globalValue.py"></a>globalValue.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(input_value)</span>:</span></div><div class="line">    <span class="keyword">global</span> value</div><div class="line">    value = input_value</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> value</div><div class="line"></div></pre></td></tr></table></figure>
<p> 日志文件：</p>
<p>[可以看到约190秒,较普通抓取有明显的速度提速]<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/baidu/3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度新闻爬虫——普通抓取]]></title>
      <url>/2017/03/02/%E7%99%BE%E5%BA%A6%E6%96%B0%E9%97%BB%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E6%99%AE%E9%80%9A%E6%8A%93%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>一个关于百度新闻的爬虫， 分类提取新闻文本。</p>
<p>环境</p>
<blockquote>
<p>Ubuntu14.04, Pycharm, Anaconda3,<br>MySQL:mysql  Ver 14.14 Distrib 5.5.53, for debian-linux-gnu (x86_64) using readline 6.3</p>
</blockquote>
<p>文件目录：</p>
<blockquote>
<p>MyTools.py 存放获取，解析并储存网页内容的工具函数<br>single_thread.py  单线程普通抓取的实现<br>globalValue.py  新闻条数count的跨文件传递，参考<a href="http://www.jianshu.com/p/6cee728f3490" target="_blank" rel="external">这里</a></p>
</blockquote>
<h5 id="MyTools-py"><a href="#MyTools-py" class="headerlink" title="MyTools.py"></a>MyTools.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> chardet</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># headers = &#123;'User-Agent': "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"&#125;</span></div><div class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36"</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 打开数据库，之后在具体调用后close</span></div><div class="line">db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"你的密码"</span>, <span class="string">"USpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">cursor = db.cursor()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：给定新闻类别链接的列表class_urls，获取并储存数据</span></div><div class="line"><span class="comment"># 待实现函数:get_class_data, getdata</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_save_data</span><span class="params">(class_urls)</span>:</span></div><div class="line">    <span class="keyword">for</span> class_url <span class="keyword">in</span> class_urls:</div><div class="line">        class_data = get_class_data(class_url)</div><div class="line">        getdata(class_data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对于每个分类提取单个新闻标题信息class_data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class_data</span><span class="params">(class_url)</span>:</span></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)</div><div class="line">    class_data = requests.get(class_url, headers=headers)</div><div class="line"></div><div class="line">    char = chardet.detect(class_data.content)</div><div class="line">    class_data.encoding = char[<span class="string">'encoding'</span>]</div><div class="line">    <span class="comment"># 解析网页</span></div><div class="line">    class_data = class_data.text</div><div class="line">    soup = BeautifulSoup(class_data, <span class="string">'lxml'</span>)</div><div class="line">    data = soup.findAll(<span class="string">'a'</span>, &#123;<span class="string">'target'</span>: <span class="string">'_blank'</span>&#125;)</div><div class="line">    class_data = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">        title = data[i].get_text()</div><div class="line">        href = data[i].get(<span class="string">'href'</span>)</div><div class="line">        <span class="comment"># 过滤一些干扰链接</span></div><div class="line">        <span class="keyword">if</span> len(title) &gt; <span class="number">10</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'下载'</span> <span class="keyword">in</span> title:</div><div class="line">                class_data[title] = href</div><div class="line"></div><div class="line">    classname = class_url.split(<span class="string">'.'</span>)[<span class="number">0</span>][<span class="number">7</span>:]</div><div class="line"></div><div class="line">    <span class="comment"># 这里返回classname,主要是为了入库方便</span></div><div class="line">    <span class="keyword">return</span> [classname, class_data]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 实现：根据传入的新闻类别的信息class_data, 获取新闻文本并存入数据库</span></div><div class="line"><span class="comment"># 待实现函数：get_news_text</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">(class_data)</span>:</span></div><div class="line">    class_title = class_data[<span class="number">0</span>]</div><div class="line">    class_data = class_data[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> news_title, news_url <span class="keyword">in</span> dict(class_data).items():</div><div class="line"></div><div class="line">        print(news_title)</div><div class="line">        text = get_news_text(news_url)</div><div class="line">        <span class="keyword">if</span> text <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            print(<span class="string">"Got text data..."</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            text = <span class="string">'lost'</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            sql = <span class="string">'INSERT INTO BaiduNews(class, title, text)VALUES(%s,%s,%s)'</span></div><div class="line">            cursor.execute(sql, (class_title, news_title, text))</div><div class="line">            <span class="comment"># 提交事务</span></div><div class="line">            db.commit()</div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'Save fail...'</span>)</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取每条新闻的具体文本内容，粗略抓取</span></div><div class="line"><span class="string">'''</span></div><div class="line">百度新闻的链接是跳转到各个新闻网站的，网站大部分的结构都不同，</div><div class="line">很难做到完全抓取到文本，所以目前只能粗略抓取。</div><div class="line"></div><div class="line">之后会进行pyquery 的 css抓取，有时间会研究下专门的文本抓取算法</div><div class="line">'''</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_news_text</span><span class="params">(href)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = requests.get(href, headers=headers)</div><div class="line">        <span class="comment"># 检测编码</span></div><div class="line">        char = chardet.detect(data.content)</div><div class="line">        data.encoding = char[<span class="string">'encoding'</span>]</div><div class="line">        <span class="comment"># 解析网页</span></div><div class="line">        data = BeautifulSoup(data.text, <span class="string">'lxml'</span>)</div><div class="line">        <span class="comment"># 这里对于同一属性多个值进行匹配</span></div><div class="line">        <span class="comment"># data = BeautifulSoup(data.text,'lxml').find("div", &#123;'class': ['text', 'article', 'content']&#125;)</span></div><div class="line">        data = data.find(<span class="string">"div"</span>, &#123;<span class="string">'class'</span>: re.compile(<span class="string">r"^(text|article|content)$"</span>)&#125;)</div><div class="line">        text = data.get_text()</div><div class="line">        count = globalValue.get_value()</div><div class="line">        print(count)</div><div class="line">        count += <span class="number">1</span></div><div class="line">        globalValue.set_value(count)</div><div class="line"></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        text = <span class="keyword">None</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 邮件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((Header(name,<span class="string">'utf-8'</span>).encode(), addr))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ms</span><span class="params">(T)</span>:</span></div><div class="line">    from_addr = <span class="string">"1021550072@qq.com"</span></div><div class="line">    <span class="comment"># 开启QQ邮箱STMP服务的授权码</span></div><div class="line">    <span class="comment"># 参考这里http://jingyan.baidu.com/article/4f7d5712b1ac7c1a201927da.html</span></div><div class="line">    password = <span class="string">'你的密钥'</span></div><div class="line">    to_addr = <span class="string">'1021550072@qq.com'</span></div><div class="line">    smtp_server = <span class="string">'smtp.qq.com'</span></div><div class="line">    msg = MIMEText(T, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">    msg[<span class="string">'From'</span>] = _format_addr(<span class="string">'Anyone'</span>)</div><div class="line">    msg[<span class="string">'To'</span>] = _format_addr(<span class="string">'Echo'</span>)</div><div class="line">    msg[<span class="string">'Subject'</span>] = Header(<span class="string">'The New Report'</span>, <span class="string">'utf-8'</span>).encode()</div><div class="line">    server = smtplib.SMTP_SSL(smtp_server, <span class="number">465</span>, timeout=<span class="number">10</span>)</div><div class="line">    server.set_debuglevel(<span class="number">0</span>)</div><div class="line">    server.login(from_addr,password)</div><div class="line">    server.sendmail(from_addr, [to_addr], msg.as_string())</div><div class="line">    server.quit()</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="single-thread-py"><a href="#single-thread-py" class="headerlink" title="single_thread.py"></a>single_thread.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">from</span> MyTools <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="keyword">import</span>  globalValue</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 初始化count，记录抓取的新闻条数</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    globalValue.set_value(count)</div><div class="line"></div><div class="line">    s = time.ctime()</div><div class="line">    start = time.time()</div><div class="line"></div><div class="line">    class_lists = [<span class="string">'http://finance.baidu.com/'</span>, <span class="string">'http://internet.baidu.com/'</span>, <span class="string">'http://yule.baidu.com/'</span>,</div><div class="line">                       <span class="string">'http://shipin.news.baidu.com/'</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 开始抓取</span></div><div class="line">    get_save_data(class_lists)</div><div class="line">    count = globalValue.get_value()</div><div class="line"></div><div class="line">    <span class="comment"># 记得关闭数据库</span></div><div class="line">    db.close()</div><div class="line"></div><div class="line">    end = time.time()</div><div class="line">    e = time.ctime()</div><div class="line">    total_time = end - start</div><div class="line">    print(total_time)</div><div class="line">    print(count)</div><div class="line">    <span class="comment"># 抓取的日志文件</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">"single_thread.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(<span class="string">"\nSingle-thread抓取\n本次抓取开始于%s,结束于%s,耗时%s\n共抓取新闻%s条"</span>%(s, e, total_time, count))</div><div class="line"></div><div class="line">    <span class="comment"># 发送邮件通知，可选</span></div><div class="line">    T = <span class="string">"\nSingle-thread抓取\n本次抓取开始于%s,结束于%s,耗时%s\n共抓取新闻%s条"</span>%(s, e, total_time, count)</div><div class="line"></div><div class="line">    send_ms(T)</div><div class="line">    print(<span class="string">'已成功发送邮件，请查收'</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="globalValue-py"><a href="#globalValue-py" class="headerlink" title="globalValue.py"></a>globalValue.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(input_value)</span>:</span></div><div class="line">    <span class="keyword">global</span> value</div><div class="line">    value = input_value</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> value</div><div class="line"></div></pre></td></tr></table></figure>
<p>日志文件及运行结果[同时会发送邮件到指定邮箱]：<br>[可以看到约400多秒] </p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/baidu/1.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Spider/baidu/2.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[统计学习方法——简单实现KNN[Python]]]></title>
      <url>/2017/03/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0KNN-Python/</url>
      <content type="html"><![CDATA[<p>李航老师《统计学习方法》第三章笔记。</p>
<p>关于KNN[k-Nearest Neighbors algorithm]的基本知识和实验。</p>
<h5 id="KNN的基本知识"><a href="#KNN的基本知识" class="headerlink" title="KNN的基本知识"></a>KNN的基本知识</h5><p>详情参考<a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm" target="_blank" rel="external">WIKI</a>, 这里我们暂时先研究分类方面的应用。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/1.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/2.png" alt=""></p>
<h5 id="算法的描述："><a href="#算法的描述：" class="headerlink" title="算法的描述："></a>算法的描述：</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/3.png" alt=""></p>
<blockquote>
<p>(1)在K近邻法中，当训练集、距离度量[如欧式距离]、K值及分类决策规则[如多数表决]确定后，对于任一新的输入实例，它所属的类唯一地确定。</p>
<p>  (2)k值的减小就意味着整体模型变得复杂，容易发生过拟合。K一般取较小的值，通常采用交叉验证法来选取最优的K值。</p>
</blockquote>
<h5 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S1--&gt;随机生成训练集并标注</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 模拟对原始数据标注</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(Px, D, classx)</span>:</span></div><div class="line">    <span class="keyword">for</span> px <span class="keyword">in</span> Px:</div><div class="line">        D[tuple(px)] = classx</div><div class="line"></div><div class="line"><span class="comment"># 湖区train_data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_train_data</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># D 用来储存所有的标注好的实例点</span></div><div class="line">    D = &#123;&#125;</div><div class="line">    P1 = np.random.random((<span class="number">100</span>, <span class="number">2</span>))</div><div class="line">    sign(P1, D, <span class="number">1</span>)</div><div class="line"></div><div class="line">    P2 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) - <span class="number">0.7</span></div><div class="line">    sign(P2, D, <span class="number">2</span>)</div><div class="line"></div><div class="line">    P3 = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) + <span class="number">0.7</span></div><div class="line">    sign(P3, D, <span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line">    plt.plot(P1[:, <span class="number">0</span>], P1[:, <span class="number">1</span>], <span class="string">'ro'</span>, label=<span class="string">'class1'</span>, alpha = <span class="number">0.7</span>)</div><div class="line">    plt.plot(P2[:, <span class="number">0</span>], P2[:, <span class="number">1</span>], <span class="string">'go'</span>, label=<span class="string">'class2'</span>, alpha = <span class="number">0.7</span>)</div><div class="line">    plt.plot(P3[:, <span class="number">0</span>], P3[:, <span class="number">1</span>], <span class="string">'bo'</span>, label=<span class="string">'class3'</span>, alpha = <span class="number">0.7</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> D</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S2--&gt; 算法实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_dist</span><span class="params">(px, py)</span>:</span></div><div class="line">        <span class="keyword">return</span> np.linalg.norm(np.array(px)-np.array(py))</div><div class="line"></div><div class="line"><span class="comment"># 按照与待测点距离的大小排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rank</span><span class="params">(D, p0)</span>:</span></div><div class="line">    plt.plot(p0[<span class="number">0</span>], p0[<span class="number">1</span>], <span class="string">'k*'</span>, markersize=<span class="number">15</span>, label=<span class="string">"Test Point"</span>)</div><div class="line">    point_dist = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> px <span class="keyword">in</span> D.keys():</div><div class="line">        point_dist[px] = calc_dist(px, p0)</div><div class="line">    point_dist = pd.Series(point_dist, index=point_dist.keys())</div><div class="line">    point_dist.sort_values(inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> point_dist</div><div class="line"></div><div class="line"><span class="comment"># 获取最近的k个数据点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_knn</span><span class="params">(point_dist, k=<span class="number">1</span>)</span>:</span></div><div class="line">    knn = point_dist[:k].index</div><div class="line">    knn_x = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> list(knn)]</div><div class="line">    knn_y = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> list(knn)]</div><div class="line"></div><div class="line">    plt.plot(knn_x, knn_y, <span class="string">'yo'</span>, markersize=<span class="number">5</span>, label=<span class="string">"k nearest neighbors"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> knn</div><div class="line"></div><div class="line"><span class="comment"># 找到待测点所属的类别</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class</span><span class="params">(knn, D)</span>:</span></div><div class="line">    class_all = [D[point] <span class="keyword">for</span> point <span class="keyword">in</span> knn]</div><div class="line">    <span class="comment"># print(class_all)</span></div><div class="line">    c = Counter(class_all)</div><div class="line">    <span class="comment"># 多数表决</span></div><div class="line">    classx = c.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> classx</div><div class="line"></div><div class="line"><span class="comment"># S3--&gt; 运行测试</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(p0 = <span class="params">(<span class="number">0</span>, <span class="number">1</span>)</span>)</span>:</span></div><div class="line">    D = get_train_data()</div><div class="line">    point_dist = get_rank(D, p0)</div><div class="line">    knn = get_knn(point_dist, <span class="number">3</span>)</div><div class="line">    get_class(knn, D)</div><div class="line">    class_x = get_class(knn, D)</div><div class="line">    print(p0, <span class="string">'所属的类别为：'</span>, class_x)</div><div class="line">    plt.legend()</div><div class="line">    plt.title(<span class="string">'raw knn'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run((<span class="number">0</span>, <span class="number">0.5</span>))</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/4.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/5.png" alt=""></p>
<h5 id="进一步的应用："><a href="#进一步的应用：" class="headerlink" title="进一步的应用："></a>进一步的应用：</h5><p>注意：这里有三个版本的实现，前两个只有在计算距离上有所不同，但是很慢[第二个快些也还是要10min+], 最后一个速度很快，也就1min左右，参考这里。</p>
<h6 id="1-代码way1–-gt-V1-0-大部分继承自上面的方法，速度极其慢"><a href="#1-代码way1–-gt-V1-0-大部分继承自上面的方法，速度极其慢" class="headerlink" title="(1)代码way1–&gt;V1.0[大部分继承自上面的方法，速度极其慢]"></a>(1)代码way1–&gt;V1.0[大部分继承自上面的方法，速度极其慢]</h6><h6 id="2-代码way2–-gt-V2-0-速度有所提升，但是依旧很慢"><a href="#2-代码way2–-gt-V2-0-速度有所提升，但是依旧很慢" class="headerlink" title="(2)代码way2–&gt;V2.0[速度有所提升，但是依旧很慢]"></a>(2)代码way2–&gt;V2.0[速度有所提升，但是依旧很慢]</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line"><span class="comment"># get data from file</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(filepath)</span>:</span></div><div class="line">    data = &#123;&#125;</div><div class="line">    files = os.listdir(os.getcwd()+filepath)</div><div class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</div><div class="line">        classx = file.split(<span class="string">"_"</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">with</span> open(os.getcwd()+filepath+<span class="string">'/'</span>+file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">            key = f.read().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">            data[key] = classx</div><div class="line"></div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="comment"># get training data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_training_data</span><span class="params">()</span>:</span></div><div class="line">    training_data = get_data(<span class="string">"/trainingDigits"</span>)</div><div class="line">    <span class="keyword">return</span> training_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># get test data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_data</span><span class="params">()</span>:</span></div><div class="line">    test_data = get_data(<span class="string">"/testDigits"</span>)</div><div class="line">    <span class="keyword">return</span> test_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S2--&gt; 算法实现</span></div><div class="line"></div><div class="line"><span class="comment"># way1 ---&gt; 速度极其慢</span></div><div class="line"><span class="string">'''</span></div><div class="line">def calc_dist(px, py):</div><div class="line">    px = np.array([float(i) for i in np.array(list(px))])</div><div class="line">    py = np.array([float(i) for i in np.array(list(py))])</div><div class="line"></div><div class="line">    return np.linalg.norm(px-py)</div><div class="line"></div><div class="line"># 按照与待测点距离的大小排序</div><div class="line">def get_rank(training_data, p0):</div><div class="line">    point_dist = &#123;&#125;</div><div class="line">    for px in training_data.keys():</div><div class="line">        point_dist[px] = calc_dist(px, p0)</div><div class="line">    point_dist = pd.Series(point_dist, index=point_dist.keys())</div><div class="line">    point_dist.sort_values(inplace=True)</div><div class="line"></div><div class="line">    return point_dist</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># way2--&gt; 速度有所提高，但也是很慢</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">def calc_dist(training_data, p0):</div><div class="line">    def str2array(p):</div><div class="line">        return np.array([float(i) for i in list(p)])</div><div class="line"></div><div class="line">    numSamples = len(training_data)</div><div class="line">    training_data_pro = [str2array(p) for p in list(training_data.keys())]</div><div class="line">    p0 = str2array(p0)</div><div class="line">    # step1:calculate Euclidean distance</div><div class="line">    # tile(A, reps):Constract an array by repeating A reps times</div><div class="line">    diff = np.matrix(np.tile(p0, (numSamples, 1))) - np.matrix(training_data_pro)</div><div class="line">    squreDiff = np.square(diff)</div><div class="line">    squreDist = np.sum(squreDiff, axis=1)  # sum if performed by row</div><div class="line">    distance = np.sqrt(squreDist)</div><div class="line"></div><div class="line">    distance = [distance[i, 0] for i in range(len(distance))]</div><div class="line">    point_dist = pd.Series(distance, index=training_data.keys())</div><div class="line">    point_dist.sort_values(inplace=True)</div><div class="line"></div><div class="line">    return point_dist</div><div class="line"></div><div class="line"># 按照与待测点距离的大小排序</div><div class="line">def get_rank(training_data, p0):</div><div class="line">    point_dist = calc_dist(training_data, p0)</div><div class="line">    return point_dist</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取最近的k个数据点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_knn</span><span class="params">(point_dist, k=<span class="number">1</span>)</span>:</span></div><div class="line">    knn = point_dist[:k].index</div><div class="line"></div><div class="line">    <span class="keyword">return</span> knn</div><div class="line"></div><div class="line"><span class="comment"># 找到待测点所属的类别</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class</span><span class="params">(knn, training_data)</span>:</span></div><div class="line">    class_all = [training_data[point] <span class="keyword">for</span> point <span class="keyword">in</span> knn]</div><div class="line">    <span class="comment"># print(class_all)</span></div><div class="line">    c = Counter(class_all)</div><div class="line">    <span class="comment"># 多数表决</span></div><div class="line">    classx = c.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> classx</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># S3--&gt; 运行测试</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(p0, training_data)</span>:</span></div><div class="line">    point_dist = get_rank(training_data, p0)</div><div class="line">    knn = get_knn(point_dist, <span class="number">3</span>) class_x = get_class(knn, training_data)</div><div class="line">    print(p0, <span class="string">'所属的类别为：'</span>, class_x)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> class_x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    training_data = get_training_data()</div><div class="line">    test_data = get_test_data()</div><div class="line">    right = <span class="number">0</span></div><div class="line">    all = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> test_data.keys():</div><div class="line">        all += <span class="number">1</span></div><div class="line">        print(all)</div><div class="line">        classx = classify(point, training_data)</div><div class="line">        <span class="keyword">if</span> test_data[point] == classx:</div><div class="line">            right += <span class="number">1</span></div><div class="line">    print(<span class="string">"all--&gt;"</span>, all)</div><div class="line">    print(<span class="string">"right--&gt;"</span>, right)</div><div class="line">    print(<span class="string">'accuracy--&gt;'</span>, right/all)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    run()</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="V3-0速度大幅提高"><a href="#V3-0速度大幅提高" class="headerlink" title="V3.0速度大幅提高"></a>V3.0速度大幅提高</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># classify using KNN</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">KNNClassify</span><span class="params">(newInput, dataSet, labels, k)</span>:</span></div><div class="line">    numSamples = dataSet.shape[<span class="number">0</span>]  <span class="comment"># row number</span></div><div class="line">    <span class="comment"># step1:calculate Euclidean distance</span></div><div class="line">    <span class="comment"># tile(A, reps):Constract an array by repeating A reps times</span></div><div class="line">    diff = tile(newInput, (numSamples, <span class="number">1</span>)) - dataSet</div><div class="line">    squreDiff = diff ** <span class="number">2</span></div><div class="line">    squreDist = sum(squreDiff, axis=<span class="number">1</span>)  <span class="comment"># sum if performed by row</span></div><div class="line">    distance = squreDist ** <span class="number">0.5</span></div><div class="line"></div><div class="line">    <span class="comment"># step2:sort the distance</span></div><div class="line">    <span class="comment"># argsort() returns the indices that would sort an array in a ascending order</span></div><div class="line">    sortedDistIndices = argsort(distance)</div><div class="line"></div><div class="line">    classCount = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</div><div class="line">        <span class="comment"># choose the min k distance</span></div><div class="line">        voteLabel = labels[sortedDistIndices[i]]</div><div class="line"></div><div class="line">        <span class="comment"># step4:count the times labels occur</span></div><div class="line">        <span class="comment"># when the key voteLabel is not in dictionary classCount,</span></div><div class="line">        <span class="comment"># get() will return 0</span></div><div class="line">        classCount[voteLabel] = classCount.get(voteLabel, <span class="number">0</span>) + <span class="number">1</span></div><div class="line">    <span class="comment"># step5:the max vote class will return</span></div><div class="line">    maxCount = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> classCount.items():</div><div class="line">        <span class="keyword">if</span> v &gt; maxCount:</div><div class="line">            maxCount = v</div><div class="line">            maxIndex = k</div><div class="line"></div><div class="line">    <span class="keyword">return</span> maxIndex</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># convert image to vector</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2vector</span><span class="params">(filename)</span>:</span></div><div class="line">    rows = <span class="number">32</span></div><div class="line">    cols = <span class="number">32</span></div><div class="line">    imgVector = zeros((<span class="number">1</span>, rows * cols))</div><div class="line">    fileIn = open(filename)</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(rows):</div><div class="line">        lineStr = fileIn.readline()</div><div class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(cols):</div><div class="line">            imgVector[<span class="number">0</span>, row * <span class="number">32</span> + col] = int(lineStr[col])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> imgVector</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># load dataSet</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">## step 1: Getting training set</span></div><div class="line">    print(<span class="string">"---Getting training set..."</span>)</div><div class="line">    dataSetDir = <span class="string">'/home/shen/PycharmProjects/MyPython/统计学习方法/KNN/digits/'</span></div><div class="line">    trainingFileList = os.listdir(dataSetDir + <span class="string">'trainingDigits'</span>)  <span class="comment"># load the training set</span></div><div class="line">    numSamples = len(trainingFileList)</div><div class="line"></div><div class="line">    train_x = zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    train_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = trainingFileList[i]</div><div class="line"></div><div class="line">        <span class="comment"># get train_x</span></div><div class="line">        train_x[i, :] = img2vector(dataSetDir + <span class="string">'trainingDigits/%s'</span> % filename)</div><div class="line"></div><div class="line">        <span class="comment"># get label from file name such as "1_18.txt"</span></div><div class="line">        label = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])  <span class="comment"># return 1</span></div><div class="line">        train_y.append(label)</div><div class="line"></div><div class="line">        <span class="comment">## step 2: Getting testing set</span></div><div class="line">    print(<span class="string">"---Getting testing set..."</span>)</div><div class="line">    testingFileList = os.listdir(dataSetDir + <span class="string">'testDigits'</span>)  <span class="comment"># load the testing set</span></div><div class="line">    numSamples = len(testingFileList)</div><div class="line">    test_x = zeros((numSamples, <span class="number">1024</span>))</div><div class="line">    test_y = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numSamples):</div><div class="line">        filename = testingFileList[i]</div><div class="line"></div><div class="line">        <span class="comment"># get train_x</span></div><div class="line">        test_x[i, :] = img2vector(dataSetDir + <span class="string">'testDigits/%s'</span> % filename)</div><div class="line"></div><div class="line">        <span class="comment"># get label from file name such as "1_18.txt"</span></div><div class="line">        label = int(filename.split(<span class="string">'_'</span>)[<span class="number">0</span>])  <span class="comment"># return 1</span></div><div class="line">        test_y.append(label)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> train_x, train_y, test_x, test_y</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># test hand writing class</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testHandWritingClass</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">## step 1: load data</span></div><div class="line">    print(<span class="string">"step 1: load data..."</span>)</div><div class="line">    train_x, train_y, test_x, test_y = loadDataSet()</div><div class="line"></div><div class="line">    <span class="comment">## step 2: training...</span></div><div class="line">    print(<span class="string">"step 2: training..."</span>)</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="comment">## step 3: testing</span></div><div class="line">    print(<span class="string">"step 3: testing..."</span>)</div><div class="line">    numTestSamples = test_x.shape[<span class="number">0</span>]</div><div class="line">    matchCount = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTestSamples):</div><div class="line">        predict = KNNClassify(test_x[i], train_x, train_y, <span class="number">3</span>)</div><div class="line">        <span class="keyword">if</span> predict == test_y[i]:</div><div class="line">            matchCount += <span class="number">1</span></div><div class="line">    accuracy = float(matchCount) / numTestSamples</div><div class="line"></div><div class="line">    <span class="comment">## step 4: show the result</span></div><div class="line">    print(<span class="string">"step 4: show the result..."</span>)</div><div class="line">    print(<span class="string">'The classify accuracy is: %.2f%%'</span> % (accuracy * <span class="number">100</span>))</div><div class="line"></div><div class="line"></div><div class="line">testHandWritingClass()</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/ch3/6.png" alt=""></p>
<h5 id="要改进学习的地方"><a href="#要改进学习的地方" class="headerlink" title="要改进学习的地方"></a>要改进学习的地方</h5><p>最后参考别人的代码快，感觉主要问题在numpy的矩阵运算上，这个之后要深入研究下，毕竟代码运行速度是极为重要的。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> ML </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[决策树的简单实现]]></title>
      <url>/2017/03/02/%E5%86%B3%E7%AD%96%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>Coursera课程machine learning data analysis  week1Decision Trees</p>
<p>Python代码：[最后图片部分有些许改动]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier <span class="keyword">import</span> sklearn.metrics</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Data Engineering and Analysis</div><div class="line">"""</div><div class="line"><span class="comment">#Load the dataset</span></div><div class="line"></div><div class="line">AH_data = pd.read_csv(<span class="string">"tree_addhealth.csv"</span>)</div><div class="line"></div><div class="line">data_clean = AH_data.dropna()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 一些常用的命令，整体上描述数据</span></div><div class="line">print(<span class="string">'---------desc-------------'</span>)</div><div class="line"><span class="comment"># print(data_clean.info())</span></div><div class="line"><span class="comment"># print(data_clean.dtypes)</span></div><div class="line">print(data_clean.describe())</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">Modeling and Prediction</div><div class="line">"""</div><div class="line"><span class="comment">#Split into training and testing sets</span></div><div class="line"><span class="comment"># 除去TREG1后的24个字段</span></div><div class="line">predictors = data_clean[[<span class="string">'BIO_SEX'</span>,<span class="string">'HISPANIC'</span>,<span class="string">'WHITE'</span>,<span class="string">'BLACK'</span>,<span class="string">'NAMERICAN'</span>,<span class="string">'ASIAN'</span>,</div><div class="line"><span class="string">'age'</span>,<span class="string">'ALCEVR1'</span>,<span class="string">'ALCPROBS1'</span>,<span class="string">'marever1'</span>,<span class="string">'cocever1'</span>,<span class="string">'inhever1'</span>,<span class="string">'cigavail'</span>,<span class="string">'DEP1'</span>,</div><div class="line"><span class="string">'ESTEEM1'</span>,<span class="string">'VIOL1'</span>,<span class="string">'PASSIST'</span>,<span class="string">'DEVIANT1'</span>,<span class="string">'SCHCONN1'</span>,<span class="string">'GPA1'</span>,<span class="string">'EXPEL1'</span>,<span class="string">'FAMCONCT'</span>,<span class="string">'PARACTV'</span>,</div><div class="line"><span class="string">'PARPRES'</span>]]</div><div class="line"></div><div class="line">targets = data_clean.TREG1</div><div class="line"><span class="comment"># 拆分为测试集和训练集</span></div><div class="line">pred_train, pred_test, tar_train, tar_test  =   train_test_split(predictors, targets, test_size=<span class="number">.4</span>)  <span class="comment"># 测试集占数据集的40%</span></div><div class="line"></div><div class="line"><span class="comment"># 查看拆分结果</span></div><div class="line"></div><div class="line">print(<span class="string">'---------shapes------------'</span>)</div><div class="line">print(pred_train.shape)</div><div class="line">print(pred_test.shape)</div><div class="line">print(tar_train.shape)</div><div class="line">print(tar_test.shape)</div><div class="line"></div><div class="line"><span class="comment">#Build model on training data</span></div><div class="line">classifier=DecisionTreeClassifier()</div><div class="line">classifier=classifier.fit(pred_train,tar_train)</div><div class="line"></div><div class="line">predictions=classifier.predict(pred_test)</div><div class="line"></div><div class="line">sklearn.metrics.confusion_matrix(tar_test,predictions)</div><div class="line">sklearn.metrics.accuracy_score(tar_test, predictions)</div><div class="line"></div><div class="line"><span class="comment">#Displaying the decision tree</span></div><div class="line"><span class="keyword">import</span> pydotplus</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"></div><div class="line">out = StringIO()</div><div class="line">tree.export_graphviz(classifier, out_file=out)</div><div class="line">graph=pydotplus.graph_from_dot_data(out.getvalue())</div><div class="line">data = graph.create_png()  <span class="comment"># 图片的二进制数据</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'tree.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(data)</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>遇到的问题：</p>
<blockquote>
<p>InvocationException: GraphViz’s executables not found</p>
</blockquote>
<p>解决：</p>
<blockquote>
<p>pip install graphviz</p>
</blockquote>
<p>这样虽说不报错了，但是图片还是无法显示，于是就做了变动，改为保存图片。<br>tree.png:</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/tree.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> ML </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle——A Journey through Titanic[Python]]]></title>
      <url>/2017/03/02/Kaggle%E2%80%94%E2%80%94A-Journey-through-Titanic-Python/</url>
      <content type="html"><![CDATA[<p>Kaggle案例一——Titanic——Python分析与预测</p>
<blockquote>
<p>非原创，目前本站Kaggle案例均来自Kaggle官网发布的kernel，这里摘抄下来学习借鉴。</p>
</blockquote>
<h5 id="数据变量描述"><a href="#数据变量描述" class="headerlink" title="数据变量描述"></a>数据变量描述</h5><blockquote>
<p>VARIABLE DESCRIPTIONS:<br>survival        Survival<br>                (0 = No; 1 = Yes)<br>pclass          Passenger Class<br>                (1 = 1st; 2 = 2nd; 3 = 3rd)<br>name            Name<br>sex             Sex<br>age             Age<br>sibsp           Number of Siblings/Spouses Aboard<br>parch           Number of Parents/Children Aboard<br>ticket          Ticket Number<br>fare            Passenger Fare<br>cabin           Cabin<br>embarked        Port of Embarkation<br>                (C = Cherbourg; Q = Queenstown; S = Southampton)</p>
<p>SPECIAL NOTES:<br>Pclass is a proxy for socio-economic status (SES)<br> 1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower</p>
<p>Age is in Years; Fractional if Age less than One (1)<br> If the Age is Estimated, it is in the form xx.5</p>
<p>With respect to the family relation variables (i.e. sibsp and parch)<br>some relations were ignored.  The following are the definitions used<br>for sibsp and parch.</p>
<p>Sibling:  Brother, Sister, Stepbrother, or Stepsister of Passenger Aboard Titanic<br>Spouse:   Husband or Wife of Passenger Aboard Titanic (Mistresses and Fiances Ignored)<br>Parent:   Mother or Father of Passenger Aboard Titanic<br>Child:    Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard Titanic</p>
<p>Other family relatives excluded from this study include cousins,<br>nephews/nieces, aunts/uncles, and in-laws.  Some children travelled<br>only with a nanny, therefore parch=0 for them.  As well, some<br>travelled with very close friends or neighbors in a village, however,<br>the definitions do not support such relations.</p>
</blockquote>
<h5 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Imports</span></div><div class="line"></div><div class="line"><span class="comment"># pandas</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</div><div class="line"></div><div class="line"><span class="comment"># numpy, matplotlib, seaborn</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"><span class="comment"># 设置seaborn默认的绘图样式</span></div><div class="line">sns.set_style(<span class="string">'whitegrid'</span>)</div><div class="line"></div><div class="line"><span class="comment"># machine learning</span></div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC, LinearSVC</div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>关于sns.set_style(‘whitegrid’):<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/1.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># get titanic &amp; test csv files as a DataFrame</span></div><div class="line"><span class="comment"># 获取训练和待预测的数据，导入为DF</span></div><div class="line">titanic_df = pd.read_csv(<span class="string">"/home/shen/PycharmProjects/MyPython/Kaggle/Titanic/train.csv"</span>)</div><div class="line">test_df    = pd.read_csv(<span class="string">"/home/shen/PycharmProjects/MyPython/Kaggle/Titanic/test.csv"</span>)</div><div class="line"></div><div class="line"><span class="comment"># preview the data</span></div><div class="line"><span class="comment"># 预览数据</span></div><div class="line">titanic_df.head()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/2.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">titanic_df.info()</div><div class="line">print(<span class="string">"----------------------------"</span>)</div><div class="line">test_df.info()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/4.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># drop unnecessary columns, these columns won't be useful in analysis and prediction</span></div><div class="line"><span class="comment"># 去除一些无用的列，这种  关注数据的核心信息   在之后还能看到</span></div><div class="line"></div><div class="line">titanic_df = titanic_df.drop([<span class="string">'PassengerId'</span>,<span class="string">'Name'</span>,<span class="string">'Ticket'</span>], axis=<span class="number">1</span>)  <span class="comment"># axis=1,代表列</span></div><div class="line">test_df    = test_df.drop([<span class="string">'Name'</span>,<span class="string">'Ticket'</span>], axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># Embarked</span></div><div class="line"></div><div class="line"><span class="comment"># only in titanic_df, fill the two missing values with the most occurred value, which is "S".</span></div><div class="line"><span class="comment"># 少量非数值缺失值处理的一种方法--&gt;用出现最多的观测值填充</span></div><div class="line">titanic_df[<span class="string">"Embarked"</span>] = titanic_df[<span class="string">"Embarked"</span>].fillna(<span class="string">"S"</span>)</div><div class="line"></div><div class="line"><span class="comment"># plot</span></div><div class="line">sns.factorplot(<span class="string">'Embarked'</span>,<span class="string">'Survived'</span>, data=titanic_df,size=<span class="number">4</span>,aspect=<span class="number">3</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/5.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">fig, (axis1,axis2,axis3) = plt.subplots(<span class="number">1</span>,<span class="number">3</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Embarked',data=titanic_df,kind='count',order=['S','C','Q'],ax=axis1)</span></div><div class="line"><span class="comment"># sns.factorplot('Survived',hue="Embarked",data=titanic_df,kind='count',order=[1,0],ax=axis2)</span></div><div class="line">sns.countplot(x=<span class="string">'Embarked'</span>, data=titanic_df, ax=axis1)</div><div class="line">sns.countplot(x=<span class="string">'Survived'</span>, hue=<span class="string">"Embarked"</span>, data=titanic_df, order=[<span class="number">1</span>,<span class="number">0</span>], ax=axis2)</div><div class="line"></div><div class="line"><span class="comment"># group by embarked, and get the mean for survived passengers for each value in Embarked</span></div><div class="line">embark_perc = titanic_df[[<span class="string">"Embarked"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Embarked'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Embarked'</span>, y=<span class="string">'Survived'</span>, data=embark_perc,order=[<span class="string">'S'</span>,<span class="string">'C'</span>,<span class="string">'Q'</span>],ax=axis3)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/6.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Either to consider Embarked column in predictions,</span></div><div class="line"><span class="comment"># and remove "S" dummy variable, </span></div><div class="line"><span class="comment"># and leave "C" &amp; "Q", since they seem to have a good rate for Survival.</span></div><div class="line"><span class="comment"># 观察到"C", "Q"相比“S”有较高的生存率，所以我们删除S列</span></div><div class="line"></div><div class="line"><span class="comment"># OR, don't create dummy variables for Embarked column, just drop it, </span></div><div class="line"><span class="comment"># because logically, Embarked doesn't seem to be useful in prediction.</span></div><div class="line"><span class="comment"># 或者我们可以直接删除Embarked这一列，它对预测无太大影响</span></div><div class="line"></div><div class="line">embark_dummies_titanic  = pd.get_dummies(titanic_df[<span class="string">'Embarked'</span>])</div><div class="line">embark_dummies_titanic.drop([<span class="string">'S'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">embark_dummies_test  = pd.get_dummies(test_df[<span class="string">'Embarked'</span>])</div><div class="line">embark_dummies_test.drop([<span class="string">'S'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df = titanic_df.join(embark_dummies_titanic)</div><div class="line">test_df    = test_df.join(embark_dummies_test)</div><div class="line"></div><div class="line">titanic_df.drop([<span class="string">'Embarked'</span>], axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Embarked'</span>], axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># Fare</span></div><div class="line"></div><div class="line"><span class="comment"># only for test_df, since there is a missing "Fare" values</span></div><div class="line"><span class="comment"># 少量数值型缺失值的处理方法--&gt;中位数填充</span></div><div class="line">test_df[<span class="string">"Fare"</span>].fillna(test_df[<span class="string">"Fare"</span>].median(), inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># convert from float to int</span></div><div class="line"><span class="comment"># 数据类型的转换</span></div><div class="line">titanic_df[<span class="string">'Fare'</span>] = titanic_df[<span class="string">'Fare'</span>].astype(int)</div><div class="line">test_df[<span class="string">'Fare'</span>]    = test_df[<span class="string">'Fare'</span>].astype(int)</div><div class="line"></div><div class="line"><span class="comment"># get fare for survived &amp; didn't survive passengers</span></div><div class="line"><span class="comment"># 数据分类</span></div><div class="line">fare_not_survived = titanic_df[<span class="string">"Fare"</span>][titanic_df[<span class="string">"Survived"</span>] == <span class="number">0</span>]</div><div class="line">fare_survived     = titanic_df[<span class="string">"Fare"</span>][titanic_df[<span class="string">"Survived"</span>] == <span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># get average and std for fare of survived/not survived passengers</span></div><div class="line"><span class="comment"># 获取典型统计量，更好地描述和观察数据</span></div><div class="line">avgerage_fare = DataFrame([fare_not_survived.mean(), fare_survived.mean()])</div><div class="line">std_fare      = DataFrame([fare_not_survived.std(), fare_survived.std()])</div><div class="line"></div><div class="line"><span class="comment"># plot</span></div><div class="line">titanic_df[<span class="string">'Fare'</span>].plot(kind=<span class="string">'hist'</span>, figsize=(<span class="number">15</span>,<span class="number">3</span>),bins=<span class="number">100</span>, xlim=(<span class="number">0</span>,<span class="number">50</span>))</div><div class="line"></div><div class="line">avgerage_fare.index.names = std_fare.index.names = [<span class="string">"Survived"</span>]</div><div class="line">avgerage_fare.plot(yerr=std_fare,kind=<span class="string">'bar'</span>,legend=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/7.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/8.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Age </span></div><div class="line"></div><div class="line">fig, (axis1,axis2) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">4</span>))</div><div class="line">axis1.set_title(<span class="string">'Original Age values - Titanic'</span>)</div><div class="line">axis2.set_title(<span class="string">'New Age values - Titanic'</span>)</div><div class="line"></div><div class="line"><span class="comment"># axis3.set_title('Original Age values - Test')</span></div><div class="line"><span class="comment"># axis4.set_title('New Age values - Test')</span></div><div class="line"></div><div class="line"><span class="comment"># get average, std, and number of NaN values in titanic_df</span></div><div class="line"><span class="comment"># 训练集中年龄的统计量的获取</span></div><div class="line">average_age_titanic   = titanic_df[<span class="string">"Age"</span>].mean()</div><div class="line">std_age_titanic       = titanic_df[<span class="string">"Age"</span>].std()</div><div class="line">count_nan_age_titanic = titanic_df[<span class="string">"Age"</span>].isnull().sum()</div><div class="line"></div><div class="line"><span class="comment"># get average, std, and number of NaN values in test_df</span></div><div class="line"><span class="comment"># 测试集中年龄的统计量的获取</span></div><div class="line"></div><div class="line">average_age_test   = test_df[<span class="string">"Age"</span>].mean()</div><div class="line">std_age_test       = test_df[<span class="string">"Age"</span>].std()</div><div class="line">count_nan_age_test = test_df[<span class="string">"Age"</span>].isnull().sum()</div><div class="line"></div><div class="line"><span class="comment"># generate random numbers between (mean - std) &amp; (mean + std)</span></div><div class="line"><span class="comment"># 随机获取在均值的一倍标准差内的数据，用于填充大量的数值型缺失值</span></div><div class="line">rand_1 = np.random.randint(average_age_titanic - std_age_titanic, average_age_titanic + std_age_titanic, size = count_nan_age_titanic)</div><div class="line">rand_2 = np.random.randint(average_age_test - std_age_test, average_age_test + std_age_test, size = count_nan_age_test)</div><div class="line"></div><div class="line"><span class="comment"># plot original Age values</span></div><div class="line"><span class="comment"># <span class="doctag">NOTE:</span> drop all null values, and convert to int</span></div><div class="line">titanic_df[<span class="string">'Age'</span>].dropna().astype(int).hist(bins=<span class="number">70</span>, ax=axis1)</div><div class="line"><span class="comment"># test_df['Age'].dropna().astype(int).hist(bins=70, ax=axis1)</span></div><div class="line"></div><div class="line"><span class="comment"># fill NaN values in Age column with random values generated</span></div><div class="line"><span class="comment"># 经典的方法，通过布尔值过滤得到想要的“条件数据”</span></div><div class="line">titanic_df[<span class="string">"Age"</span>][np.isnan(titanic_df[<span class="string">"Age"</span>])] = rand_1</div><div class="line">test_df[<span class="string">"Age"</span>][np.isnan(test_df[<span class="string">"Age"</span>])] = rand_2</div><div class="line"></div><div class="line"><span class="comment"># convert from float to int</span></div><div class="line">titanic_df[<span class="string">'Age'</span>] = titanic_df[<span class="string">'Age'</span>].astype(int)</div><div class="line">test_df[<span class="string">'Age'</span>]    = test_df[<span class="string">'Age'</span>].astype(int)</div><div class="line"></div><div class="line"><span class="comment"># plot new Age Values</span></div><div class="line">titanic_df[<span class="string">'Age'</span>].hist(bins=<span class="number">70</span>, ax=axis2)</div><div class="line"><span class="comment"># test_df['Age'].hist(bins=70, ax=axis4)</span></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/9.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># .... continue with plot Age column</span></div><div class="line"></div><div class="line"><span class="comment"># peaks for survived/not survived passengers by their age</span></div><div class="line">facet = sns.FacetGrid(titanic_df, hue=<span class="string">"Survived"</span>,aspect=<span class="number">4</span>)  <span class="comment"># aspect=4 长宽比4:1</span></div><div class="line">facet.map(sns.kdeplot,<span class="string">'Age'</span>,shade= <span class="keyword">True</span>)</div><div class="line">facet.set(xlim=(<span class="number">0</span>, titanic_df[<span class="string">'Age'</span>].max()))</div><div class="line">facet.add_legend()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/10.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># average survived passengers by age</span></div><div class="line">fig, axis1 = plt.subplots(<span class="number">1</span>,<span class="number">1</span>,figsize=(<span class="number">18</span>,<span class="number">4</span>))</div><div class="line">average_age = titanic_df[[<span class="string">"Age"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Age'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Age'</span>, y=<span class="string">'Survived'</span>, data=average_age)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/11.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Cabin</span></div><div class="line"><span class="comment"># It has a lot of NaN values, so it won't cause a remarkable impact on prediction</span></div><div class="line"><span class="comment"># 这里也是要学习的地方，对于含有大量缺失值，并且对预测无太大影响时，可以直接将其移除</span></div><div class="line">titanic_df.drop(<span class="string">"Cabin"</span>,axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop(<span class="string">"Cabin"</span>,axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 学习的地方，化繁为简，找到关注的重点为是否有家人，而不是具体的父母兄弟等</span></div><div class="line">titanic_df[<span class="string">'Family'</span>] =  titanic_df[<span class="string">"Parch"</span>] + titanic_df[<span class="string">"SibSp"</span>]</div><div class="line">titanic_df[<span class="string">'Family'</span>].loc[titanic_df[<span class="string">'Family'</span>] &gt; <span class="number">0</span>] = <span class="number">1</span></div><div class="line">titanic_df[<span class="string">'Family'</span>].loc[titanic_df[<span class="string">'Family'</span>] == <span class="number">0</span>] = <span class="number">0</span></div><div class="line"><span class="comment"># 测试集和训练集作相同处理</span></div><div class="line">test_df[<span class="string">'Family'</span>] =  test_df[<span class="string">"Parch"</span>] + test_df[<span class="string">"SibSp"</span>]</div><div class="line">test_df[<span class="string">'Family'</span>].loc[test_df[<span class="string">'Family'</span>] &gt; <span class="number">0</span>] = <span class="number">1</span></div><div class="line">test_df[<span class="string">'Family'</span>].loc[test_df[<span class="string">'Family'</span>] == <span class="number">0</span>] = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># drop Parch &amp; SibSp</span></div><div class="line">titanic_df = titanic_df.drop([<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>], axis=<span class="number">1</span>)</div><div class="line">test_df    = test_df.drop([<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>], axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># plot</span></div><div class="line">fig, (axis1,axis2) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,sharex=<span class="keyword">True</span>,figsize=(<span class="number">10</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Family',data=titanic_df,kind='count',ax=axis1)</span></div><div class="line">sns.countplot(x=<span class="string">'Family'</span>, data=titanic_df, order=[<span class="number">1</span>,<span class="number">0</span>], ax=axis1)</div><div class="line"></div><div class="line"><span class="comment"># average of survived for those who had/didn't have any family member</span></div><div class="line">family_perc = titanic_df[[<span class="string">"Family"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Family'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Family'</span>, y=<span class="string">'Survived'</span>, data=family_perc, order=[<span class="number">1</span>,<span class="number">0</span>], ax=axis2)</div><div class="line"></div><div class="line">axis1.set_xticklabels([<span class="string">"With Family"</span>,<span class="string">"Alone"</span>], rotation=<span class="number">0</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/12.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Sex</span></div><div class="line"></div><div class="line"><span class="comment"># As we see, children(age &lt; ~16) on aboard seem to have a high chances for Survival.</span></div><div class="line"><span class="comment"># So, we can classify passengers as males, females, and child</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_person</span><span class="params">(passenger)</span>:</span></div><div class="line">    age,sex = passenger</div><div class="line">    <span class="keyword">return</span> <span class="string">'child'</span> <span class="keyword">if</span> age &lt; <span class="number">16</span> <span class="keyword">else</span> sex</div><div class="line"></div><div class="line">titanic_df[<span class="string">'Person'</span>] = titanic_df[[<span class="string">'Age'</span>,<span class="string">'Sex'</span>]].apply(get_person,axis=<span class="number">1</span>)</div><div class="line">test_df[<span class="string">'Person'</span>]    = test_df[[<span class="string">'Age'</span>,<span class="string">'Sex'</span>]].apply(get_person,axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># No need to use Sex column since we created Person column</span></div><div class="line">titanic_df.drop([<span class="string">'Sex'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Sex'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># create dummy variables for Person column, &amp; drop Male as it has the lowest average of survived passengers</span></div><div class="line">person_dummies_titanic  = pd.get_dummies(titanic_df[<span class="string">'Person'</span>])</div><div class="line">person_dummies_titanic.columns = [<span class="string">'Child'</span>,<span class="string">'Female'</span>,<span class="string">'Male'</span>]</div><div class="line">person_dummies_titanic.drop([<span class="string">'Male'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">person_dummies_test  = pd.get_dummies(test_df[<span class="string">'Person'</span>])</div><div class="line">person_dummies_test.columns = [<span class="string">'Child'</span>,<span class="string">'Female'</span>,<span class="string">'Male'</span>]</div><div class="line">person_dummies_test.drop([<span class="string">'Male'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df = titanic_df.join(person_dummies_titanic)</div><div class="line">test_df    = test_df.join(person_dummies_test)</div><div class="line"></div><div class="line">fig, (axis1,axis2) = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Person',data=titanic_df,kind='count',ax=axis1)</span></div><div class="line">sns.countplot(x=<span class="string">'Person'</span>, data=titanic_df, ax=axis1)</div><div class="line"></div><div class="line"><span class="comment"># average of survived for each Person(male, female, or child)</span></div><div class="line">person_perc = titanic_df[[<span class="string">"Person"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'Person'</span>],as_index=<span class="keyword">False</span>).mean()</div><div class="line">sns.barplot(x=<span class="string">'Person'</span>, y=<span class="string">'Survived'</span>, data=person_perc, ax=axis2, order=[<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'child'</span>])</div><div class="line"></div><div class="line">titanic_df.drop([<span class="string">'Person'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Person'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/13.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Pclass</span></div><div class="line"></div><div class="line"><span class="comment"># sns.factorplot('Pclass',data=titanic_df,kind='count',order=[1,2,3])</span></div><div class="line">sns.factorplot(<span class="string">'Pclass'</span>,<span class="string">'Survived'</span>,order=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], data=titanic_df,size=<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># create dummy variables for Pclass column, &amp; drop 3rd class as it has the lowest average of survived passengers</span></div><div class="line">pclass_dummies_titanic  = pd.get_dummies(titanic_df[<span class="string">'Pclass'</span>])</div><div class="line">pclass_dummies_titanic.columns = [<span class="string">'Class_1'</span>,<span class="string">'Class_2'</span>,<span class="string">'Class_3'</span>]</div><div class="line">pclass_dummies_titanic.drop([<span class="string">'Class_3'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">pclass_dummies_test  = pd.get_dummies(test_df[<span class="string">'Pclass'</span>])</div><div class="line">pclass_dummies_test.columns = [<span class="string">'Class_1'</span>,<span class="string">'Class_2'</span>,<span class="string">'Class_3'</span>]</div><div class="line">pclass_dummies_test.drop([<span class="string">'Class_3'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df.drop([<span class="string">'Pclass'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line">test_df.drop([<span class="string">'Pclass'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">titanic_df = titanic_df.join(pclass_dummies_titanic)</div><div class="line">test_df    = test_df.join(pclass_dummies_test)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/14.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开始预测</span></div><div class="line">   <span class="comment"># define training and testing sets</span></div><div class="line"></div><div class="line">   X_train = titanic_df.drop(<span class="string">"Survived"</span>,axis=<span class="number">1</span>)</div><div class="line">   Y_train = titanic_df[<span class="string">"Survived"</span>]</div><div class="line">   X_test  = test_df.drop(<span class="string">"PassengerId"</span>,axis=<span class="number">1</span>).copy()</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Logistic Regression</span></div><div class="line"></div><div class="line">logreg = LogisticRegression()</div><div class="line">logreg.fit(X_train, Y_train)</div><div class="line">Y_pred = logreg.predict(X_test)</div><div class="line"></div><div class="line">logreg.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/15.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">svc = SVC()</div><div class="line">svc.fit(X_train, Y_train)</div><div class="line">Y_pred = svc.predict(X_test)</div><div class="line">svc.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/16.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Random Forests</span></div><div class="line"></div><div class="line">random_forest = RandomForestClassifier(n_estimators=<span class="number">100</span>)</div><div class="line"></div><div class="line">random_forest.fit(X_train, Y_train)</div><div class="line"></div><div class="line">Y_pred = random_forest.predict(X_test)</div><div class="line"></div><div class="line">random_forest.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/17.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">knn = KNeighborsClassifier(n_neighbors = <span class="number">3</span>)</div><div class="line"></div><div class="line">knn.fit(X_train, Y_train)</div><div class="line"></div><div class="line">Y_pred = knn.predict(X_test)</div><div class="line"></div><div class="line">knn.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/18.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Gaussian Naive Bayes</span></div><div class="line"></div><div class="line">gaussian = GaussianNB()</div><div class="line"></div><div class="line">gaussian.fit(X_train, Y_train)</div><div class="line"></div><div class="line">Y_pred = gaussian.predict(X_test)</div><div class="line"></div><div class="line">gaussian.score(X_train, Y_train)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/19.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># get Correlation Coefficient for each feature using Logistic Regression</span></div><div class="line">coeff_df = DataFrame(titanic_df.columns.delete(<span class="number">0</span>))</div><div class="line">coeff_df.columns = [<span class="string">'Features'</span>]</div><div class="line">coeff_df[<span class="string">"Coefficient Estimate"</span>] = pd.Series(logreg.coef_[<span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="comment"># preview</span></div><div class="line">coeff_df</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/20.png" alt=""></p>
<h5 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h5><p>关于pd.get_dummies 使用</p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/titanic/0.png" alt=""></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.kaggle.com/omarelgabry/titanic/a-journey-through-titanic" target="_blank" rel="external"><em>A journey through titanic</em></a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[进程池与线程池]]></title>
      <url>/2017/03/02/%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<p>一直不太明白进程与线程的具体实现，近日看到<a href="http://468636.kuaizhan.com/63/66/p4020482347ed56" target="_blank" rel="external">这篇文章</a>，算是有了进一步的了解。</p>
<h6 id="关于线程池："><a href="#关于线程池：" class="headerlink" title="关于线程池："></a>关于线程池：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</div><div class="line"></div><div class="line"><span class="comment"># 线程池</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_future_result</span><span class="params">(message)</span>:</span></div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> message</div><div class="line"></div><div class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">2</span>)  <span class="comment"># 创建一个最大可以容纳两个task的线程池</span></div><div class="line">future1 = pool.submit(return_future_result, (<span class="string">'hello'</span>))  <span class="comment"># 向线程池加一个task</span></div><div class="line">future2 = pool.submit(return_future_result, (<span class="string">'world'</span>))  <span class="comment"># 向线程池加一个task</span></div><div class="line">print(future1.done())  <span class="comment"># 判断task1是否结束[sleeping...故线程未完成]</span></div><div class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 主线程sleep 3s使得task2得以完成</span></div><div class="line">print(future2.done())  <span class="comment"># 判断task2是否结束</span></div><div class="line"><span class="comment"># 查看线程结果</span></div><div class="line">print(future1.result())</div><div class="line">print(future2.result())</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>False<br>True<br>hello<br>world</p>
</blockquote>
<p>可以看到当前程序(Pools.py)有一个进程，三个线程被开启：<br>UID PID PPID LWP C NLWP STIME TTY TIME CMD<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/1.png" alt=""></p>
<h6 id="关于进程池："><a href="#关于进程池：" class="headerlink" title="关于进程池："></a>关于进程池：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_future_result</span><span class="params">(message)</span>:</span></div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> message</div><div class="line"></div><div class="line">pool = ProcessPoolExecutor(max_workers=<span class="number">2</span>)  <span class="comment"># 创建一个最大可以容纳两个task的进程池</span></div><div class="line">future1 = pool.submit(return_future_result, (<span class="string">'hello'</span>))  <span class="comment"># 向进程池加一个task</span></div><div class="line">future2 = pool.submit(return_future_result, (<span class="string">'world'</span>))  <span class="comment"># 向进程池加一个task</span></div><div class="line">print(future1.done())  <span class="comment"># 判断task1是否结束</span></div><div class="line">time.sleep(<span class="number">3</span>)</div><div class="line">print(future2.done())  <span class="comment"># 判断task2是否结束</span></div><div class="line"><span class="comment"># 查看线程结果</span></div><div class="line">print(future1.result())</div><div class="line">print(future2.result())</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出；</p>
<blockquote>
<p>False<br>True<br>hello<br>world</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/2.png" alt=""></p>
<h6 id="关于任务的提交："><a href="#关于任务的提交：" class="headerlink" title="关于任务的提交："></a>关于任务的提交：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line">URLS = [<span class="string">'http://httpbin.org'</span>, <span class="string">' http://example.com/'</span>, <span class="string">'http://api.github.com/'</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">with</span> urllib.request.urlopen(url, timeout=<span class="number">60</span>) <span class="keyword">as</span> conn:</div><div class="line">        <span class="keyword">return</span> conn.read()</div><div class="line"></div><div class="line"><span class="comment"># 普通操作</span></div><div class="line"><span class="comment"># We can use a with statement t ensure threads are cleaned up promptly</span></div><div class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</div><div class="line">    <span class="comment"># Start the load operations and mark each future with its URL</span></div><div class="line">    future_to_url = &#123;executor.submit(load_url, url): url <span class="keyword">for</span> url <span class="keyword">in</span> URLS&#125;</div><div class="line">    print(future_to_url)  <span class="comment"># 打印当前任务状态</span></div><div class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(future_to_url):</div><div class="line">        url = future_to_url[future]</div><div class="line">        <span class="comment"># print(future_to_url)  # 打印当前任务状态</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            data = future.result()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line">            print(<span class="string">'%r generated an exception:%s'</span>%(url, exc))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'%r page is %d bytes'</span>%(url ,len(data)))</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/3.png" alt=""><br>这里我们通过submit提交了3个task，并且max_workers=3,所以在全部3个任务提交后，全是running状态， 如果max_workers大于3的话，同样都是running的。但是如果将max_workers设置的小于加入的任务数，那么</p>
<p>将会有任务进入pending状态。<br>如设置max_workers=2, 可以看到最后的任务为pending状态。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/4.png" alt=""></p>
<h6 id="Map的使用："><a href="#Map的使用：" class="headerlink" title="Map的使用："></a>Map的使用：</h6><p>[实现的任务和上面时一样的]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> concurrent.futures</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line">URLS = [<span class="string">'http://httpbin.org'</span>, <span class="string">' http://example.com/'</span>, <span class="string">'http://api.github.com/'</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">with</span> urllib.request.urlopen(url, timeout=<span class="number">60</span>) <span class="keyword">as</span> conn:</div><div class="line">        <span class="keyword">return</span> conn.read()</div><div class="line"></div><div class="line"><span class="comment"># Map</span></div><div class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</div><div class="line">    <span class="keyword">for</span> url, data <span class="keyword">in</span> zip(URLS, executor.map(load_url, URLS)):</div><div class="line">        print(<span class="string">'%r page os %d bytes'</span> % (url, len(data)))</div><div class="line"></div></pre></td></tr></table></figure></p>
<h6 id="wait-使用："><a href="#wait-使用：" class="headerlink" title="wait 使用："></a>wait 使用：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># wait</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait, as_completed</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_after_random_secs</span><span class="params">(num)</span>:</span></div><div class="line">    t = randint(<span class="number">1</span>, <span class="number">5</span>)</div><div class="line">    print(<span class="string">'I will sleep:'</span>, str(t), <span class="string">'s'</span>)</div><div class="line">    sleep(t)</div><div class="line">    <span class="keyword">return</span> <span class="string">'Return of &#123;&#125;'</span>.format(num)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    s = time.time()</div><div class="line">    pool = ThreadPoolExecutor(<span class="number">5</span>)</div><div class="line">    futures = []</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        futures.append(pool.submit(return_after_random_secs, (x)))</div><div class="line"></div><div class="line">    print(wait(futures))  <span class="comment"># 阻塞直到所有线程完成</span></div><div class="line">    <span class="comment"># print(wait(futures, timeout=None, return_when='FIRST_COMPLETED'))</span></div><div class="line">    e = time.time()</div><div class="line"></div><div class="line">    print(<span class="string">'total time--&gt;'</span>, e-s)</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/5.png" alt=""></p>
<p>可以看到，在子线程未完成时，程序一直被阻塞，最后所有的任务都完成时，程序结束运行。<br>如果将：</p>
<blockquote>
<p>print(wait(futures))</p>
</blockquote>
<p>改为：</p>
<blockquote>
<p>print(wait(futures, timeout=None, return_when=’FIRST_COMPLETED’))</p>
</blockquote>
<p>那么，在有一个线程完成时，程序就结束运行：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/threads/6.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Selenium爬取QQ空间说说信息]]></title>
      <url>/2017/03/02/Selenium%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4%E8%AF%B4%E8%AF%B4%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>知乎上看到<a href="https://zhuanlan.zhihu.com/p/25006226" target="_blank" rel="external">这篇文章</a>，就拿来改进运行下。</p>
<p>可能是因为不太会用Selenium，page_source在这里并不能获取到动态加载后的网页数据，所以只能用自带的一系列的find_element. 但是也是出现无法完全抓取的问题，这里就直接放上源码了，有些乱，凑活看看先… </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 屏幕截图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pic</span><span class="params">(pic_name)</span>:</span></div><div class="line">    data = driver.get_screenshot_as_png()</div><div class="line">    time.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">with</span> open(pic_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(data)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">savedata</span><span class="params">(qq, post_data)</span>:</span></div><div class="line">    <span class="comment"># try:</span></div><div class="line">    print(post_data)</div><div class="line">    sql = <span class="string">'INSERT INTO QQSpace(qq, postime, content, star, cmt)VALUES(%s,%s,%s,%s,%s)'</span></div><div class="line">    cursor.execute(sql, (qq, post_data[<span class="number">0</span>], post_data[<span class="number">1</span>], post_data[<span class="number">2</span>], post_data[<span class="number">3</span>]))</div><div class="line">    <span class="comment"># 提交事务</span></div><div class="line">    db.commit()</div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># except:</span></div><div class="line">    <span class="comment">#     print('Save fail...')</span></div><div class="line">    <span class="comment">#     pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">(qq)</span>:</span></div><div class="line">    print(<span class="string">'get data...'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        driver.switch_to.frame(<span class="string">'app_canvas_frame'</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    content = driver.find_elements_by_css_selector(<span class="string">'.content'</span>)  <span class="comment"># div.bd pre.content</span></div><div class="line">    stime = driver.find_elements_by_css_selector(<span class="string">'.c_tx.c_tx3.goDetail'</span>)  <span class="comment"># div.info span.c_tx3 a.c_tx.c_tx3.goDetail</span></div><div class="line">    ft = driver.find_elements_by_class_name(<span class="string">'ft'</span>)</div><div class="line">    print(len(content), len(stime), len(ft))</div><div class="line"></div><div class="line">    <span class="keyword">for</span> con, sti, ft_data <span class="keyword">in</span> zip(content, stime, ft):</div><div class="line">        <span class="comment"># print(ft_data)</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            ft_data = ft_data.text.replace(<span class="string">')'</span>, <span class="string">'('</span>).split(<span class="string">'('</span>)</div><div class="line">            <span class="keyword">if</span> <span class="string">'赞'</span> <span class="keyword">in</span> ft_data[<span class="number">0</span>]:</div><div class="line">                <span class="keyword">if</span> len(ft_data) == <span class="number">3</span>:</div><div class="line">                    star = ft_data[<span class="number">1</span>]</div><div class="line">                    cmt = <span class="keyword">None</span></div><div class="line">                <span class="keyword">elif</span> len(ft_data) == <span class="number">5</span>:</div><div class="line">                    star = ft_data[<span class="number">1</span>]</div><div class="line">                    cmt = ft_data[<span class="number">3</span>]</div><div class="line"></div><div class="line">                <span class="keyword">elif</span> len(ft_data) == <span class="number">7</span>:</div><div class="line">                    star = ft_data[<span class="number">1</span>]</div><div class="line">                    cmt = ft_data[<span class="number">3</span>]</div><div class="line"></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    star = <span class="keyword">None</span></div><div class="line">                    cmt = <span class="keyword">None</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                star = <span class="keyword">None</span></div><div class="line">                cmt = ft_data[<span class="number">1</span>]</div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            star = <span class="keyword">None</span></div><div class="line">            cmt = <span class="keyword">None</span></div><div class="line"></div><div class="line">        post_data = [sti.text, con.text, star, cmt]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            savedata(qq, post_data)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 登录QQ space</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shuoshuo</span><span class="params">(qq)</span>:</span></div><div class="line">    driver.get(<span class="string">'https://user.qzone.qq.com/&#123;&#125;/311'</span>.format(qq))</div><div class="line">    time.sleep(<span class="number">7</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># get_pic('pre_login.png')</span></div><div class="line">        driver.find_element_by_id(<span class="string">'login_div'</span>)</div><div class="line">        a = <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'can not find login_div'</span>)</div><div class="line">        a = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> a == <span class="keyword">True</span>:</div><div class="line">        print(<span class="string">'logining...'</span>)</div><div class="line">        driver.switch_to.frame(<span class="string">'login_frame'</span>)</div><div class="line">        driver.find_element_by_id(<span class="string">'switcher_plogin'</span>).click()</div><div class="line">        driver.find_element_by_id(<span class="string">'u'</span>).clear()  <span class="comment"># 选择用户名框</span></div><div class="line">        driver.find_element_by_id(<span class="string">'u'</span>).send_keys(<span class="string">'QQ号'</span>)</div><div class="line">        driver.find_element_by_id(<span class="string">'p'</span>).clear()</div><div class="line">        driver.find_element_by_id(<span class="string">'p'</span>).send_keys(<span class="string">'QQ密码'</span>)</div><div class="line">        driver.find_element_by_id(<span class="string">'login_button'</span>).click()</div><div class="line"></div><div class="line">        <span class="comment"># get_pic('aft_input.png')</span></div><div class="line">        print(<span class="string">'ok!'</span>)</div><div class="line"></div><div class="line">    driver.implicitly_wait(<span class="number">5</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        driver.find_element_by_id(<span class="string">'QM_OwnerInfo_Icon'</span>)</div><div class="line">        b = <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'can not find QM...'</span>)</div><div class="line">        b = <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> b == <span class="keyword">True</span>:</div><div class="line">        time.sleep(<span class="number">7</span>)</div><div class="line">        getdata(qq)</div><div class="line">        continue_grap = <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> continue_grap == <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                driver.find_element_by_link_text(<span class="string">'下一页'</span>).click()</div><div class="line">                <span class="comment"># print('sleeping...')</span></div><div class="line">                time.sleep(<span class="number">7</span>)</div><div class="line">                getdata(qq)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="comment"># 打开数据库，之后在具体调用后close</span></div><div class="line">    db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"数据库密码"</span>, <span class="string">"SpiderData"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = db.cursor()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># 使用selenium</span></div><div class="line">    dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">    dcap[<span class="string">"phantomjs.page.settings.userAgent"</span>] = (</div><div class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0"</span>)</div><div class="line">    driver = webdriver.PhantomJS(<span class="string">'/home/shen/Downloads/phantomjs-2.1.1-linux-x86_64/bin/phantomjs'</span>,</div><div class="line">                                 desired_capabilities=dcap)</div><div class="line">    driver.maximize_window()</div><div class="line"></div><div class="line">    get_shuoshuo(<span class="string">'要抓取的好友QQ号'</span>)</div><div class="line"></div><div class="line">    driver.close()</div><div class="line">    driver.quit()</div><div class="line"></div><div class="line">    db.close() </div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/Screenshot-from-2017-01-26-22-56-33.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
            <tag> Selenium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle——GUNS-DEATHS[Python]]]></title>
      <url>/2017/03/02/Kaggle%E2%80%94%E2%80%94GUNS-DEATHS-Python/</url>
      <content type="html"><![CDATA[<p>Kaggle案例二——Guns Deaths——Python分析</p>
<p>数据集的理解：</p>
<blockquote>
<p>Our data has almost 101,000 rows (gun death incidents) and 10 columns (categories).<br>Here’s an explanation of each column:<br>    this is an identifier column, which contains the row number. It’s common in CSV files to include a unique identifier for each row, but we can ignore it in this analysis.<br>    year: the year in which the fatality occurred.<br>    month: the month in which the fatality occurred.<br>    intent: the intent of the perpetrator of the crime. This can be Suicide, Accidental, NA, Homicide, or Undetermined.<br>    police: whether a police officer was involved with the shooting. Either 0 (false) or 1 (true).<br>    sex: the gender of the victim. Either M or F.<br>    age: the age of the victim.<br>    race: the race of the victim. Either Asian/Pacific Islander, Native American/Native Alaskan, Black, Hispanic, or White.<br>    hispanic: a code indicating the Hispanic origin of the victim.<br>    place: where the shooting occurred. Has several categories, which you’re encouraged to explore on your own.<br>    education: educational status of the victim. Can be one of the following:<br>        1: Less than High School<br>        2: Graduated from High School or equivalent<br>        3: Some College<br>        4: At least graduated from College<br>        5: Not available<br>It’s good practice to get to know our data set before begining to analyze. </p>
</blockquote>
<h6 id="导入数据，清洗并熟悉数据"><a href="#导入数据，清洗并熟悉数据" class="headerlink" title="导入数据，清洗并熟悉数据"></a>导入数据，清洗并熟悉数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">1. Importing, cleaning and getting familiar with the data</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="comment"># 导入数据，[为了可读性和易操作性]简单处理，预览数据</span></div><div class="line">guns = pd.read_csv(<span class="string">'guns.csv'</span>, index_col = <span class="number">0</span>)</div><div class="line">print(guns.shape)</div><div class="line">print(guns.head())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/1.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">guns.index.name = <span class="string">'Index'</span></div><div class="line"><span class="comment"># for readability and concistency - capitalizing column names</span></div><div class="line">guns.columns = map(str.capitalize, guns.columns)</div><div class="line">print(guns.head())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/2.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 总体观察数据</span></div><div class="line">print(guns.info())  <span class="comment"># 总体信息</span></div><div class="line">print(guns.dtypes)  <span class="comment"># 变量类型</span></div><div class="line"><span class="comment"># print(guns.describe)  # 数值型变量的一些分=分位数等信息</span></div><div class="line"></div><div class="line"><span class="comment"># 缺失值的处理[这里开始竟然忘了。。。]</span></div><div class="line">print(guns.notnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># In order to see the percentage of valid data:</span></div><div class="line">print(guns.notnull().sum() * <span class="number">100.0</span>/guns.shape[<span class="number">0</span>])</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/3.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Organizing the data by a column value: first by the year, then by month:</span></div><div class="line">guns.sort_values([<span class="string">'Year'</span>, <span class="string">'Month'</span>], inplace=<span class="keyword">True</span>)</div><div class="line">print(guns.head(<span class="number">10</span>))</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/4.png" alt=""></p>
<h6 id="探索并分析数据"><a href="#探索并分析数据" class="headerlink" title="探索并分析数据"></a>探索并分析数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">2. Exploring and analyzing the data [这里我们关注的时Intent]</div><div class="line">'''</div><div class="line">print(guns.Intent.value_counts(ascending=<span class="keyword">False</span>))</div><div class="line"><span class="comment"># Looking at the normalized values makes the picture clearer.</span></div><div class="line"><span class="comment"># Note: 'normalize=False' excludes the 'NaN's where here it includes them</span></div><div class="line">print(guns.Intent.value_counts(ascending=<span class="keyword">False</span>, dropna=<span class="keyword">False</span>, normalize=<span class="keyword">True</span>))</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/5.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/55.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 数值型变量的[分位数]描述</span></div><div class="line">cols = [<span class="string">'Education'</span>, <span class="string">'Age'</span>]</div><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</div><div class="line">    print(col, <span class="string">':'</span>)</div><div class="line">    print(guns[col][guns[col].notnull()].describe())</div><div class="line">    print(<span class="string">'-'</span>*<span class="number">20</span> + <span class="string">'\n'</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/6.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 更多分位数的数据</span></div><div class="line">percentiles = np.arange(<span class="number">0.1</span>, <span class="number">1.1</span>, <span class="number">0.1</span>)</div><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> cols:</div><div class="line">    print(col, <span class="string">':'</span>)</div><div class="line">    print(guns[col][guns[col].notnull()].describe(percentiles=percentiles))</div><div class="line">    print(<span class="string">'-'</span>*<span class="number">20</span>, <span class="string">'\n'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/7.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Education</span></div><div class="line"><span class="comment"># Age &lt; 16 数据[关于教育]的处理</span></div><div class="line">print(guns[guns[<span class="string">'Age'</span>] &lt; <span class="number">16</span>].shape)</div><div class="line">print(guns[guns[<span class="string">'Age'</span>] &lt; <span class="number">16</span>].head())</div><div class="line"></div><div class="line">index_temp = guns[(guns[<span class="string">'Age'</span>] &lt; <span class="number">16</span>) &amp; ((guns[<span class="string">'Education'</span>].isnull()) | (guns[<span class="string">'Education'</span>] == <span class="number">5.0</span>))].index</div><div class="line">guns.loc[index_temp, <span class="string">'Education'</span>] = <span class="number">1.0</span></div><div class="line">print(guns[guns.Education.isnull()].shape)</div><div class="line"></div><div class="line">index_temp = guns[guns.Age &lt; <span class="number">5</span>].index</div><div class="line">guns.loc[index_temp, <span class="string">'Education'</span>] = <span class="number">0.0</span></div><div class="line">print(guns[<span class="string">'Education'</span>][guns.Education.notnull()].describe())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/8.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Let's get rid of rows that has '5.0' (Not available) and NaN in the 'education' column:</span></div><div class="line"><span class="comment"># subset = can include a list of column names</span></div><div class="line">guns.dropna(inplace=<span class="keyword">True</span>)</div><div class="line">guns = guns[guns.Education != <span class="number">5.0</span>]</div><div class="line"></div><div class="line">print(guns.Education.value_counts())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/9.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> guns.columns:</div><div class="line">    <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'Age'</span>, <span class="string">''</span>]:</div><div class="line">        print(guns[col].unique())</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/10.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 一些实用的处理技巧</span></div><div class="line"><span class="comment"># Year Month</span></div><div class="line"><span class="comment"># evaluating the percentage change between years</span></div><div class="line">n2012 = guns[<span class="number">2012</span> == guns[<span class="string">'Year'</span>]].shape[<span class="number">0</span>]</div><div class="line">(guns.Year.value_counts(sort=<span class="keyword">False</span>) - n2012) * <span class="number">100.</span>/ n2012    </div><div class="line"></div><div class="line"></div><div class="line">nexpected_month = guns.shape[<span class="number">0</span>]/<span class="number">12.</span></div><div class="line">(guns.Month.value_counts(sort=<span class="keyword">True</span>) - nexpected_month) * <span class="number">100.</span>/nexpected_month        </div><div class="line"></div><div class="line">guns.sort_values([<span class="string">'Year'</span>, <span class="string">'Month'</span>], inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/11.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 上面简单通过月份看死亡率不太严谨，接下来考虑闰年和特殊月份天数问题</span></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="comment"># The purpose of *10000 and the *100 are to convert 2012, 01, 01 into 20120101 for readability</span></div><div class="line">guns[<span class="string">'Date'</span>] = pd.to_datetime((guns.Year * <span class="number">10000</span> + guns.Month * <span class="number">100</span> + <span class="number">1</span>).apply(str),format=<span class="string">'%Y%m%d'</span>)</div><div class="line">guns.dtypes.tail(<span class="number">1</span>)</div><div class="line"><span class="comment"># 删除无用的变量，简化数据集[这里Date的引入与在Titanic上对于family的处理是一样的]</span></div><div class="line"><span class="keyword">del</span> guns[<span class="string">'Year'</span>]</div><div class="line"><span class="keyword">del</span> guns[<span class="string">'Month'</span>]</div><div class="line"></div><div class="line"><span class="keyword">import</span> calendar</div><div class="line">monthly_rates = pd.DataFrame(guns.groupby(<span class="string">'Date'</span>).size(), columns=[<span class="string">'Count'</span>])</div><div class="line">monthly_rates.index.to_datetime</div><div class="line">print(monthly_rates.index.dtype)</div><div class="line">print(monthly_rates.shape)</div><div class="line">monthly_rates.head()</div><div class="line"></div><div class="line"><span class="comment"># 计算新列 Days_per_month</span></div><div class="line">days_per_month = []</div><div class="line"><span class="keyword">for</span> val <span class="keyword">in</span> monthly_rates.index:</div><div class="line">    days_per_month.append(calendar.monthrange(val.year, val.month)[<span class="number">1</span>])</div><div class="line">monthly_rates[<span class="string">'Days_per_month'</span>] = days_per_month</div><div class="line">monthly_rates.head()</div><div class="line"></div><div class="line"><span class="comment"># 'Averahe_per_day' 代表各年各月份，平均每天死于gun的人数</span></div><div class="line">monthly_rates[<span class="string">'Average_per_day'</span>] = monthly_rates[<span class="string">'Count'</span>]*<span class="number">1.</span>/monthly_rates[<span class="string">'Days_per_month'</span>]</div><div class="line">print(monthly_rates.shape)</div><div class="line">monthly_rates.tail()</div><div class="line"></div><div class="line"><span class="comment"># 求三年的平均值</span></div><div class="line">month_rate_dict = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</div><div class="line">    bool_temp = monthly_rates.index.month == i</div><div class="line">    month_average = (sum(monthly_rates.loc[bool_temp, <span class="string">'Average_per_day'</span>]))/<span class="number">3.</span></div><div class="line">    month_rate_dict[i] = month_average</div><div class="line"></div><div class="line">avg_month_rate = pd.DataFrame.from_dict(list(month_rate_dict.items()))</div><div class="line">avg_month_rate.columns = [<span class="string">'Month'</span>, <span class="string">'Value'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># calculating the expected cases for each day [+1. becuase 2012 was a leap year]</span></div><div class="line">nexpected_day = guns.shape[<span class="number">0</span>]/(<span class="number">365</span>*<span class="number">3</span> + <span class="number">1.</span>)</div><div class="line"></div><div class="line">avg_month_rate[<span class="string">'Percent_change'</span>] = (avg_month_rate.Value - nexpected_day) * <span class="number">100.</span>/ nexpected_day</div><div class="line">print(avg_month_rate.sort(<span class="string">'Percent_change'</span>))</div><div class="line"></div><div class="line"><span class="comment"># Police</span></div><div class="line"><span class="comment"># 删除无用列[数据无有效的信息]</span></div><div class="line">print(<span class="number">100</span> * guns.Police.value_counts(normalize=<span class="keyword">True</span>))</div><div class="line"><span class="keyword">del</span> guns[<span class="string">'Police'</span>]</div><div class="line">print(guns.shape)</div><div class="line">print(guns.head())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/12.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Race</span></div><div class="line">print(guns.Race.value_counts(sort=<span class="keyword">True</span>, normalize=<span class="keyword">True</span>))</div><div class="line"><span class="comment"># Question: Which race appears the most in the df and which appears the least?</span></div><div class="line"><span class="string">'''</span></div><div class="line">这里的细节值得注意，我们不能因为看到White的case比如较多就认为死于gun的人当中White就最多，</div><div class="line">正如答案所言，在不知道总体人种比例时，我们不能妄下论断</div><div class="line">'''</div><div class="line"><span class="comment"># Answer: We can not conclude anything by those numbers unless we take in account the distribution of races in the US population.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 一些技巧</span></div><div class="line"><span class="comment"># About Sample</span></div><div class="line"><span class="comment"># a sample of about 10% of the data may look like this:</span></div><div class="line">sample_guns = guns.sample(n=<span class="number">10000</span>)</div><div class="line">sample_guns.head()</div><div class="line"></div><div class="line"><span class="comment"># How do you define a categorical columns/pd.Series? </span></div><div class="line"><span class="comment"># E.g please order guns['intent'] by this order: 'Homicide','Suicide','Accidental','Undetermined'</span></div><div class="line"></div><div class="line">list_ordered = [<span class="string">'Homicide'</span>,<span class="string">'Suicide'</span>,<span class="string">'Accidental'</span>,<span class="string">'Undetermined'</span>]</div><div class="line">guns[<span class="string">'Intent'</span>] = guns[<span class="string">'Intent'</span>].astype(<span class="string">'category'</span>)</div><div class="line">guns.Intent.cat.set_categories(list_ordered, inplace=<span class="keyword">True</span>)</div><div class="line">guns.sort_values([<span class="string">'Intent'</span>]).head()</div><div class="line"></div><div class="line"><span class="comment"># 这里Undeterminded对预测Intent无太大作用，删除</span></div><div class="line">guns = guns[guns.Intent != <span class="string">'Undetermined'</span>]</div><div class="line">guns.Intent.value_counts()</div><div class="line"></div><div class="line"><span class="comment"># removing last value in list ordered - which is 'Undetermined'</span></div><div class="line">list_ordered = list_ordered[:<span class="number">-1</span>]</div><div class="line">guns.Intent.cat.set_categories(list_ordered, inplace=<span class="keyword">True</span>)</div><div class="line">guns.Intent.value_counts()</div><div class="line"></div><div class="line"><span class="comment"># **Question:** Given a Series which contains strings, how do you find the length of each of the strings?</span></div><div class="line">guns.Race.str.len().unique()</div><div class="line"></div><div class="line"><span class="comment"># **Question:** For the same series, how do you know if any given entry contains a string segment. E.g: Which entries int the 'intent' column contain the segment 'cide'?</span></div><div class="line">guns.Intent.str.contains(<span class="string">'cide'</span>).sum()</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h6><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/13.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/14.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/15.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/16.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/17.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/18.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/19.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/20.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/21.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/kaggle/guns/22.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">3. Visualizing the data </div><div class="line">'''</div><div class="line"><span class="comment"># Line Charts / Time analysis</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line">sns.set(style=<span class="string">'white'</span>, color_codes=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2012</span></div><div class="line">plt.plot(monthly_rates.index[:<span class="number">12</span>], monthly_rates[<span class="string">'Count'</span>][:<span class="number">12</span>], </div><div class="line">         linestyle=<span class="string">'--'</span>, linewidth=<span class="number">3.</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># notice the y column in the previous plot begins at 2200; </span></div><div class="line"></div><div class="line"><span class="comment"># Let's look at the real picture from 0 </span></div><div class="line"></div><div class="line">plt.plot(monthly_rates.index[:<span class="number">12</span>], monthly_rates[<span class="string">'Count'</span>][:<span class="number">12</span>],</div><div class="line"></div><div class="line">        linestyle=<span class="string">'--'</span>, linewidth=<span class="number">3.</span>, alpha=<span class="number">0.6</span>)</div><div class="line"></div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=<span class="number">3500</span>)</div><div class="line"></div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line"></div><div class="line">plt.xlabel(<span class="string">'Month'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.ylabel(<span class="string">'Gun Deaths\ncount'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Monthly Gun Death Count in the US, 2012'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line">sns.despine()</div><div class="line"></div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># years 2012 - 2014</span></div><div class="line"></div><div class="line"><span class="comment"># Changing linestyle to a constant line = seeing intersections more clearly</span></div><div class="line"></div><div class="line">fig = plt.figure()</div><div class="line"></div><div class="line">plt.plot(monthly_rates.index.month[<span class="number">0</span>:<span class="number">12</span>], monthly_rates[<span class="string">'Count'</span>][<span class="number">0</span>:<span class="number">12</span>], label=<span class="string">'2012'</span>,</div><div class="line"></div><div class="line">        linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.8</span>)</div><div class="line"></div><div class="line">plt.plot(monthly_rates.index.month[<span class="number">12</span>:<span class="number">24</span>], monthly_rates[<span class="string">'Count'</span>][<span class="number">12</span>:<span class="number">24</span>], label=<span class="string">'2013'</span>,</div><div class="line"></div><div class="line">        linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.8</span>, color=<span class="string">'r'</span>)</div><div class="line"></div><div class="line">plt.plot(monthly_rates.index.month[<span class="number">24</span>:<span class="number">36</span>], monthly_rates[<span class="string">'Count'</span>][<span class="number">24</span>:<span class="number">36</span>], label=<span class="string">'2014'</span>,</div><div class="line"></div><div class="line">        linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.8</span>, color=<span class="string">'g'</span>)</div><div class="line"></div><div class="line">plt.xlim(xmin=<span class="number">1</span>, xmax=<span class="number">12</span>)</div><div class="line"></div><div class="line">plt.ylim(ymax=max(monthly_rates[<span class="string">'Count'</span>])+<span class="number">100</span>)</div><div class="line"></div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line"></div><div class="line">plt.xticks(np.arange(<span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>))</div><div class="line"></div><div class="line">plt.legend(loc=<span class="string">'upper left'</span>, frameon=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">plt.xlabel(<span class="string">'Month'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.ylabel(<span class="string">'Gun Death\nCount'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Monthly Gun Death Count in the US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line">sns.despine()</div><div class="line"></div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># From zero</span></div><div class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</div><div class="line"></div><div class="line">colors = [<span class="string">'b'</span>, <span class="string">'r'</span>, <span class="string">'g'</span>]</div><div class="line">labels = [<span class="string">'2012'</span>, <span class="string">'2013'</span>, <span class="string">'2014'</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(labels)):</div><div class="line">    start_index = i*<span class="number">12</span></div><div class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></div><div class="line">    subset = monthly_rates[start_index:end_index]</div><div class="line">    plt.plot(subset.index.month, subset[<span class="string">'Count'</span>], color=colors[i], label=labels[i],</div><div class="line">            linestyle=<span class="string">'-'</span>, linewidth=<span class="number">2.</span>, alpha=<span class="number">0.6</span>)</div><div class="line"></div><div class="line">plt.xlim(xmin=<span class="number">1</span>, xmax=<span class="number">12</span>)</div><div class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=max(monthly_rates[<span class="string">'Count'</span>])+<span class="number">100</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.xticks(np.arange(<span class="number">1</span>, <span class="number">13</span>, <span class="number">1</span>))</div><div class="line">plt.legend(loc=<span class="string">'center right'</span>, frameon=<span class="keyword">False</span>)</div><div class="line">plt.xlabel(<span class="string">'Month'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.ylabel(<span class="string">'Number of Gun Death Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.title(<span class="string">'Monthly Gun Death Count in the US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Bar plot</span></div><div class="line">intent_sex = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Sex'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Sex'</span>)</div><div class="line">ax = intent_sex.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, alpha=<span class="number">0.7</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.xticks(rotation=<span class="number">0</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax.legend(labels=[<span class="string">'Female'</span>, <span class="string">'Male'</span>], frameon=<span class="keyword">False</span>, loc=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Gender distribution\nGun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 一个不太好的图</span></div><div class="line">intent_edu = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Education'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Education'</span>)</div><div class="line"><span class="comment"># creating a range of 5 colors - from light to dark</span></div><div class="line">edu_legend_labels = [<span class="string">'Less than\nElementry school'</span>,<span class="string">'Less than \nHigh School'</span>, <span class="string">'Graduated from\nHigh School\nor equivalent'</span>, </div><div class="line">                 <span class="string">'Some College'</span>, <span class="string">'At least\ngraduated\nfrom College'</span>]</div><div class="line">colors = plt.cm.GnBu(np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>))</div><div class="line">ax = intent_edu.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, color=colors, width=<span class="number">0.5</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.xticks(rotation=<span class="number">0</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax.legend(edu_legend_labels, ncol=<span class="number">1</span>, frameon=<span class="keyword">False</span>, prop=&#123;<span class="string">'size'</span>:<span class="number">10</span>&#125;, loc=<span class="number">0</span>)</div><div class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=<span class="number">90000</span>)</div><div class="line">plt.title(<span class="string">'Education distribution\n in Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment"># 上图略显拥挤，我们用下面的水平图的进行改进</span></div><div class="line">intent_edu = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Education'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Education'</span>)</div><div class="line">ax = intent_edu.plot(kind=<span class="string">'barh'</span>, figsize=(<span class="number">15</span>,<span class="number">6</span>), stacked=<span class="keyword">True</span>, color=colors, alpha=<span class="number">0.6</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Count'</span>, fontsize=<span class="number">20</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Intent'</span>, fontsize=<span class="number">20</span>)</div><div class="line">ax.legend(edu_legend_labels, loc=<span class="number">0</span>,  prop=&#123;<span class="string">'size'</span>:<span class="number">12</span>&#125;, frameon=<span class="keyword">False</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>, xmax=<span class="number">80000</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Education distribution\nin Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">20</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># the percentage visual is more informative</span></div><div class="line">education = pd.crosstab(guns.Education, guns.Intent)</div><div class="line">education.div(education.sum(<span class="number">1</span>).astype(float), axis=<span class="number">0</span>).plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Intent Percentage by Education'</span>)</div><div class="line">plt.xlabel(<span class="string">'Education level'</span>)</div><div class="line">plt.ylabel(<span class="string">'Percentage'</span>)</div><div class="line">plt.legend(loc=<span class="string">'upper center'</span>, bbox_to_anchor=(<span class="number">1.1</span>,<span class="number">0.9</span>))</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Place</span></div><div class="line">intent_place = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Place'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Place'</span>)</div><div class="line"></div><div class="line">colors = plt.cm.GnBu(np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">20</span>))</div><div class="line"></div><div class="line">ax = intent_place.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>, color=colors, alpha=<span class="number">0.8</span>)</div><div class="line"></div><div class="line">ax.set_xlabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">ax.set_ylabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>, length=<span class="number">0</span>)</div><div class="line"></div><div class="line">ax.legend(loc=<span class="number">0</span>, ncol=<span class="number">2</span>, prop=&#123;<span class="string">'size'</span>:<span class="number">10</span>&#125;, frameon=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Location distribution\nin Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line">sns.despine()</div><div class="line"></div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 归类的思想</span></div><div class="line"><span class="comment">#These are too many categories and it's hard to arrive to conclusions</span></div><div class="line"><span class="comment"># let's merge 'street' with 'trade/service area' and the rest to 'Other'</span></div><div class="line">index_temp = guns[(guns[<span class="string">'Place'</span>] == <span class="string">'Trade/service area'</span>) | (guns.Place == <span class="string">'Industrial/construction'</span>)].index</div><div class="line">guns.loc[index_temp, <span class="string">'Place'</span>] = <span class="string">'Street'</span></div><div class="line">index_temp = guns[(guns[<span class="string">'Place'</span>] != <span class="string">'Street'</span>) &amp; (guns.Place != <span class="string">'Home'</span>)].index</div><div class="line">guns.loc[index_temp, <span class="string">'Place'</span>] = <span class="string">'Other'</span></div><div class="line"></div><div class="line">guns.Place.value_counts()</div><div class="line"></div><div class="line"><span class="comment"># Let's take another look:</span></div><div class="line">intent_place = guns.groupby([<span class="string">'Intent'</span>, <span class="string">'Place'</span>])[<span class="string">'Intent'</span>].count().unstack(<span class="string">'Place'</span>)</div><div class="line">colors = plt.cm.GnBu(np.linspace(<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>))</div><div class="line">ax = intent_place.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>, color=colors, alpha=<span class="number">0.6</span>)</div><div class="line">ax.set_xlabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax.set_ylabel(<span class="string">'Intent'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax.legend(loc=<span class="string">'upper right'</span>, prop=&#123;<span class="string">'size'</span>:<span class="number">10</span>&#125;, frameon=<span class="keyword">False</span>)</div><div class="line">plt.title(<span class="string">'Location distribution\nin Gun Deaths US: 2012-2014'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine()</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># the percentage visual is more informative</span></div><div class="line">place_died = pd.crosstab(guns.Place, guns.Intent)</div><div class="line">place_died.div(place_died.sum(<span class="number">1</span>).astype(float), axis=<span class="number">0</span>).plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Intent Percentage by Place'</span>)</div><div class="line">plt.xlabel(<span class="string">'Place of death'</span>)</div><div class="line">plt.ylabel(<span class="string">'Percentage'</span>)</div><div class="line">plt.legend(loc=<span class="string">'upper center'</span>, bbox_to_anchor=(<span class="number">1.1</span>,<span class="number">0.9</span>))</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"><span class="comment"># barplot of gender grouped by intent </span></div><div class="line">pd.crosstab(guns.Sex, guns.Intent).plot(kind=<span class="string">'bar'</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Gender Distribution by Intent'</span>)</div><div class="line">plt.xlabel(<span class="string">'Gender'</span>)</div><div class="line">plt.ylabel(<span class="string">'Frequency'</span>)</div><div class="line">plt.legend(loc=<span class="number">0</span>)</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># barplot of education grouped by intent </span></div><div class="line">pd.crosstab(guns.Education, guns.Intent).plot(kind=<span class="string">'bar'</span>, alpha=<span class="number">0.6</span>)</div><div class="line">plt.title(<span class="string">'Education Distribution by Intent'</span>)</div><div class="line">plt.xlabel(<span class="string">'Education'</span>)</div><div class="line">plt.ylabel(<span class="string">'Frequency'</span>)</div><div class="line">sns.despine()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Histograms</span></div><div class="line"></div><div class="line">age_freq = guns.Age.value_counts()</div><div class="line">sorted_age_freq = age_freq.sort_index()</div><div class="line">sorted_age_freq.head()</div><div class="line">plt.hist(guns[<span class="string">'Age'</span>], range=(<span class="number">0</span>,<span class="number">107</span>), alpha=<span class="number">0.4</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.ylabel(<span class="string">'Count'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.title(<span class="string">'Age distribution'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>, left=<span class="keyword">True</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Sex and Intent</span></div><div class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">4</span>))</div><div class="line">ax1 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</div><div class="line">ax2 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line">suicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Suicide'</span>]</div><div class="line">homicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Homicide'</span>]</div><div class="line"></div><div class="line">ax1.hist(suicide.Age, <span class="number">20</span>, alpha=<span class="number">0.4</span>)</div><div class="line">ax1.set_title(<span class="string">'Suicide gun deaths\nAge Distribution'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">ax2.hist(homicide.Age, <span class="number">20</span>, alpha=<span class="number">0.4</span>)</div><div class="line">ax2.set_title(<span class="string">'Homicide gun deaths\nAge Distribution'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">ax1.set_xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax2.set_xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax1.set_ylabel(<span class="string">'Frequency'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax2.set_ylabel(<span class="string">'Frequency'</span>, fontsize=<span class="number">14</span>)</div><div class="line">ax1.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax2.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">ax1.set_xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">ax2.set_xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>, left=<span class="keyword">True</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Cross</span></div><div class="line">g = sns.FacetGrid(suicide, col=<span class="string">'Sex'</span>)  </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.05</span>))</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide, col=<span class="string">'Sex'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.05</span>), xlabel=<span class="string">'Age'</span>, ylabel=<span class="string">'Percentage'</span>, )</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Race and age</span></div><div class="line">g = sns.FacetGrid(suicide, col=<span class="string">'Race'</span>)  </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="keyword">None</span>))</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Race comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide, col=<span class="string">'Race'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="keyword">None</span>))</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Race comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># in order to get in in the same order for better comparison:</span></div><div class="line">race_ordered = [<span class="string">'Black'</span>, <span class="string">'White'</span>, <span class="string">'Hispanic'</span>, <span class="string">'Asian/Pacific Islander'</span>, <span class="string">'Native American/Native Alaskan'</span>]</div><div class="line">guns[<span class="string">'Race'</span>] = guns[<span class="string">'Race'</span>].astype(<span class="string">'category'</span>)</div><div class="line">guns.Race.cat.set_categories(race_ordered, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">suicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Suicide'</span>]</div><div class="line">homicide = guns[guns[<span class="string">'Intent'</span>] == <span class="string">'Homicide'</span>]</div><div class="line"></div><div class="line">g = sns.FacetGrid(suicide, col=<span class="string">'Race'</span>)  </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Race comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide, col=<span class="string">'Race'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Race comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># we can ignore education = 0 - since these are all very young ages</span></div><div class="line">g = sns.FacetGrid(suicide[suicide.Education &gt; <span class="number">0</span>], col=<span class="string">'Education'</span>)</div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Suicide ages: Education comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">g = sns.FacetGrid(homicide[homicide.Education &gt; <span class="number">0</span>], col=<span class="string">'Education'</span>) </div><div class="line">g.map(sns.distplot, <span class="string">'Age'</span>)</div><div class="line">plt.subplots_adjust(top=<span class="number">0.8</span>)</div><div class="line">g.set(xlim=(<span class="number">0</span>, <span class="number">110</span>), ylim=(<span class="number">0</span>, <span class="number">0.06</span>), xlabel=<span class="string">'Age'</span>)</div><div class="line">g.fig.suptitle(<span class="string">'Homicide ages: Education comparison'</span>, fontsize=<span class="number">16</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># KDE-PLOT</span></div><div class="line"></div><div class="line"><span class="comment"># limit the x-axis</span></div><div class="line"><span class="comment"># Intent-Age</span></div><div class="line">sns.FacetGrid(guns, hue=<span class="string">'Intent'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>)</div><div class="line">plt.legend(loc=<span class="number">9</span>, frameon=<span class="keyword">False</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>)</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.ylabel(<span class="string">'Density'</span>, fontsize=<span class="number">14</span>)</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.title(<span class="string">'Age distribution\nHomicide vs. Suicide'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Sex-Age</span></div><div class="line">sns.FacetGrid(guns, hue=<span class="string">'Sex'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>).add_legend()</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Age distribution\nMale vs. Female'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Intent:Sex-Age</span></div><div class="line">sns.FacetGrid(suicide, hue=<span class="string">'Sex'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>).add_legend()</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.title(<span class="string">'Suicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.FacetGrid(homicide, hue=<span class="string">'Sex'</span>, size=<span class="number">4</span>).map(sns.kdeplot, <span class="string">'Age'</span>).add_legend()</div><div class="line">plt.xlabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">sns.despine(left=<span class="keyword">True</span>)</div><div class="line">plt.xlim(xmin=<span class="number">0</span>)</div><div class="line">plt.title(<span class="string">'Homicide ages: Gender comparison'</span>, fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Box plot</span></div><div class="line">fig, ax = plt.subplots()</div><div class="line">data_to_plot = [suicide.Age, homicide.Age]</div><div class="line">plt.xlim(xmin=<span class="number">0</span>, xmax=<span class="number">110</span>)</div><div class="line">plt.boxplot(data_to_plot)</div><div class="line">plt.ylim(ymin=<span class="number">-1</span>, ymax=<span class="number">110</span>)</div><div class="line">plt.xticks([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">'Suicide'</span>, <span class="string">'Homicide'</span>], fontsize=<span class="number">14</span>)</div><div class="line">plt.tick_params(axis=<span class="string">'both'</span>, which=<span class="string">'both'</span>,length=<span class="number">0</span>)</div><div class="line">plt.ylabel(<span class="string">'Age'</span>, fontsize=<span class="number">14</span>)</div><div class="line">plt.title(<span class="string">'Ages in Suicide vs. Homicide'</span>,</div><div class="line">          fontsize=<span class="number">14</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment">#sns.set(style='ticks')</span></div><div class="line">sns.boxplot(x=<span class="string">'Intent'</span>, y=<span class="string">'Age'</span>, hue=<span class="string">'Sex'</span>, data=guns, palette=<span class="string">'PRGn'</span>, width=<span class="number">0.6</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Violin-plot</span></div><div class="line">sns.violinplot(x=<span class="string">'Intent'</span>, y=<span class="string">'Age'</span>, hue=<span class="string">'Sex'</span>, split=<span class="keyword">True</span>, data=guns, size=<span class="number">4</span>, inner=<span class="string">'quart'</span>)</div><div class="line">sns.despine(bottom=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[QQ空间数据分析报告]]></title>
      <url>/2017/03/02/QQ%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h5 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h5><p> 之前呢，写了<a href="http://datahonor.com/2017/03/02/Selenium%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4%E8%AF%B4%E8%AF%B4%E4%BF%A1%E6%81%AF/#more">这个爬虫</a>，从QQ邮箱导出所有QQ联系人后，在本地电脑上放养几天，经过几次refuse，还是爬完了所有的好友的说说资料。数据量约60K+， 但是NA值较多。</p>
<h5 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h5><p>这里呢，简单作下分析。<br>第一步就是从MySQL中把数据以csv格式导出。</p>
<p>参考<a href="http://www.tech-recipes.com/rx/1475/save-mysql-query-results-into-a-text-or-csv-file/" target="_blank" rel="external">这里</a>。开始时，尝试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM QQSpace</div><div class="line">INTO OUTFILE &apos;/home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv&apos;</div><div class="line">FIELDS TERMINATED BY &apos;,&apos;</div><div class="line">ENCLOSED BY &apos;&quot;&apos;</div><div class="line">LINES TERMINATED BY &apos;\n&apos;</div></pre></td></tr></table></figure>
<p>出现权限问题：</p>
<blockquote>
<p>The MySQL server is running with the –secure-file-priv option so it cannot execute this statement</p>
</blockquote>
<p>参考<a href="http://stackoverflow.com/questions/32737478/how-should-i-tackle-secure-file-priv-in-mysql" target="_blank" rel="external">这里</a>解决：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ1.png" alt=""><br>之后先将文件导出到这个文件夹下，再复制到指定文件夹下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /var/lib/mysql-files/data.csv /home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv</div></pre></td></tr></table></figure><br>发现文件时锁定的，在给予权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 777 /home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv</div></pre></td></tr></table></figure></p>
<h5 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h5><p>至此，算是将数据从数据库导出，接下来开始用Python作分析</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 导入数据</span></div><div class="line">data = pd.read_csv(<span class="string">'/home/shen/PycharmProjects/MyPython/MySpider/QQ/data.csv'</span>, error_bad_lines=<span class="keyword">False</span>） <span class="comment"># drop bad lines</span></div><div class="line">data.columns = [<span class="string">'Qq'</span>, <span class="string">'Date'</span>, <span class="string">'Content'</span>, <span class="string">'Star'</span>, <span class="string">'Comment'</span>]</div><div class="line"><span class="comment"># 预览数据，检查有无编码等问题</span></div><div class="line">print(data.head())</div><div class="line">print(data.shape)</div><div class="line">print(data.dtypes)</div><div class="line"><span class="comment"># 因当中有过测试性的抓取，所以可能存在重复数据，这里先去重</span></div><div class="line">data = data.drop_duplicates()</div><div class="line"></div><div class="line"><span class="comment"># 查看缺失值</span></div><div class="line">print(data.isnull().sum())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ2.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ3.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ4.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ5.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 我们首先统一分析</span></div><div class="line">Date = data[<span class="string">'Date'</span>]</div><div class="line">Content = data[<span class="string">'Content'</span>]</div><div class="line">Star = data[<span class="string">'Star'</span>]</div><div class="line">Comment = data[<span class="string">'Comment'</span>]</div></pre></td></tr></table></figure>
<p>  日期的分析：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Date</span></div><div class="line">Date = pd.DataFrame(Date)</div><div class="line">print(Date.shape[<span class="number">0</span>])</div><div class="line">Date.isnull().sum()</div><div class="line">Date  = Date.dropna()</div><div class="line"><span class="comment"># 对日期的处理，定义统一格式的函数</span></div><div class="line"><span class="string">'''</span></div><div class="line">2016年09月09日</div><div class="line">2017年1月1日</div><div class="line">昨天18:03  这种格式一般为最近几天，数量较少，暂时忽略不去处理</div><div class="line">'''</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">datesplit</span><span class="params">(date)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        year = date.split(<span class="string">'年'</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line">        month = date.split(<span class="string">'年'</span>)[<span class="number">1</span>].split(<span class="string">'月'</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">if</span> ((int(month) &lt; <span class="number">10</span>) &amp; (<span class="string">'0'</span> <span class="keyword">not</span> <span class="keyword">in</span> month)):</div><div class="line">            month = <span class="string">'0'</span> + month</div><div class="line"></div><div class="line">        day = date.split(<span class="string">'年'</span>)[<span class="number">1</span>].split(<span class="string">'月'</span>)[<span class="number">1</span>].replace(<span class="string">'日'</span>, <span class="string">''</span>)</div><div class="line">        <span class="keyword">if</span> ((int(day) &lt; <span class="number">10</span>) &amp; (<span class="string">'0'</span> <span class="keyword">not</span> <span class="keyword">in</span> day)):</div><div class="line">            day = <span class="string">'0'</span> + day</div><div class="line">        sdate = int(int(year)*<span class="number">10000</span>+int(month)*<span class="number">100</span>+int(day))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="comment"># print(date)</span></div><div class="line">        <span class="keyword">return</span> [<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>]</div><div class="line">    <span class="keyword">return</span> [year, month, day, sdate]</div><div class="line"></div><div class="line"></div><div class="line">Date[<span class="string">'Year'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">0</span>])</div><div class="line">Date[<span class="string">'Month'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">1</span>])</div><div class="line">Date[<span class="string">'Day'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">2</span>])</div><div class="line">Date[<span class="string">'SDate'</span>] = Date[<span class="string">'Date'</span>].apply(datesplit).apply(<span class="keyword">lambda</span> x : x[<span class="number">3</span>])</div><div class="line"></div><div class="line">Date = Date.dropna()  <span class="comment"># 去除废弃时间格式的数据</span></div><div class="line">Date[<span class="string">'SDate'</span>] = Date[<span class="string">'SDate'</span>].astype(int)</div><div class="line">print(Date.head())</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ6.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Date[<span class="string">'Date'</span>] = pd.to_datetime(Date[<span class="string">'SDate'</span>], format=<span class="string">'%Y%m%d'</span>)  <span class="comment"># 格式化为标准时间格式</span></div><div class="line"><span class="keyword">del</span> Date[<span class="string">'SDate'</span>] <span class="comment"># 删掉无用列</span></div><div class="line">print(Date.head())</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ7.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Year,Month, Day</span></div><div class="line">sns.countplot(<span class="string">'Year'</span>, data=Date)</div><div class="line">plt.show()</div><div class="line"></div><div class="line">sns.countplot(<span class="string">'Month'</span>, data=Date)</div><div class="line">plt.show()</div><div class="line"></div><div class="line">sns.countplot(<span class="string">'Day'</span>, data=Date)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>从年份看，还是很平均的，因为2017时刚开始，数据本来就是很少的。至于2010前比较少，可能和大部分人喜欢删之前的说说有关.<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ8.png" alt=""></p>
<p>  月份上，7，8月比较高，猜测和之前在博客园写的超级课程表的分析时原因类似的，就是，7，8月为暑假，大家对学习关注较少，而游玩的较多，所以经常会发些旅游的动态。或是在家里闲得无聊，发说说也会比较多。</p>
<p>至于3,4,5月份数量较少[闰年二月天数少的影响在此可忽略]，就不太明白了，沉迷学习？ 🙂<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ9.png" alt=""><br>天数上看，大家还是“风雨无阻”的，31少也是必然的，毕竟1，3，5，7。。。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ10.png" alt=""></p>
<p>看了上面的图感觉都很平均的orz…<br>这里附上一张超级课程表分析时的一张图:<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ11.png" alt=""><br>与之比较，我们重新将月份整理为折线图：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 与超级课程表相比较</span></div><div class="line">plt.plot(Date.groupby(<span class="string">'Month'</span>).size(), linestyle=<span class="string">'-'</span>)</div><div class="line">plt.xlim(xmin=<span class="number">1</span>)</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Month'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ12.png" alt=""></p>
<p>貌似有点类似负相关的关系哦…<br>当我尝试进行年份[根据以上分析选取12-16年数据]比较时，发现了一个问题：没有出现预期的走势一致性.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 各个年份的比较[12-16]</span></div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].shape[<span class="number">0</span>], label=<span class="string">'2012'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].shape[<span class="number">0</span>], label=<span class="string">'2013'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].shape[<span class="number">0</span>], label=<span class="string">'2014'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].shape[<span class="number">0</span>], label=<span class="string">'2015'</span>) </div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].shape[<span class="number">0</span>], label=<span class="string">'2016'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ13.png" alt=""></p>
<p> 这张图有些乱，我们分开来做图，先做12-14年的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2012'</span>].shape[<span class="number">0</span>], label=<span class="string">'2012'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2013'</span>].shape[<span class="number">0</span>], label=<span class="string">'2013'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].shape[<span class="number">0</span>], label=<span class="string">'2014'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ14.png" alt=""><br>可以看到，12-14年走势基本上是一致的，但是14年出现较大的不同。<br>再作出14-16的图看下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2014'</span>].shape[<span class="number">0</span>], label=<span class="string">'2014'</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2015'</span>].shape[<span class="number">0</span>], label=<span class="string">'2015'</span>) </div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].groupby(<span class="string">'Month'</span>).size()/Date[Date[<span class="string">'Year'</span>]== <span class="string">'2016'</span>].shape[<span class="number">0</span>], label=<span class="string">'2016'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ15.png" alt=""><br>看到变化更大了，15尚且出现较大的峰值，到了16年，竟然变得近似平稳了…16年似乎欠我们个峰值…仔细想下，这可能和微信的崛起有关。查了下<a href="http://mt.sohu.com/20150723/n417406422.shtml" target="_blank" rel="external">资料</a>，14年春晚使用微信红包后微信开始迅速崛起，并于15年强势和QQ抗衡，并且微信发展速度明显超越QQ。所以16年QQ空间欠我们的峰值，可能跑去了微信朋友圈orz…<br>继续分析，我们来看下，一年中哪些特别的峰值。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一年中的特特殊的日子</span></div><div class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">6</span>))</div><div class="line">plt.subplot(<span class="number">131</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]==<span class="string">'2012'</span>].groupby(<span class="string">'Date'</span>).size())</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line"></div><div class="line">plt.subplot(<span class="number">132</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]==<span class="string">'2013'</span>].groupby(<span class="string">'Date'</span>).size())</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line"></div><div class="line">plt.subplot(<span class="number">133</span>)</div><div class="line">plt.plot(Date[Date[<span class="string">'Year'</span>]==<span class="string">'2014'</span>].groupby(<span class="string">'Date'</span>).size())</div><div class="line">plt.xticks(rotation=<span class="number">70</span>)</div><div class="line"></div><div class="line"></div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ16.png" alt=""></p>
<p>可以看到，2月初到中旬的情人节，暑假开始7月，开学季9月，国庆节10月都或多或少出现一些峰值[可能是爬虫漏爬的问题，这里不是特别明显]</p>
<p>接下来分析说说的文本内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态内容，文本分析</span></div><div class="line">Content = pd.DataFrame(Content.astype(str))</div><div class="line">Content.columns = [<span class="string">'content'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 说说长度</span></div><div class="line">Content[<span class="string">'length'</span>] = Content[<span class="string">'content'</span>].apply(len)</div><div class="line"><span class="comment"># 大体观察，看有无异常值</span></div><div class="line">plt.plot(Content[<span class="string">'length'</span>])</div><div class="line">plt.show()</div><div class="line"><span class="comment"># 发现一个异常值，去除异常值并填充</span></div><div class="line">Content[<span class="string">'length'</span>][Content[<span class="string">'length'</span>] &gt; <span class="number">1000</span>] = Content[<span class="string">'length'</span>].mean()</div><div class="line"><span class="comment"># 再次观察</span></div><div class="line">plt.plot(Content[<span class="string">'length'</span>])</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ17.png" alt=""><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ18.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 上图仅仅是为了观察异常值，这里我们具体观察说说长度</span></div><div class="line"><span class="comment"># 取长度在4倍标准差之内的数据</span></div><div class="line">ctmean = Content[<span class="string">'length'</span>].mean()</div><div class="line">ctstd = Content[<span class="string">'length'</span>].std()</div><div class="line">foursigma = Content[(ctmean<span class="number">-4</span>*ctstd&lt;Content[<span class="string">'length'</span>]) &amp; (Content[<span class="string">'length'</span>]&lt;ctmean+<span class="number">4</span>*ctstd)]</div><div class="line">plt.hist(foursigma[<span class="string">'length'</span>])</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Length'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ19.png" alt=""></p>
<p>可以看到，大部分的说说都是不超过50字的…这才是典型的快餐文化嘛:-)</p>
<p>接着我们来做个简单的情感分析，通过调用Boson公司的API</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 之前没考虑到根据QQ号来分类，这里重新获取</span></div><div class="line">Content = data[[<span class="string">'Qq'</span>, <span class="string">'Content'</span>]]</div><div class="line">Content = Content.dropna()</div><div class="line"></div><div class="line"></div><div class="line">print(Content[<span class="string">'Qq'</span>].unique())</div><div class="line"><span class="comment"># 发现有些QQ号被误填为其他文字，用相邻[上一个]QQ号填充</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Content[<span class="string">'Qq'</span>]).index):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i]] = int(Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i]])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line"></div><div class="line">        Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i]] = int(Content[<span class="string">'Qq'</span>].loc[Content[<span class="string">'Qq'</span>].index[i<span class="number">-1</span>]])</div><div class="line"></div><div class="line">print(Content[<span class="string">'Qq'</span>].unique())</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 情感分析</span></div><div class="line">emotion = &#123;&#125;</div><div class="line">nlp = BosonNLP(<span class="string">'你的密钥'</span>)   </div><div class="line"></div><div class="line">qq_cont = (Content.groupby(<span class="string">'Qq'</span>)[<span class="string">'Content'</span>])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(qq_cont)):</div><div class="line">    qq = list(Content.groupby(<span class="string">'Qq'</span>)[<span class="string">'Content'</span>])[i][<span class="number">0</span>]</div><div class="line">    contents = list(list(Content.groupby(<span class="string">'Qq'</span>)[<span class="string">'Content'</span>])[i][<span class="number">1</span>])</div><div class="line">    text = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> contents:</div><div class="line">        text += content</div><div class="line"></div><div class="line">    grade = nlp.sentiment(text)[<span class="number">0</span>]</div><div class="line">    emotion[str(qq)] = grade</div><div class="line">    print(grade)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 正面，负面情绪 </span></div><div class="line">positive = []</div><div class="line">negative = []</div><div class="line"><span class="keyword">for</span> e <span class="keyword">in</span> emotion.values():</div><div class="line">    positive.append(e[<span class="number">0</span>])</div><div class="line">    negative.append(e[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<p>简单的可视化：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">p1 = plt.subplot(<span class="number">121</span>)</div><div class="line">plt.hist(positive)</div><div class="line">p1.set_title(<span class="string">'Positive'</span>)</div><div class="line"></div><div class="line">p2 = plt.subplot(<span class="number">122</span>)</div><div class="line">plt.hist(negative)</div><div class="line">p2.set_title(<span class="string">'Negative'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ20.png" alt=""><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LogNorm</div><div class="line"></div><div class="line">plt.hist2d(positive, negative, norm=LogNorm())</div><div class="line">plt.xlabel(<span class="string">'Positive'</span>)</div><div class="line">plt.ylabel(<span class="string">'Negative'</span>)</div><div class="line">plt.title(<span class="string">'Emotion'</span>, fontweight=<span class="string">'bold'</span>)</div><div class="line">plt.colorbar()</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ21.png" alt=""></p>
<p>哈哈，还是开心看到大家都是非常乐观的:-)</p>
<p>继续，我们来提取下关键词。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 关键词提取</span></div><div class="line">WeightWord = &#123;&#125;</div><div class="line">KEYWORDS_URL = <span class="string">'http://api.bosonnlp.com/keywords/analysis'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> cont <span class="keyword">in</span> ContentDict.values():</div><div class="line">    text = cont</div><div class="line">    params = &#123;<span class="string">'top_k'</span>: <span class="number">5</span>&#125;</div><div class="line">    data = json.dumps(text)</div><div class="line">    headers = &#123;<span class="string">'X-Token'</span>: <span class="string">'你的密钥'</span>&#125;</div><div class="line">    print(<span class="string">'requesting...'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        resp = requests.post(KEYWORDS_URL, headers=headers, params=params, data=data.encode(<span class="string">'utf-8'</span>), timeout=<span class="number">5</span>)</div><div class="line">        print(resp.json())</div><div class="line">        <span class="keyword">for</span> weight, word <span class="keyword">in</span> resp.json():</div><div class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> WeightWord.keys():</div><div class="line">                WeightWord[word] = weight</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'Hit...'</span>)</div><div class="line">                WeightWord[word] += weight</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">        </div><div class="line"><span class="comment"># 关键词排序</span></div><div class="line">SortedValue = [v <span class="keyword">for</span> v <span class="keyword">in</span> sorted(WeightWord.values())]</div><div class="line">ValueWord = &#123;&#125;</div><div class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> WeightWord.items():</div><div class="line">    ValueWord[str(value)] = key</div><div class="line"></div><div class="line">SortedValue_top100 = SortedValue[<span class="number">-100</span>:][::<span class="number">-1</span>]</div><div class="line">SortedWord = [ValueWord[str(k)] <span class="keyword">for</span> k <span class="keyword">in</span> SortedValue_top100]</div><div class="line"></div></pre></td></tr></table></figure></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ22.png" alt=""></p>
<p>这是用Boson公司的API做的，我们接下来用结巴分词并用wordcloud做个词云看看吧:-)[参考<a href="https://www.oschina.net/code/snippet_2294527_56155" target="_blank" rel="external">这里</a>]</p>
<p>我这里用的Ubuntu16.04，没有中文字体，安装字体参考<a href="http://blog.csdn.net/up_com/article/details/51218458" target="_blank" rel="external">这里</a>。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 关键词词云</span></div><div class="line"><span class="keyword">import</span> jieba</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"></div><div class="line">mylist = list(ContentDict.values())   </div><div class="line"></div><div class="line">word_list = [<span class="string">" "</span>.join(jieba.cut(sentence)) <span class="keyword">for</span> sentence <span class="keyword">in</span> mylist]</div><div class="line">new_text = <span class="string">' '</span>.join(word_list)</div><div class="line"></div><div class="line"></div><div class="line">pic_path = <span class="string">'/home/shen/CLionProjects/MyCv/QQ.jpg'</span></div><div class="line">mang_mask = imread(pic_path)</div><div class="line"></div><div class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</div><div class="line">wordcloud = WordCloud(background_color=<span class="string">"white"</span>, font_path=<span class="string">'/home/shen/Downloads/font/msyh.ttc'</span>, mask=mang_mask).generate(new_text)</div><div class="line">plt.imshow(wordcloud)</div><div class="line">plt.axis(<span class="string">"off"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>]<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ23.png" alt=""><br>嗯，这张图用了QQ图标做的mask,还是挺有意思的。<br><br>那么，我们接下来分析下说说关注的话题看看。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 说说文本分类</span></div><div class="line">CLASSIFY_URL = <span class="string">'http://api.bosonnlp.com/classify/analysis'</span></div><div class="line">TextClass = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(mylist)):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = json.dumps(mylist[i])</div><div class="line">        headers = &#123;<span class="string">'X-Token'</span>: <span class="string">'你的密钥'</span>&#125;</div><div class="line">        resp = requests.post(CLASSIFY_URL, headers=headers, data=data.encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">        print(resp.text[<span class="number">1</span>])</div><div class="line">        TextClass.append(int(resp.text[<span class="number">1</span>]))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">ClassCount = Counter(TextClass)</div><div class="line">print(ClassCount)</div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ24.png" alt=""><br>Boson给定的参照表为：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ25.png" alt=""></p>
<p>我们简单做个可视化： ~<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dfclass = pd.DataFrame(TextClass)</div><div class="line">sns.countplot(<span class="number">0</span>, data=dfclass)</div><div class="line">plt.xticks((<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>), (<span class="string">'Physical'</span>, <span class="string">'Education'</span>, <span class="string">'Society'</span>, <span class="string">'Entertainment'</span>, <span class="string">'Domestic'</span>, <span class="string">'Technology'</span>, <span class="string">'Estate'</span>), rotation=<span class="number">70</span>)</div><div class="line">plt.xlabel(<span class="string">''</span>)</div><div class="line">plt.title(<span class="string">'Class'</span>, fontsize=<span class="number">16</span>)</div><div class="line">plt.grid()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ26.png" alt=""></p>
<p>嗯，同学们和大佬们还是学习的比较多:-)<br>于我的好友来说，确实是关注教育，娱乐，科技多一点的，看来Boson的API还是挺好用的。<br>数据集里面还有点赞数和评论数，我们先从点赞数分析。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(Star.shape)</div><div class="line">print(Star.isnull().sum())</div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>(48822, )<br>51</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去除缺失值</span></div><div class="line">Star = pd.DataFrame(Star.dropna())</div><div class="line">Star.columns = Star[<span class="string">'star'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 去除Star里面的异常值</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Star[<span class="string">'star'</span>].index:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Star[<span class="string">'star'</span>].loc[i] = int(Star[<span class="string">'star'</span>].loc[i])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(Star[<span class="string">'star'</span>].loc[i])</div><div class="line">        Star[<span class="string">'star'</span>].loc[i] = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line">print(Star.isnull().sum())</div><div class="line">Star = pd.DataFrame(Star.dropna())</div><div class="line"></div><div class="line"><span class="comment"># 有些赞数是来自转发的，一般较多，我们这里将这种情况去除</span></div><div class="line">Star = Star[(Star[<span class="string">'star'</span>].apply(int) &lt; <span class="number">200</span>)]</div><div class="line">print(Star.shape)</div><div class="line"></div><div class="line"><span class="comment"># 作图</span></div><div class="line">plt.hist(list(Star[<span class="string">'star'</span>]), bins=<span class="number">20</span>)</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Star'</span>)</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ27.png" alt=""></p>
<p>相同地，接下来是评论数的分析：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 评论数分析[与点赞分析基本一致]</span></div><div class="line">print(Comment.shape)</div><div class="line">print(Comment.isnull().sum())</div><div class="line"></div><div class="line"><span class="comment"># 去除缺失值</span></div><div class="line">Comment = pd.DataFrame(Comment.dropna())</div><div class="line">Comment.columns = [<span class="string">'Comment'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 去除Comment里面的异常值</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Comment[<span class="string">'Comment'</span>].index:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        Comment[<span class="string">'Comment'</span>].loc[i] = int(Comment[<span class="string">'Comment'</span>].loc[i])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(Comment[<span class="string">'Comment'</span>].loc[i])</div><div class="line">        Comment[<span class="string">'Comment'</span>].loc[i] = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line">print(Comment.isnull().sum())</div><div class="line">Comment = pd.DataFrame(Comment.dropna())</div><div class="line"></div><div class="line"><span class="comment"># 有些评论是来自转发的，一般较多，我们这里将这种情况去除</span></div><div class="line">Comment = Comment[(Comment[<span class="string">'Comment'</span>].apply(int) &lt; <span class="number">100</span>)]</div><div class="line">print(Comment.shape)</div><div class="line"></div><div class="line"><span class="comment"># 作图</span></div><div class="line">plt.hist(list(Comment[<span class="string">'Comment'</span>]), bins=<span class="number">20</span>)</div><div class="line">plt.grid()</div><div class="line">plt.title(<span class="string">'Comment'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/QQ/QQ28.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cpp Virtual members的使用]]></title>
      <url>/2017/03/02/Cpp-Virtual-members%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>C++类的学习–&gt;Virtual member的使用</p>
<p>先看一个例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> CPolygon&#123;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="keyword">int</span> width, heigth;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_values</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">    &#123;width=a; heigth=b;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> CRectangle: <span class="keyword">public</span> CPolygon&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> (width * heigth);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> CTriangle: <span class="keyword">public</span> CPolygon&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> (width * heigth / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    CRectangle rect;</div><div class="line">    CTriangle trgl;</div><div class="line">    CPolygon * ppoly1 = &amp;rect;</div><div class="line">    CPolygon * ppoly2 = &amp;trgl;</div><div class="line">    ppoly1 -&gt; set_values(<span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    ppoly2 -&gt; set_values(<span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; rect.area() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; trgl.area() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>20<br>10</p>
</blockquote>
<p> 这里，最后的rect.area() 与 trgl.area（） 必须用rect 与 trgl， 而不能用(*ppoly1)或是ppoly1-&gt;  。为什么呢，我们先试下，看看报错：</p>
<p>变动只有这两行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cout &lt;&lt; (*ppoly1).area() &lt;&lt; endl;</div><div class="line">cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; endl;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>报错如下：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/index.png" alt=""></p>
<p>报错写的很清楚了，两个指针ppoly1, ppoly2指向的基类是CPolygon, 而CPolygon类 has no member named ‘area’. 所以我们想，既然两个derived classes 都用到area, 如果能在基类里面定义就好了。但是可惜的是，两个darived class的area是不同的。</p>
<blockquote>
<p>实际上，这就是我们常说的<em>Diamond Problem</em>。<a href="https://www.geeksforgeeks.org/multiple-inheritance-in-c/" target="_blank" rel="external">这篇文章</a>解释的比较详细。</p>
</blockquote>
<p>这时，就是Virtual member 上场的时候了。<br>先看下Virtual member的说明：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/x.png" alt=""></p>
<p>接下来看个上面改写的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class CPolygon&#123;</div><div class="line">protected:                // protected与private的区别就在于能否被其derived classes使用</div><div class="line">    int width, height;</div><div class="line">public:</div><div class="line">    void set_values (int a, int b)&#123;</div><div class="line">        width=a; height=b;</div><div class="line">    &#125;</div><div class="line">    virtual int area()</div><div class="line">    &#123; return (0);&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class CRectangle: public CPolygon&#123;</div><div class="line">public:</div><div class="line">    int area()&#123;</div><div class="line">        return (width * height);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class CTriangle: public CPolygon&#123;</div><div class="line">public:</div><div class="line">    int area()&#123;</div><div class="line">        return (width * height / 2);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">    CRectangle rect;</div><div class="line">    CTriangle trgl;</div><div class="line">    CPolygon poly;</div><div class="line">    CPolygon * ppoly1 = &amp;rect;</div><div class="line">    CPolygon * ppoly2 = &amp;trgl;</div><div class="line">    CPolygon * ppoly3 = &amp;poly;</div><div class="line">    ppoly1-&gt;set_values(4, 5);</div><div class="line">    ppoly2-&gt;set_values(4, 5);</div><div class="line">    ppoly3-&gt;set_values(4, 5);</div><div class="line"></div><div class="line">    cout &lt;&lt; ppoly1-&gt;area() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; ppoly3-&gt;area() &lt;&lt; endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>输出：</p>
<blockquote>
<p>20<br>10<br>0</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/virtual.png" alt=""></p>
<p>参考：<em>The C++ Language Tutorial</em></p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python分析QQ群聊天记录]]></title>
      <url>/2017/03/02/Python%E5%88%86%E6%9E%90QQ%E7%BE%A4%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>之前，写了<a href="http://www.cnblogs.com/buzhizhitong/p/5701299.html" target="_blank" rel="external">这篇文章</a>，用python提取全部群成员的发言时间，并简单做了下分析。先补充一下，针对特定单个群成员（这里以  小小白   为例）消息记录的获取。代码比较简单，主要是正则表达式的书写。（附：聊天文件记录的导出请参考上面提到的文章）</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>这里有两个版本的，前面的比较简单，后面的一个实现了自动化提取做图。</p>
<h6 id="Version1-0"><a href="#Version1-0" class="headerlink" title="Version1.0"></a>Version1.0</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2016/9/14</span></div><div class="line"><span class="comment">#从QQ聊天数据导出特定人发言的日期时间和发言内容</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> xlsxwriter</div><div class="line"></div><div class="line"><span class="comment"># 小小白   这里代指你要获取数据的对象的昵称</span></div><div class="line"><span class="comment"># 方便起见，见数据导出的文件名也明明为此</span></div><div class="line">workbook = xlsxwriter.Workbook(<span class="string">'小小白.xlsx'</span>)</div><div class="line">worksheet = workbook.add_worksheet()</div><div class="line">worksheet.set_column(<span class="string">'A:A'</span>, <span class="number">5</span>)</div><div class="line">worksheet.set_column(<span class="string">'B:B'</span>, <span class="number">10</span>)</div><div class="line">worksheet.set_column(<span class="string">'C:C'</span>, <span class="number">200</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'高等数学.txt'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">    s = f.read()</div><div class="line">    <span class="comment"># 正则，跨行匹配</span></div><div class="line">    pa = re.compile(<span class="string">r'^(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;) (\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) 小小白\(小小白的QQ号\)\n(.*?)\n$'</span>,re.DOTALL+re.MULTILINE)</div><div class="line">    ma = re.findall(pa,s)</div><div class="line">    <span class="comment"># print(len(ma))</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ma)):</div><div class="line">        <span class="comment"># print(ma[i][0])</span></div><div class="line">        date = ma[i][<span class="number">0</span>]</div><div class="line">        time = ma[i][<span class="number">1</span>]</div><div class="line">        word = ma[i][<span class="number">2</span>]</div><div class="line"></div><div class="line">        worksheet.write(int(i),<span class="number">0</span>,date)</div><div class="line">        worksheet.write(int(i),<span class="number">1</span>,time)</div><div class="line">        worksheet.write(int(i),<span class="number">2</span>,word)</div><div class="line"></div><div class="line">    workbook.close()</div><div class="line">    print(<span class="string">"处理完毕，快去看看文件夹下面新建的.xlsx文件吧"</span>)</div><div class="line"></div></pre></td></tr></table></figure>
<h6 id="Version2-0"><a href="#Version2-0" class="headerlink" title="Version2.0"></a>Version2.0</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 解决matplotlib显示中文的问题</span></div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line">mpl.rcParams[<span class="string">"font.sans-serif"</span>] = [<span class="string">"Microsoft YaHei"</span>]</div><div class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 获取24个时间段-----&gt;periods</span></div><div class="line"><span class="comment"># 用于之后时间的分段</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_periods</span><span class="params">()</span>:</span></div><div class="line">    periods = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">24</span>):</div><div class="line">        <span class="comment"># 这里的判断用于将类似的‘8’ 转化为 ‘08’ 便于和导出数据匹配</span></div><div class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</div><div class="line">            i = <span class="string">'0'</span>+str(i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i = str(i)</div><div class="line">        periods.append(i)</div><div class="line">    <span class="keyword">return</span> periods</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">对QQ群而言的时间提取</div><div class="line"></div><div class="line"># 获取聊天文件的“小时”数据</div><div class="line">def get_times(filename):</div><div class="line">    with open(filename, encoding='utf-8') as f:</div><div class="line">        data = f.read()</div><div class="line">        # 例如20:50:52，要匹配其中的20</div><div class="line">        pa = re.compile(r"(\d\d):\d\d:\d\d")</div><div class="line">        times = re.findall(pa, data)</div><div class="line"></div><div class="line">    return times</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 对每一个时间段进行计数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classification</span><span class="params">(times,period)</span>:</span></div><div class="line">    num = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> times:</div><div class="line">        <span class="keyword">if</span> time == period:</div><div class="line">            num += <span class="number">1</span></div><div class="line">    period_time.append([period,num])</div><div class="line">    <span class="comment"># print(period, '---&gt;', num)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 作图</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_time</span><span class="params">(period_time,name)</span>:</span></div><div class="line">    time = []</div><div class="line">    num  = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> period_time:</div><div class="line">        time.append(i[<span class="number">0</span>])</div><div class="line">        num.append(i[<span class="number">1</span>])</div><div class="line">    time = time[<span class="number">6</span>:<span class="number">24</span>]+time[<span class="number">0</span>:<span class="number">6</span>]</div><div class="line">    num = num[<span class="number">6</span>:<span class="number">24</span>]+num[<span class="number">0</span>:<span class="number">6</span>]</div><div class="line">    <span class="comment"># print(time,'\n',num)</span></div><div class="line">    labels = time</div><div class="line">    x = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">24</span>)]</div><div class="line">    plt.plot(num, <span class="string">'g'</span>)</div><div class="line">    num_max = max(num)</div><div class="line">    plt.xticks(x,labels)</div><div class="line">    plt.axis([<span class="number">00</span>, <span class="number">24</span>, <span class="number">0</span>, num_max*(<span class="number">1.2</span>)])</div><div class="line">    plt.grid(<span class="keyword">True</span>)</div><div class="line">    plt.title(name)</div><div class="line">    plt.ylabel(<span class="string">'发言量'</span>)</div><div class="line">    plt.xlabel(<span class="string">'时间'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_person_data</span><span class="params">(filename,name,qqnumber)</span>:</span></div><div class="line">    person_data = &#123;<span class="string">'date'</span>:[],<span class="string">'time'</span>:[],<span class="string">'word'</span>:[]&#125;</div><div class="line">    <span class="keyword">with</span> open(filename,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">        s = f.read()</div><div class="line">        <span class="comment"># 正则，跨行匹配</span></div><div class="line">        pa = re.compile(<span class="string">r'^(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;) (\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) '</span>+name+<span class="string">r'\('</span>+qqnumber+<span class="string">'\)\n(.*?)\n$'</span>,re.DOTALL+re.MULTILINE)</div><div class="line">        ma = re.findall(pa,s)</div><div class="line">        <span class="comment"># print(len(ma))</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ma)):</div><div class="line">            <span class="comment"># print(ma[i][0])</span></div><div class="line">            date = ma[i][<span class="number">0</span>]</div><div class="line">            time = ma[i][<span class="number">1</span>]</div><div class="line">            word = ma[i][<span class="number">2</span>]</div><div class="line">            person_data[<span class="string">'date'</span>].append(date)</div><div class="line">            person_data[<span class="string">'time'</span>].append(time[<span class="number">0</span>:<span class="number">2</span>])</div><div class="line">            person_data[<span class="string">'word'</span>].append(word)</div><div class="line">    <span class="keyword">return</span> person_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    filename = input(<span class="string">'请输入聊天记录文件名：'</span>)</div><div class="line">    name = input(<span class="string">'准备提取个人信息就绪，请输入要提取人的群名片：'</span>)</div><div class="line">    qqnumber = input(<span class="string">'请输入要提取人的QQ号：'</span>)</div><div class="line">    period_time = []</div><div class="line">    person_data = get_person_data(filename,name,qqnumber)</div><div class="line">    times = person_data[<span class="string">'time'</span>]</div><div class="line"></div><div class="line">    periods = get_periods()</div><div class="line">    <span class="keyword">for</span> period <span class="keyword">in</span> periods:</div><div class="line">        classification(times,period)</div><div class="line">    plot_time(period_time,name)</div><div class="line">    <span class="comment"># print(person_data['word'])</span></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://images2015.cnblogs.com/blog/980075/201610/980075-20161018105033451-390495188.png" alt=""></p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><blockquote>
<p>关于Windows下，matplotlib中文显示的问题，参考我之前的<a href="http://www.cnblogs.com/buzhizhitong/p/5759304.html" target="_blank" rel="external">这篇文章</a>。<br>至于Ubuntu下，还未去处理，之后有时间补充。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python实现支持向量机(SVM)]]></title>
      <url>/2017/03/02/Python%E5%AE%9E%E7%8E%B0%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-SVM/</url>
      <content type="html"><![CDATA[<p>之前学SVM做的笔记，这里整理下。</p>
<h5 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h5><p>这里先空下，等之后整理补充上来。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>代码大部分来自<a href="https://gist.github.com/mblondel/586753" target="_blank" rel="external">Github</a>，当中有自己写的一些注释。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> linalg</div><div class="line"><span class="keyword">import</span> cvxopt</div><div class="line"><span class="keyword">import</span> cvxopt.solvers</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_kernel</span><span class="params">(x1, x2)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.dot(x1, x2)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">polynomial_kernel</span><span class="params">(x, y, p=<span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> + np.dot(x, y)) ** p</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_kernel</span><span class="params">(x, y, sigma=<span class="number">5.0</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.exp(-linalg.norm(x-y)**<span class="number">2</span> / (<span class="number">2</span> * (sigma ** <span class="number">2</span>)))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SVM</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kernel=linear_kernel, C=None)</span>:</span></div><div class="line">        self.kernel = kernel</div><div class="line">        self.C = C</div><div class="line">        <span class="keyword">if</span> self.C <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: self.C = float(self.C)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span></div><div class="line">        n_samples, n_features = X.shape</div><div class="line"></div><div class="line">        <span class="comment"># Gram matrix</span></div><div class="line">        K = np.zeros((n_samples, n_samples))</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n_samples):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n_samples):</div><div class="line">                K[i,j] = self.kernel(X[i], X[j])</div><div class="line"></div><div class="line">        P = cvxopt.matrix(np.outer(y,y) * K)</div><div class="line">        q = cvxopt.matrix(np.ones(n_samples) * <span class="number">-1</span>)</div><div class="line">        A = cvxopt.matrix(y, (<span class="number">1</span>,n_samples))</div><div class="line">        b = cvxopt.matrix(<span class="number">0.0</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.C <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            G = cvxopt.matrix(np.diag(np.ones(n_samples) * <span class="number">-1</span>))</div><div class="line">            h = cvxopt.matrix(np.zeros(n_samples))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            tmp1 = np.diag(np.ones(n_samples) * <span class="number">-1</span>)</div><div class="line">            tmp2 = np.identity(n_samples)</div><div class="line">            G = cvxopt.matrix(np.vstack((tmp1, tmp2)))</div><div class="line">            tmp1 = np.zeros(n_samples)</div><div class="line">            tmp2 = np.ones(n_samples) * self.C</div><div class="line">            h = cvxopt.matrix(np.hstack((tmp1, tmp2)))</div><div class="line"></div><div class="line">        <span class="comment"># solve QP problem</span></div><div class="line">        solution = cvxopt.solvers.qp(P, q, G, h, A, b)</div><div class="line"></div><div class="line">        <span class="comment"># Lagrange multipliers</span></div><div class="line">        a = np.ravel(solution[<span class="string">'x'</span>])</div><div class="line"></div><div class="line">        <span class="comment"># Support vectors have non zero lagrange multipliers</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        这里a&gt;1e-5就将其视为非零</div><div class="line">        '''</div><div class="line">        sv = a &gt; <span class="number">1e-5</span></div><div class="line">        ind = np.arange(len(a))[sv]</div><div class="line">        self.a = a[sv]</div><div class="line">        self.sv = X[sv]</div><div class="line">        self.sv_y = y[sv]</div><div class="line">        print(<span class="string">"%d support vectors out of %d points"</span> % (len(self.a), n_samples))</div><div class="line"></div><div class="line">        <span class="comment"># Intercept</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        这里相当于对所有的支持向量求得的b取平均值</div><div class="line">        '''</div><div class="line">        self.b = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(len(self.a)):</div><div class="line">            self.b += self.sv_y[n]</div><div class="line">            self.b -= np.sum(self.a * self.sv_y * K[ind[n],sv])</div><div class="line">        self.b /= len(self.a)</div><div class="line"></div><div class="line">        <span class="comment"># Weight vector</span></div><div class="line">        <span class="keyword">if</span> self.kernel == linear_kernel:</div><div class="line">            self.w = np.zeros(n_features)</div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(len(self.a)):</div><div class="line">                <span class="comment"># linear_kernel相当于在原空间，故计算w不用映射到feature space</span></div><div class="line">                self.w += self.a[n] * self.sv_y[n] * self.sv[n]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.w = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">project</span><span class="params">(self, X)</span>:</span></div><div class="line">        <span class="comment"># w有值，即kernel function 是 linear_kernel，直接计算即可</span></div><div class="line">        <span class="keyword">if</span> self.w <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> np.dot(X, self.w) + self.b</div><div class="line">        <span class="comment"># w is None --&gt; 不是linear_kernel,w要重新计算</span></div><div class="line">        <span class="comment"># 这里没有去计算新的w（非线性情况不用计算w）,直接用kernel matrix计算预测结果</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            y_predict = np.zeros(len(X))</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</div><div class="line">                s = <span class="number">0</span></div><div class="line">                <span class="keyword">for</span> a, sv_y, sv <span class="keyword">in</span> zip(self.a, self.sv_y, self.sv):</div><div class="line">                    s += a * sv_y * self.kernel(X[i], sv)</div><div class="line">                y_predict[i] = s</div><div class="line">            <span class="keyword">return</span> y_predict + self.b</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></div><div class="line">        <span class="keyword">return</span> np.sign(self.project(X))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> pylab <span class="keyword">as</span> pl</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_lin_separable_data</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># generate training data in the 2-d case</span></div><div class="line">        mean1 = np.array([<span class="number">0</span>, <span class="number">2</span>])</div><div class="line">        mean2 = np.array([<span class="number">2</span>, <span class="number">0</span>])</div><div class="line">        cov = np.array([[<span class="number">0.8</span>, <span class="number">0.6</span>], [<span class="number">0.6</span>, <span class="number">0.8</span>]])</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">100</span>)</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">100</span>)</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_non_lin_separable_data</span><span class="params">()</span>:</span></div><div class="line">        mean1 = [<span class="number">-1</span>, <span class="number">2</span>]</div><div class="line">        mean2 = [<span class="number">1</span>, <span class="number">-1</span>]</div><div class="line">        mean3 = [<span class="number">4</span>, <span class="number">-4</span>]</div><div class="line">        mean4 = [<span class="number">-4</span>, <span class="number">4</span>]</div><div class="line">        cov = [[<span class="number">1.0</span>,<span class="number">0.8</span>], [<span class="number">0.8</span>, <span class="number">1.0</span>]]</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">50</span>)</div><div class="line">        X1 = np.vstack((X1, np.random.multivariate_normal(mean3, cov, <span class="number">50</span>)))</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">50</span>)</div><div class="line">        X2 = np.vstack((X2, np.random.multivariate_normal(mean4, cov, <span class="number">50</span>)))</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_lin_separable_overlap_data</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># generate training data in the 2-d case</span></div><div class="line">        mean1 = np.array([<span class="number">0</span>, <span class="number">2</span>])</div><div class="line">        mean2 = np.array([<span class="number">2</span>, <span class="number">0</span>])</div><div class="line">        cov = np.array([[<span class="number">1.5</span>, <span class="number">1.0</span>], [<span class="number">1.0</span>, <span class="number">1.5</span>]])</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">100</span>)</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">100</span>)</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_train</span><span class="params">(X1, y1, X2, y2)</span>:</span></div><div class="line">        X1_train = X1[:<span class="number">90</span>]</div><div class="line">        y1_train = y1[:<span class="number">90</span>]</div><div class="line">        X2_train = X2[:<span class="number">90</span>]</div><div class="line">        y2_train = y2[:<span class="number">90</span>]</div><div class="line">        X_train = np.vstack((X1_train, X2_train))</div><div class="line">        y_train = np.hstack((y1_train, y2_train))</div><div class="line">        <span class="keyword">return</span> X_train, y_train</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_test</span><span class="params">(X1, y1, X2, y2)</span>:</span></div><div class="line">        X1_test = X1[<span class="number">90</span>:]</div><div class="line">        y1_test = y1[<span class="number">90</span>:]</div><div class="line">        X2_test = X2[<span class="number">90</span>:]</div><div class="line">        y2_test = y2[<span class="number">90</span>:]</div><div class="line">        X_test = np.vstack((X1_test, X2_test))</div><div class="line">        y_test = np.hstack((y1_test, y2_test))</div><div class="line">        <span class="keyword">return</span> X_test, y_test</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># 仅仅在Linears使用此函数作图，即w存在时</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_margin</span><span class="params">(X1_train, X2_train, clf)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, w, b, c=<span class="number">0</span>)</span>:</span></div><div class="line">            <span class="comment"># given x, return y such that [x,y] in on the line</span></div><div class="line">            <span class="comment"># w.x + b = c</span></div><div class="line">            <span class="keyword">return</span> (-w[<span class="number">0</span>] * x - b + c) / w[<span class="number">1</span>]</div><div class="line"></div><div class="line">        pl.plot(X1_train[:,<span class="number">0</span>], X1_train[:,<span class="number">1</span>], <span class="string">"ro"</span>)</div><div class="line">        pl.plot(X2_train[:,<span class="number">0</span>], X2_train[:,<span class="number">1</span>], <span class="string">"bo"</span>)</div><div class="line">        pl.scatter(clf.sv[:,<span class="number">0</span>], clf.sv[:,<span class="number">1</span>], s=<span class="number">100</span>, c=<span class="string">"g"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = 0</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = 1</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b, <span class="number">1</span>)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b, <span class="number">1</span>)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k--"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = -1</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b, <span class="number">-1</span>)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b, <span class="number">-1</span>)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k--"</span>)</div><div class="line"></div><div class="line">        pl.axis(<span class="string">"tight"</span>)</div><div class="line">        pl.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_contour</span><span class="params">(X1_train, X2_train, clf)</span>:</span></div><div class="line">        <span class="comment"># 作training sample数据点的图</span></div><div class="line">        pl.plot(X1_train[:,<span class="number">0</span>], X1_train[:,<span class="number">1</span>], <span class="string">"ro"</span>)</div><div class="line">        pl.plot(X2_train[:,<span class="number">0</span>], X2_train[:,<span class="number">1</span>], <span class="string">"bo"</span>)</div><div class="line">        <span class="comment"># 做support vectors 的图</span></div><div class="line">        pl.scatter(clf.sv[:,<span class="number">0</span>], clf.sv[:,<span class="number">1</span>], s=<span class="number">100</span>, c=<span class="string">"g"</span>)</div><div class="line"></div><div class="line">        X1, X2 = np.meshgrid(np.linspace(<span class="number">-6</span>,<span class="number">6</span>,<span class="number">50</span>), np.linspace(<span class="number">-6</span>,<span class="number">6</span>,<span class="number">50</span>))</div><div class="line">        X = np.array([[x1, x2] <span class="keyword">for</span> x1, x2 <span class="keyword">in</span> zip(np.ravel(X1), np.ravel(X2))])</div><div class="line">        Z = clf.project(X).reshape(X1.shape)</div><div class="line">        <span class="comment"># pl.contour做等值线图</span></div><div class="line">        pl.contour(X1, X2, Z, [<span class="number">0.0</span>], colors=<span class="string">'k'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line">        pl.contour(X1, X2, Z + <span class="number">1</span>, [<span class="number">0.0</span>], colors=<span class="string">'grey'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line">        pl.contour(X1, X2, Z - <span class="number">1</span>, [<span class="number">0.0</span>], colors=<span class="string">'grey'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line"></div><div class="line">        pl.axis(<span class="string">"tight"</span>)</div><div class="line">        pl.show()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_linear</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_lin_separable_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM()</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_margin(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_non_linear</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_non_lin_separable_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM(gaussian_kernel)</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_contour(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_soft</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_lin_separable_overlap_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM(C=<span class="number">0.1</span>)</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_contour(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line"></div><div class="line">test_soft()</div></pre></td></tr></table></figure></p>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/f2.png" alt=""></p>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-03-02%2008-40-03.png" alt=""></p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>关于用cvxopt求解QP问题的使用，可参考<a href="https://uqer.io/community/share/55c9a55df9f06c91f818c675" target="_blank" rel="external">优矿</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[K-means clustering]]></title>
      <url>/2017/02/27/K-means-clustering/</url>
      <content type="html"><![CDATA[<p>K-means clustering的Python实现<br>交流群不相识的朋友突然问我怎么手写K-means…于是腾出时间简单写下。</p>
<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><blockquote>
<p>k-平均算法源于信号处理中的一种向量量化方法，现在则更多地作为一种聚类分析方法流行于数据挖掘领域。k-平均聚类的目的是：把 n {\displaystyle n} n个点（可以是样本的一次观察或一个实例）划分到k个聚类中，使得每个点都属于离他最近的均值（此即聚类中心）对应的聚类，以之作为聚类的标准。这个问题将归结为一个把数据空间划分为Voronoi cells的问题。[wiki]</p>
</blockquote>
<h5 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h5><p>关于算法的步骤也是参考的<a href="https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95#.E7.AE.97.E6.B3.95.E6.8F.8F.E8.BF.B0" target="_blank" rel="external">WIKI</a>，原理比较简单，不再重复叙述。<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-27%2022-21-23.png" alt=""></p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><p>这里的实现有几个需要改进的地方，这里放在前面指出。</p>
<ul>
<li>[ ] 采用了循环，而不是向量化，矩阵化的运算</li>
<li>[ ] 收敛的判断，并没有按照分类是否恒定不变来判断收敛与否，而是以，所有质点新一次迭代前后空间距离的微小变化[自定义阀值]作为收敛的标准。[这里纯属个人想法，不知道是否有原则的错误0.0]<blockquote>
<p>2017.03.01补充<br>今天再次搜索K-means算法，看到<a href="http://wiki.swarma.net/index.php?title=K-means%E8%81%9A%E7%B1%BB&amp;variant=zh" target="_blank" rel="external">集智百科</a>的关于次算法的介绍。恰好正是按照这种方法来判断算法的收敛。<br>叙述是这样的<br><img src="http://olricxi00.bkt.clouddn.com/Screenshot%20from%202017-03-01%2012-59-38.png" alt=""><br>可以看到下面算法收敛的判断准则就是质心的微小变化。[所以目前看来这样还是靠谱的0.0]<br>但是呢，有些不太同意简介的开头：<br>++ “K-means算法是很典型的基于距离的聚类算法，采用距离作为相似性的评价指标，即认为两个对象的距离越近，其相似度就越大。该算法认为簇是由距离靠近的对象组成的，因此把得到紧凑且独立的簇作为最终目标。”++<br>这里还是参考WIK的说法：<br>++“分配(Assignment)：将每个观测分配到聚类中，使得组内平方和（WCSS）达到最小。因为这一平方和就是平方后的欧氏距离，所以很直观地把观测分配到离它最近得均值点即可 [8] 。（数学上，这意味依照由这些均值点生成的Voronoi图来划分上述观测）。”++</p>
</blockquote>
</li>
</ul>
<p>这里测试的data来自于那位朋友的题目，比较简单，见代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 获取数据</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">()</span>:</span></div><div class="line">    x = np.array([[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)])</div><div class="line">    y = np.array([[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">51</span>, <span class="number">151</span>)])</div><div class="line">    data = np.hstack((x, y))</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="comment"># 获取两点间的距离</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdis</span><span class="params">(px, py)</span>:</span></div><div class="line">    dims = len(px)</div><div class="line">    <span class="comment"># dist = np.sqrt(((px[0]-py[0])**2)+(px[1]-py[1])**2)</span></div><div class="line">    dist = np.sqrt(np.sum(((px[i] - py[i]) ** <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(dims)))</div><div class="line">    <span class="keyword">return</span> dist</div><div class="line"></div><div class="line"><span class="comment"># 用于首次随机获取质点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrandmeans</span><span class="params">(data, n)</span>:</span></div><div class="line">    means = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        x0 = random.choice(data)</div><div class="line">        means.append(x0)</div><div class="line">    print(<span class="string">'Random: '</span>, means)</div><div class="line">    <span class="keyword">return</span> means</div><div class="line"></div><div class="line"><span class="comment"># 递归，重复计算所属类别，至收敛</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getclass</span><span class="params">(data, means)</span>:</span></div><div class="line">    classx = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(means)):</div><div class="line">        classx[str(k)] = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">        p0 = data[i]</div><div class="line">        dists = []</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(means)):</div><div class="line">            dist = getdis(p0, means[k])</div><div class="line">            dists.append(dist)</div><div class="line">        maxdist = max(dists)</div><div class="line">        class_p0 = [i <span class="keyword">for</span> i, j <span class="keyword">in</span> enumerate(dists) <span class="keyword">if</span> j==maxdist ][<span class="number">0</span>]</div><div class="line">        classx[str(class_p0)].append(p0)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># print(means)</span></div><div class="line">    newmeans = getnewmeans(classx)</div><div class="line">    <span class="comment"># 这里我们并未按照所属类别是否收敛，而后所得质心各维度的距离是否足够小</span></div><div class="line">    dists_of_means = getdis(np.sort(means, <span class="number">0</span>),  np.sort(newmeans, <span class="number">0</span>))</div><div class="line">    print(<span class="string">'alculating...'</span>)</div><div class="line">    <span class="keyword">if</span> sum(dists_of_means &gt; <span class="number">0.001</span>) == <span class="number">0</span>:</div><div class="line">        print(<span class="string">'complete!'</span>)</div><div class="line">        print(<span class="string">'求得的最优质点为: '</span>, means)</div><div class="line">        print(<span class="string">'各维度的距离为: '</span>, dists_of_means)</div><div class="line">        print(<span class="string">'最终聚类结果为: '</span>, classx)</div><div class="line">        <span class="keyword">return</span> classx</div><div class="line"></div><div class="line">    newclassx = getclass(data, newmeans)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newclassx</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getnewmeans</span><span class="params">(classx)</span>:</span></div><div class="line">    classes = list(classx.keys())</div><div class="line">    means = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(classx))]</div><div class="line">    <span class="keyword">for</span> class0 <span class="keyword">in</span> classes:</div><div class="line">        <span class="keyword">if</span> len(classx[class0]) != <span class="number">0</span>:</div><div class="line">            points = np.vstack(classx[class0])</div><div class="line">            x = np.mean(points[:, <span class="number">0</span>])</div><div class="line">            y = np.mean(points[:, <span class="number">1</span>])</div><div class="line">            means[int(class0)] = np.array([x, y])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'WARNING: 极大可能存在一个多余的质点!'</span>)</div><div class="line">            means[int(class0)] = np.array([<span class="number">0</span>, <span class="number">0</span>])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> means</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotdata</span><span class="params">(classx)</span>:</span></div><div class="line">    plt.figure()</div><div class="line">    classes = classx.keys()</div><div class="line">    color = [<span class="string">'ro'</span>, <span class="string">'bo'</span>]</div><div class="line">    <span class="keyword">for</span> class0 <span class="keyword">in</span> range(len(classes)):</div><div class="line">        points = np.vstack(classx[str(class0)])</div><div class="line">        <span class="comment"># print(points)</span></div><div class="line">        plt.plot(points[:, <span class="number">0</span>], points[:, <span class="number">1</span>], color[class0])</div><div class="line">        <span class="comment"># print('=========================')</span></div><div class="line">    plt.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    data = getdata()</div><div class="line">    <span class="comment">#print(data)</span></div><div class="line">    dist = getdis(data[<span class="number">0</span>], data[<span class="number">1</span>])</div><div class="line">    <span class="comment">#print(dist)</span></div><div class="line">    means = getrandmeans(data, <span class="number">2</span>)</div><div class="line">    <span class="comment">#print(means)</span></div><div class="line"></div><div class="line">    <span class="comment"># print(classx)</span></div><div class="line">    classx = getclass(data, means)</div><div class="line">    plotdata(classx)</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>Random:  [array([ 85, 135]), array([ 92, 142])]<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>alculating…<br>complete!<br>求得的最优质点为:  [array([  75.5,  125.5]), array([ 25.5,  75.5])]<br>各维度的距离为:  [ 0.  0.]<br>最终聚类结果为:  {‘1’: [array([ 51, 101]), array([ 52, 102]), array([ 53, 103]), array([ 54, 104]),array([ 55, 105]), … , array([46, 96]), array([47, 97]), array([48, 98]), array([49, 99]), array([ 50, 100])]}</p>
</blockquote>
<p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-03-03%2001-38-15.png" alt=""></p>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>关于上面的实现，开始时发现，每次运行作出来的图竟然不一样…调试发现时递归那里的问题。<br>就是关于return的问题，这里内部的return只是起到终止递归的作用，返回的是外面的return。抽象出来，类似下面这种<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-27%2022-39-10.png" alt=""></p>
<p>后面有时间会再针对上面的问题进行改进。</p>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><a href="https://zh.wikipedia.org/wiki/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95#.E7.AE.97.E6.B3.95.E6.8F.8F.E8.BF.B0" target="_blank" rel="external">WIKI</a><br><a href="http://stackoverflow.com/questions/3989016/how-to-find-all-positions-of-the-maximum-value-in-a-list" target="_blank" rel="external">StackOverflow</a><br><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html" target="_blank" rel="external">CodingLabs</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Clustering </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Print time!]]></title>
      <url>/2017/02/26/Print-time/</url>
      <content type="html"><![CDATA[<h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p>关于Cpp知识点的结合练习。</p>
<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>本次练习涉及的知识点</p>
<blockquote>
<p>vector的几种打印方式<br>将函数作为参数传入其他函数<br>精确[毫秒及微秒]时间的计量</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 几种打印vector的方法</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.size(); i++)&#123;</div><div class="line"><span class="comment">//        cout&lt;&lt; i;</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; v[i]&lt;&lt;<span class="string">"  "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = v.begin(); iter != v.end(); ++iter)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *iter&lt;&lt; <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector3</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">auto</span> itr = v.begin();</div><div class="line">    <span class="keyword">while</span>( itr != v.end())&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *(itr++) &lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将函数作为参数传入</span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*pf)</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 精确时间的计量</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">taketime</span><span class="params">(pf f, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line">    <span class="keyword">struct</span> timeval start, end;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> mtime, seconds, useconds;</div><div class="line"></div><div class="line">    gettimeofday(&amp;start, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Elapsed time: %ld milliseconds\n"</span>, mtime);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</div><div class="line">        f(v);</div><div class="line">    gettimeofday(&amp;end, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    seconds  = end.tv_sec  - start.tv_sec;</div><div class="line">    useconds = end.tv_usec - start.tv_usec;</div><div class="line"></div><div class="line">    mtime = ((seconds) * <span class="number">1000</span> + useconds/<span class="number">1000.0</span>) + <span class="number">0.5</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>&lt;&lt; mtime;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; daysInMonth = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</div><div class="line">    taketime(printvector1, daysInMonth);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h5><p><em>Data Structures and AlgorithmAnalysis in C++</em>[p84]</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Practice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bubble Sort]]></title>
      <url>/2017/02/25/Bubble-Sort/</url>
      <content type="html"><![CDATA[<h5 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h5><p>关于，冒泡排序的原理及其实现。<br>关于原理：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2016-53-55.png" alt=""></p>
<blockquote>
<p>有序序列中每一对相邻元素都是顺序的；反之，所有相邻元素均顺序的序列<br>也必然整体有序。</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 原理： 有序序列中每一对相邻元素都是顺序的；反之，所有相邻元素均顺序的序列</span></div><div class="line"><span class="comment">// 也必然整体有序。</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubblesort1A</span><span class="params">( <span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> sorted = <span class="literal">false</span>;  <span class="comment">// 整体排序标志，首先假定尚未进行排序</span></div><div class="line">    <span class="keyword">while</span>(!sorted)&#123;  <span class="comment">//在尚未确认已经全局排序之前，逐趟进行扫描交换</span></div><div class="line">        sorted = <span class="literal">true</span>;  <span class="comment">// 假定已经排序</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt; n; i++ )&#123;</div><div class="line">            <span class="keyword">if</span> (A[i - <span class="number">1</span>] &gt; A[i])&#123; <span class="comment">// 一旦A[i-1]与A[i]逆序，则</span></div><div class="line">                swap( A[i<span class="number">-1</span>], A[i]); <span class="comment">// 交换之</span></div><div class="line">                sorted = <span class="literal">false</span>;<span class="comment">// 因整体排序不能保证，需要清除排序标志</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    	n--;  <span class="comment">// 至此末位元素必然就位， 故可以缩短排序序列的有效长度。</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;<span class="comment">// 借助布尔值标志位sorted, 可以及时提前退出，而不至于总是忙里地做n-1次扫描</span></div><div class="line"></div><div class="line"><span class="comment">// 构造打印数组的函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printvector</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; a[i]&lt;&lt; <span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=<span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> a[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">    printvector(a, n);</div><div class="line">    bubblesort1A(a, n);</div><div class="line">    printvector(a, n);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h5><p><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2017-27-54.png" alt=""></p>
<p>参考：TsinghuaX: 30240184.1x Data Structures and Algorithm Design Part I 数据结构与算法设计(上) </p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[About Hexo]]></title>
      <url>/2017/02/25/About-Hexo/</url>
      <content type="html"><![CDATA[<h6 id="自动开启编辑器"><a href="#自动开启编辑器" class="headerlink" title="自动开启编辑器"></a>自动开启编辑器</h6><p>为Hexo 3增加新功能： hexo new “title” 后自动使用指定编辑器打开新建的md文件.<br>System: Ubuntu16.04 64bit<br>Editor: Haroopad</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</div><div class="line"></div><div class="line"><span class="comment">// Hexo 3</span></div><div class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  spawn(<span class="string">'haroopad'</span>, [data.path]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h6 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h6><p>之前的系统崩了，将完整的hexo文件备份，重装系统，将文件拷到电脑，安装nvm,配置node,记得版本不要最新的，官方推荐稳定版本即可。配置git,npm, 再hexo文件重新安装hexo，只进行一次安装命令即可[也就是不用hexo init这些初始化和配置的命令]</p>
<h6 id="更换评论系统"><a href="#更换评论系统" class="headerlink" title="更换评论系统"></a>更换评论系统</h6><p>多说要崩，换Disqus, 但是要FQ才能加载出来，。对技术爱好者来说FQ是基本技能，所以还是选择了它。</p>
<h6 id="文末增加版权信息"><a href="#文末增加版权信息" class="headerlink" title="文末增加版权信息"></a>文末增加版权信息</h6><p>参考<a href="http://www.vitah.net/posts/20f300cc/" target="_blank" rel="external">这里</a></p>
<h6 id="页脚居中"><a href="#页脚居中" class="headerlink" title="页脚居中"></a>页脚居中</h6><p>参考<a href="http://www.wuxubj.cn/2016/07/footer-beautify-of-nexT/" target="_blank" rel="external">这里</a></p>
<h6 id="动画特效"><a href="#动画特效" class="headerlink" title="动画特效"></a>动画特效</h6><p>关闭了canvas_nest， 留下了小心心 :-)</p>
<h6 id="添加About菜单即相应页面"><a href="#添加About菜单即相应页面" class="headerlink" title="添加About菜单即相应页面"></a>添加About菜单即相应页面</h6><p>参考<a href="http://www.jianshu.com/p/6c1196f12302" target="_blank" rel="external">这里</a></p>
<p>next主题设置如下，将about的注释去掉即可：</p>
<pre><code># ---------------------------------------------------------------
# Menu Settings
# ---------------------------------------------------------------

# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)
menu:
  home: /
  categories: /categories
  archives: /archives
  tags: /tags
  about: /about
  #sitemap: /sitemap.xml
  #commonweal: /404.html
</code></pre><p>之后<code>hexo new page about</code>，生成<code>source/about/index.md</code>，编辑相应内容即可。</p>
<h6 id="添加Jupyter-Notebook支持"><a href="#添加Jupyter-Notebook支持" class="headerlink" title="添加Jupyter Notebook支持"></a>添加Jupyter Notebook支持</h6><p>参考<a href="http://www.jianshu.com/p/6c1196f12302" target="_blank" rel="external">这里</a></p>
<p>在<a href="http://nbviewer.jupyter.org/" target="_blank" rel="external">nbviewer</a>，输入你的github用户名，找到项目文件，之后复制上面的url。<br>在md文件直接添加<br><code>&lt;iframe src=&quot;your_URL&quot; width=&quot;700&quot; height=&quot;400&quot;&gt;&lt;/iframe&gt;</code><br>将your_URL换为上面已经复制的即可。</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle: Human Resources Analytics]]></title>
      <url>/2017/02/25/Kaggle-Human-Resources-Analytics/</url>
      <content type="html"><![CDATA[<h5 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h5><p>这是新年定下的目标之一 —— Kaggle案例的学习<br>这里，数据即来自<a href="https://www.kaggle.com/ludobenistant/hr-analytics" target="_blank" rel="external">Human Resources Analytics</a>， 参考<a href="https://www.kaggle.com/nirajvermafcb/d/ludobenistant/hr-analytics/principal-component-analysis-explained" target="_blank" rel="external">这里</a>学习数据的分析.</p>
<h5 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h5><p>这个kernel里面呢，大部分还是比较常规的EDA，可视化和简单算法的应用，但是也有要学习的地方，这里在代码里面都有声明。</p>
<blockquote>
<p>[学习heatmap使用]<br>[学习plt.barh使用]<br>[学习如下reindex的步骤]<br>[学习iloc使用]<br>[学习使用sklearn进行标准化]<br>[掌握手动计算协方差]<br>[学习使用Numpy简单的线性代数的运算]<br>[学习使用sklearn做PCA]</p>
</blockquote>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">Created on Sat Feb 25 07:48:50 2017</div><div class="line"></div><div class="line">@author: shen</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="comment"># 人力资源——离职分析</span></div><div class="line"><span class="comment"># 采用PCA</span></div><div class="line"><span class="comment"># 参考https://www.kaggle.com/nirajvermafcb/d/ludobenistant/hr-analytics/principal-component-analysis-explained</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># linear algebra</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># data rocessing</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 导入数据</span></div><div class="line"><span class="comment"># https://www.kaggle.com/nirajvermafcb/d/ludobenistant/hr-analytics/principal-component-analysis-explained</span></div><div class="line">df = pd.read_csv(<span class="string">'/home/shen/PycharmProjects/MyPython/Kaggle/human resources/data.csv'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 了解数据</span></div><div class="line"><span class="string">'''</span></div><div class="line">df.columns.tolist() fetches all the columns and </div><div class="line">then convert it into list type.This step is just </div><div class="line">to check out all the column names in our data.Columns </div><div class="line">are also called as features of our datasets.</div><div class="line">'''</div><div class="line">columns_names = df.columns.tolist()</div><div class="line"></div><div class="line">print(df.shape)</div><div class="line">print(df.head())</div><div class="line"></div><div class="line"><span class="comment"># 数值型变量的协方差矩阵</span></div><div class="line">print(df.corr())</div><div class="line"></div><div class="line"><span class="comment"># [学习heatmap使用]</span></div><div class="line"><span class="comment"># 协方差矩阵的可视化</span></div><div class="line">correlation = df.corr()</div><div class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</div><div class="line">sns.heatmap(correlation, vmax=<span class="number">1</span>, square=<span class="keyword">True</span>, annot=<span class="keyword">True</span>, cmap=<span class="string">'cubehelix'</span>)</div><div class="line">plt.title(<span class="string">'Correlation between diffrent features'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 职位</span></div><div class="line">print(df[<span class="string">'sales'</span>].unique())</div><div class="line"></div><div class="line">groupby_sales = df.groupby(<span class="string">'sales'</span>).mean()</div><div class="line"></div><div class="line">IT=groupby_sales[<span class="string">'satisfaction_level'</span>].IT</div><div class="line">RandD=groupby_sales[<span class="string">'satisfaction_level'</span>].RandD</div><div class="line">accounting=groupby_sales[<span class="string">'satisfaction_level'</span>].accounting</div><div class="line">hr=groupby_sales[<span class="string">'satisfaction_level'</span>].hr</div><div class="line">management=groupby_sales[<span class="string">'satisfaction_level'</span>].management</div><div class="line">marketing=groupby_sales[<span class="string">'satisfaction_level'</span>].marketing</div><div class="line">product_mng=groupby_sales[<span class="string">'satisfaction_level'</span>].product_mng</div><div class="line">sales=groupby_sales[<span class="string">'satisfaction_level'</span>].sales</div><div class="line">support=groupby_sales[<span class="string">'satisfaction_level'</span>].support</div><div class="line">technical=groupby_sales[<span class="string">'satisfaction_level'</span>].technical</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># [学习plt.barh使用]</span></div><div class="line">department_name = df[<span class="string">'sales'</span>].unique()</div><div class="line">department=(sales, accounting, hr, technical, support, management,</div><div class="line">       IT, product_mng, marketing, RandD)</div><div class="line"></div><div class="line">y_pos = np.arange(len(department))</div><div class="line">x = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.1</span>)</div><div class="line"></div><div class="line">plt.barh(y_pos, department, align=<span class="string">'center'</span>, alpha=<span class="number">0.8</span>)</div><div class="line">plt.yticks(y_pos, department_name)</div><div class="line">plt.xlabel(<span class="string">'Satisfaction level'</span>)</div><div class="line">plt.title(<span class="string">'Mean Satisfaction Level of each department'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># PCA</span></div><div class="line"><span class="comment"># 去除非数值型的变量(feature)</span></div><div class="line">print(df.dtypes)</div><div class="line">df_drop = df.drop(labels=[<span class="string">'sales'</span>, <span class="string">'salary'</span>], axis=<span class="number">1</span>)</div><div class="line">print(df_drop.dtypes)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># [学习如下reindex的步骤]</span></div><div class="line"><span class="string">'''</span></div><div class="line">Here we are converting columns of the dataframe to list </div><div class="line">so it would be easier for us to reshuffle the columns.</div><div class="line">We are going to use cols.insert method</div><div class="line">'''</div><div class="line">cols = df_drop.columns.tolist()</div><div class="line">cols.insert(<span class="number">0</span>, cols.pop(cols.index(<span class="string">'left'</span>)))</div><div class="line"></div><div class="line">df_drop = df_drop.reindex(columns= cols)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># [学习iloc使用]</span></div><div class="line"><span class="comment"># 索引分离数据</span></div><div class="line">X = df_drop.iloc[:, <span class="number">1</span>:<span class="number">8</span>].values</div><div class="line">y = df_drop.iloc[:, <span class="number">0</span>].values</div><div class="line"></div><div class="line">print(np.shape(X))</div><div class="line">print(np.shape(y))</div><div class="line"></div><div class="line"><span class="comment"># [学习使用sklearn进行标准化]</span></div><div class="line"><span class="comment"># 数据的标准化</span></div><div class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</div><div class="line">X_std = StandardScaler().fit_transform(X)</div><div class="line"></div><div class="line"><span class="comment"># [掌握手动计算协方差]</span></div><div class="line"><span class="comment"># 计算协方差矩阵</span></div><div class="line">mean_vec = np.mean(X_std, axis=<span class="number">0</span>)</div><div class="line">cov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[<span class="number">0</span>] - <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># another way --&gt; np.cov</span></div><div class="line">print(<span class="string">'NumPy covariance matrix: \n%s'</span> %np.cov(X_std.T))</div><div class="line"></div><div class="line"></div><div class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</div><div class="line">sns.heatmap(cov_mat, vmax=<span class="number">1</span>, square=<span class="keyword">True</span>,annot=<span class="keyword">True</span>,cmap=<span class="string">'cubehelix'</span>)</div><div class="line"></div><div class="line">plt.title(<span class="string">'Correlation between different features'</span>)</div><div class="line"></div><div class="line"><span class="comment"># [学习使用Numpy简单的线性代数的运算]</span></div><div class="line"><span class="comment"># 计算特征值与特征向量</span></div><div class="line">eig_vals, eig_vecs = np.linalg.eig(cov_mat)</div><div class="line"></div><div class="line">print(<span class="string">'Eigenvectors \n%s'</span> %eig_vecs)</div><div class="line">print(<span class="string">'\nEigenvalues \n%s'</span> %eig_vals)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Make a list of (eigenvalue, eigenvector) tuples</span></div><div class="line">eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(eig_vals))]</div><div class="line"></div><div class="line"><span class="comment"># Sort the (eigenvalue, eigenvector) tuples from high to low</span></div><div class="line">eig_pairs.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># Visually confirm that the list is correctly sorted by decreasing eigenvalues</span></div><div class="line">print(<span class="string">'Eigenvalues in descending order:'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> eig_pairs:</div><div class="line">    print(i[<span class="number">0</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Explained Variance</span></div><div class="line">tot = sum(eig_vals)</div><div class="line">var_exp = [(i / tot)*<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> sorted(eig_vals, reverse=<span class="keyword">True</span>)]</div><div class="line"></div><div class="line"><span class="keyword">with</span> plt.style.context(<span class="string">'ggplot'</span>):</div><div class="line">    plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line">    plt.bar(range(<span class="number">7</span>), var_exp, alpha=<span class="number">0.5</span>, align=<span class="string">'center'</span>,</div><div class="line">            label=<span class="string">'individual explained variance'</span>)</div><div class="line">    plt.ylabel(<span class="string">'Explained variance ratio'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Principal components'</span>)</div><div class="line">    plt.legend(loc=<span class="string">'best'</span>)</div><div class="line">    plt.tight_layout()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Projection matrix</span></div><div class="line"><span class="comment"># [假设前两个主成分占Explain Variance 的90%]选取前两个变量，构成Projection matrix</span></div><div class="line">matrix_w = np.hstack((eig_pairs[<span class="number">0</span>][<span class="number">1</span>].reshape(<span class="number">7</span>,<span class="number">1</span>), </div><div class="line">                      eig_pairs[<span class="number">1</span>][<span class="number">1</span>].reshape(<span class="number">7</span>,<span class="number">1</span>)</div><div class="line">                    ))</div><div class="line">print(<span class="string">'Matrix W:\n'</span>, matrix_w)</div><div class="line"></div><div class="line"><span class="comment"># Projection Onto the New Feature Space</span></div><div class="line">Y = X_std.dot(matrix_w)</div><div class="line"></div><div class="line"><span class="comment"># [学习使用sklearn做PCA]</span></div><div class="line"><span class="comment"># PCA in scikit-learn</span></div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</div><div class="line">pca = PCA().fit(X_std)</div><div class="line">plt.plot(np.cumsum(pca.explained_variance_ratio_))</div><div class="line">plt.xlim(<span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>)</div><div class="line">plt.xlabel(<span class="string">'Number of components'</span>)</div><div class="line">plt.ylabel(<span class="string">'Cumulativa explained variance'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA </div><div class="line">sklearn_pca = PCA(n_components=<span class="number">6</span>)</div><div class="line">Y_sklearn = sklearn_pca.fit_transform(X_std)</div><div class="line"></div><div class="line">print(Y_sklearn.shape)</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h5><p>补充下sns.heatmap的使用</p>
<blockquote>
<p>heatmap(data, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt=’.2g’, annot_kws=None, linewidths=0, linecolor=’white’, cbar=True, cbar_kws=None, cbar_ax=None, square=False, ax=None, xticklabels=True, yticklabels=True, mask=None, **kwargs)</p>
<p>Plot rectangular data as a color-encoded matrix.</p>
<p>This function tries to infer a good colormap to use from the data, but<br>this is not guaranteed to work, so take care to make sure the kind of<br>colormap (sequential or diverging) and its limits are appropriate.</p>
<p>This is an Axes-level function and will draw the heatmap into the<br>currently-active Axes if none is provided to the <code>ax</code> argument.  Part of<br>this Axes space will be taken and used to plot a colormap, unless <code>cbar</code><br>is False or a separate Axes is provided to <code>cbar_ax</code>.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">flights = sns.load_dataset(<span class="string">"flights"</span>)</div><div class="line">flights = flights.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>)</div><div class="line">ax = sns.heatmap(flights, linewidth=<span class="number">.5</span>)</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2010-22-47.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">flights = sns.load_dataset(<span class="string">"flights"</span>)</div><div class="line">flights = flights.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>)</div><div class="line">ax = sns.heatmap(flights, center=flights.loc[<span class="string">"January"</span>, <span class="number">1955</span>])</div><div class="line">plt.show()</div><div class="line"></div></pre></td></tr></table></figure>
<p>输出：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/Screenshot%20from%202017-02-25%2010-26-23.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Kaggle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV [Pyramid and Canny]]]></title>
      <url>/2017/02/23/OpenCV-Pyramid-and-Canny/</url>
      <content type="html"><![CDATA[<p>关于<a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/pyramids/pyramids.html" target="_blank" rel="external">图像金字塔</a>与边缘检测的结合。<br>我们知道，cv::pyrDown会损失图像的信息，其后再使用cv::pyrUP进行放大，会变得“模糊”。但是在用于边缘检测时，损失部分细节，可以获得更简洁的轮廓图。<br>测试代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>	<span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span>	<span class="title">main</span><span class="params">(	<span class="keyword">int</span>	argc,	<span class="keyword">char</span>**	argv	)</span>	</span>&#123;</div><div class="line">    cv::Mat	img_rgb,	img_gry,	img_cny;</div><div class="line">    cv::namedWindow(	<span class="string">"Example	Gray"</span>,		cv::WINDOW_AUTOSIZE	);</div><div class="line">    cv::namedWindow(	<span class="string">"Example	Canny"</span>,	cv::WINDOW_AUTOSIZE	);</div><div class="line">    cv::namedWindow(	<span class="string">"Example	Canny  DU"</span>,	cv::WINDOW_AUTOSIZE	);</div><div class="line"></div><div class="line">    img_rgb	=	cv::imread(	argv[<span class="number">1</span>]	);				cv::cvtColor(	img_rgb,	img_gry,	cv::COLOR_BGR2GRAY);</div><div class="line">    cv::imshow(	<span class="string">"Example	Gray"</span>,	img_gry	);</div><div class="line">    cv::Canny(	img_gry,	img_cny,	<span class="number">10</span>,	<span class="number">100</span>,	<span class="number">3</span>,	<span class="literal">true</span>	);</div><div class="line">    cv::imshow(	<span class="string">"Example	Canny"</span>,	img_cny	);</div><div class="line"></div><div class="line">     (img_gry, img_gry);</div><div class="line">    cv::pyrUp(img_gry, img_gry);</div><div class="line">    cv::Canny(	img_gry,	img_cny,	<span class="number">10</span>,	<span class="number">100</span>,	<span class="number">3</span>,	<span class="literal">true</span>	);</div><div class="line">    cv::imshow(	<span class="string">"Example	Canny  DU"</span>,	img_cny	);</div><div class="line">    cv::waitKey(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出图像：<br><img src="http://dataimage-1252464519.costj.myqcloud.com/images/canny.png" alt="canny"></p>
<p>参考： <strong>Learning    OpenCV    3: Computer    Vision    in    C++    with    the    OpenCV    Library</strong> [p68]</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV Wait!]]></title>
      <url>/2017/02/22/OpenCV-Play-Video/</url>
      <content type="html"><![CDATA[<p>环境： CLion Ubuntu16.04 OPenCV3.2.0</p>
<p>学习OpenCV基础时，在读取视频文件时发现一个问题。<br>按照这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>	<span class="meta-string">"opencv2/highgui/highgui.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>	<span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>	<span class="title">main</span><span class="params">(	<span class="keyword">int</span>	argc,	<span class="keyword">char</span>**	argv	)</span>	</span>&#123;</div><div class="line">    cv::namedWindow(	<span class="string">"Example3"</span>,	cv::WINDOW_AUTOSIZE	);</div><div class="line">    cv::VideoCapture	cap;</div><div class="line">    <span class="comment">//cap.open(	std::string(argv[1])	);</span></div><div class="line">    cap.open(<span class="string">"/home/shen/CLionProjects/MyCv/data/summaryVid.ogv"</span>);</div><div class="line">    cv::Mat	frame;</div><div class="line">    <span class="keyword">for</span>(;;)	&#123;</div><div class="line">        cap	&gt;&gt;	frame;</div><div class="line">        <span class="keyword">if</span>(	frame.empty() )	<span class="keyword">break</span>;					<span class="comment">//	Ran	out	of	film</span></div><div class="line">        cv::imshow(	<span class="string">"Example3"</span>,	frame	);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(	cvWaitKey(<span class="number">33</span>) &gt;= <span class="number">0</span> )	<span class="keyword">break</span>;</div><div class="line">        <span class="comment">//if(	cv::waitKey(33) &gt;= 0 )	break;</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>	<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>代码最后，第一个if可以播放完整视频，而第二个却只显示一帧画面。调试发现，cvWaitKey(33)在不按键时返回的是-1， cv::waitKey(33)返回的是255<br>那么，问题来了，这两个函数不一样吗？查了查，没查到区别。。。<br>经<a href="http://www.liusong.me/" target="_blank" rel="external">废帝童鞋</a>帮助，发现是个<a href="https://github.com/opencv/opencv/pull/7866" target="_blank" rel="external">bug</a>…<br>酸爽的夜晚，继续前行…</p>
<p>参考： <strong>Learning    OpenCV    3: Computer    Vision    in    C++    with    the    OpenCV    Library</strong> [p58]</p>
]]></content>
      
        <categories>
            
            <category> Cpp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
